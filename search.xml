<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ajax技术包含Fetch和Axios</title>
    <url>/blog/2024/03/11/Ajax%E6%8A%80%E6%9C%AF%E5%8C%85%E5%90%ABFetch%E5%92%8CAxios/</url>
    <content><![CDATA[<h1 id="Ajax技术"><a href="#Ajax技术" class="headerlink" title="Ajax技术"></a>Ajax技术</h1><h2 id="一-初识前后端交互"><a href="#一-初识前后端交互" class="headerlink" title="一. 初识前后端交互"></a>一. 初识前后端交互</h2><h3 id="传统网站的问题："><a href="#传统网站的问题：" class="headerlink" title="传统网站的问题："></a><strong>传统网站的问题：</strong></h3><ul>
<li>为了获取数据，需要重新加载，浪费资源，增加等待时间，性能不好</li>
<li>验证表单过程中，一项内容不合格，页面需要重新加载，体验不好</li>
</ul>
<h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题:"></a><strong>解决问题:</strong></h3><ul>
<li><code>ajax</code> 全名 <code>async javascript and XML</code></li>
<li>是前后台交互的能力</li>
<li>也就是我们客户端给服务端发送消息的工具，以及接受响应的工具</li>
<li>是一个 <strong>默认异步</strong> 执行机制的功能</li>
</ul>
<h2 id="AJAX-的优势"><a href="#AJAX-的优势" class="headerlink" title="AJAX 的优势"></a>AJAX 的优势</h2><ol>
<li>不需要插件的支持，原生 js 就可以使用</li>
<li>用户体验好（不需要刷新页面就可以更新数据）</li>
<li>减轻服务端和带宽的负担</li>
<li>缺点： 搜索引擎的支持度不够，因为数据都不在页面上，搜索引擎搜索不到</li>
</ol>
<h2 id="二-原生Ajax"><a href="#二-原生Ajax" class="headerlink" title="二. 原生Ajax"></a>二. 原生Ajax</h2><h3 id="1-AJAX-基础"><a href="#1-AJAX-基础" class="headerlink" title="1. AJAX 基础"></a>1. AJAX 基础</h3><ul>
<li>在 js 中有内置的构造函数来创建 ajax 对象</li>
<li>创建 ajax 对象以后，我们就使用 ajax 对象的方法去发送请求和接受响应</li>
</ul>
<h4 id="创建一个-ajax-对象"><a href="#创建一个-ajax-对象" class="headerlink" title="创建一个 ajax 对象"></a>创建一个 ajax 对象</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IE9及以上</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// IE9以下</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&#x27;Mricosoft.XMLHTTP&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>上面就是有了一个 ajax 对象</li>
<li>我们就可以使用这个 <code>xhr</code> 对象来发送 ajax 请求了</li>
</ul>
<h4 id="配置链接信息"><a href="#配置链接信息" class="headerlink" title="配置链接信息"></a>配置链接信息</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// xhr 对象中的 open 方法是来配置请求信息的</span></span><br><span class="line"><span class="comment">// 第一个参数是本次请求的请求方式 get / post / put / ...</span></span><br><span class="line"><span class="comment">// 第二个参数是本次请求的 url </span></span><br><span class="line"><span class="comment">// 第三个参数是本次请求是否异步，默认 true 表示异步，false 表示同步</span></span><br><span class="line"><span class="comment">// xhr.open(&#x27;请求方式&#x27;, &#x27;请求地址&#x27;, 是否异步)</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;./data.php&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>上面的代码执行完毕以后，本次请求的基本配置信息就写完了</li>
</ul>
<h4 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;./data.php&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 xhr 对象中的 send 方法来发送请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li>上面代码是把配置好信息的 ajax 对象发送到服务端</li>
</ul>
<h4 id="一个基本的-ajax-请求"><a href="#一个基本的-ajax-请求" class="headerlink" title="一个基本的 ajax 请求"></a>一个基本的 ajax 请求</h4><ul>
<li>一个最基本的 ajax 请求就是上面三步</li>
<li>但是光有上面的三个步骤，我们确实能把请求发送的到服务端</li>
<li>如果服务端正常的话，响应也能回到客户端</li>
<li>但是我们拿不到响应</li>
<li>如果想拿到响应，我们有两个前提条件<ol>
<li>本次 HTTP 请求是成功的，也就是我们之前说的 http 状态码为 200 ~ 299</li>
<li>ajax 对象也有自己的状态码，用来表示本次 ajax 请求中各个阶段</li>
</ol>
</li>
</ul>
<h4 id="ajax-状态码"><a href="#ajax-状态码" class="headerlink" title="ajax 状态码"></a>ajax 状态码</h4><ul>
<li>ajax 状态码 - <code>xhr.readyState</code></li>
<li>是用来表示一个 ajax 请求的全部过程中的某一个状态<ul>
<li><code>readyState === 0</code>：  表示未初始化完成，也就是 <code>open</code> 方法还没有执行</li>
<li><code>readyState === 1</code>：  表示配置信息已经完成，也就是执行完 <code>open</code> 之后</li>
<li><code>readyState === 2</code>：  表示 <code>send</code> 方法已经执行完成</li>
<li><code>readyState === 3</code>：  表示正在解析响应内容</li>
<li><code>readyState === 4</code>：  表示响应内容已经解析完毕，可以在客户端使用了</li>
</ul>
</li>
<li>这个时候我们就会发现，当一个 ajax 请求的全部过程中，只有当 <code>readyState === 4</code> 的时候，我们才可以正常使用服务端给我们的数据</li>
<li>所以，配合 http 状态码为 200 ~ 299 <ul>
<li>一个 ajax 对象中有一个成员叫做 <code>xhr.status</code> </li>
<li>这个成员就是记录本次请求的 http 状态码的</li>
</ul>
</li>
<li>两个条件都满足的时候，才是本次请求正常完成</li>
</ul>
<h4 id="readyStateChange"><a href="#readyStateChange" class="headerlink" title="readyStateChange"></a>readyStateChange</h4><ul>
<li><p>在 ajax 对象中有一个事件，叫做 <code>readyStateChange</code> 事件</p>
</li>
<li><p>这个事件是专门用来监听 ajax 对象的 <code>readyState</code> 值改变的的行为</p>
</li>
<li><p>也就是说只要 <code>readyState</code> 的值发生变化了，那么就会触发该事件</p>
</li>
<li><p>所以我们就在这个事件中来监听 ajax 的 <code>readyState</code> 是不是到 4 了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;./data.php&#x27;</span>)</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line"></span><br><span class="line">xhr.<span class="property">onreadyStateChange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 每次 readyState 改变的时候都会触发该事件</span></span><br><span class="line">  <span class="comment">// 我们就在这里判断 readyState 的值是不是到 4</span></span><br><span class="line">  <span class="comment">// 并且 http 的状态码是不是 200 ~ 299</span></span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; <span class="regexp">/^2\d&#123;2&#125;$/</span>.<span class="title function_">test</span>(xhr.<span class="property">status</span>)) &#123;</span><br><span class="line">    <span class="comment">// 这里表示验证通过</span></span><br><span class="line">    <span class="comment">// 我们就可以获取服务端给我们响应的内容了</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="responseText"><a href="#responseText" class="headerlink" title="responseText"></a>responseText</h4><ul>
<li><p>ajax 对象中的 <code>responseText</code> 成员</p>
</li>
<li><p>就是用来记录服务端给我们的响应体内容的</p>
</li>
<li><p>所以我们就用这个成员来获取响应体内容就可以</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;./data.php&#x27;</span>)</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line"></span><br><span class="line">xhr.<span class="property">onreadyStateChange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; <span class="regexp">/^2\d&#123;2&#125;$/</span>.<span class="title function_">test</span>(xhr.<span class="property">status</span>)) &#123;</span><br><span class="line">    <span class="comment">// 我们在这里直接打印 xhr.responseText 来查看服务端给我们返回的内容</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-使用-ajax-发送请求时携带参数"><a href="#2-使用-ajax-发送请求时携带参数" class="headerlink" title="2. 使用 ajax 发送请求时携带参数"></a>2. 使用 ajax 发送请求时携带参数</h3><ul>
<li>我们使用 ajax 发送请求也是可以携带参数的</li>
<li>参数就是和后台交互的时候给他的一些信息</li>
<li>但是携带参数 get 和 post 两个方式还是有区别的</li>
</ul>
<h4 id="发送一个带有参数的-get-请求"><a href="#发送一个带有参数的-get-请求" class="headerlink" title="发送一个带有参数的 get 请求"></a>发送一个带有参数的 get 请求</h4><ul>
<li><p>get 请求的参数就直接在 url 后面进行拼接就可以</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="comment">// 直接在地址后面加一个 ?，然后以 key=value 的形式传递</span></span><br><span class="line"><span class="comment">// 两个数据之间以 &amp; 分割</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;./data.php?a=100&amp;b=200&#x27;</span>)</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li>这样服务端就能接受到两个参数</li>
<li>一个是 a，值是 100</li>
<li>一个是 b，值是 200</li>
</ul>
</li>
</ul>
<h4 id="发送一个带有参数的-post-请求"><a href="#发送一个带有参数的-post-请求" class="headerlink" title="发送一个带有参数的 post 请求"></a>发送一个带有参数的 post 请求</h4><ul>
<li><p>post 请求的参数是携带在请求体中的，所以不需要再 url 后面拼接</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;./data.php&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是用 ajax 对象发送 post 请求，必须要先设置一下请求头中的 content-type</span></span><br><span class="line"><span class="comment">// 告诉一下服务端我给你的是一个什么样子的数据格式</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求体直接再 send 的时候写在 () 里面就行</span></span><br><span class="line"><span class="comment">// 不需要问号，直接就是 &#x27;key=value&amp;key=value&#x27; 的形式</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;a=100&amp;b=200&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>application/x-www-form-urlencoded</code> 表示的数据格式就是 <code>key=value&amp;key=value</code></li>
</ul>
</li>
</ul>
<h4 id="不同的请求方式"><a href="#不同的请求方式" class="headerlink" title="不同的请求方式"></a>不同的请求方式</h4><ul>
<li><p>get  偏向获取 </p>
</li>
<li><p>post 偏向提交 </p>
</li>
<li><p>put  偏向更新</p>
</li>
<li><p>patch  偏向修改部分</p>
</li>
<li><p>delete 偏向删除信息</p>
</li>
<li><p>head 偏向获取服务器头的信息</p>
</li>
<li><p>option 偏向获取服务器设备信息</p>
</li>
<li><p>connnect 保留请求方式</p>
</li>
</ul>
<h2 id="三-Fetch"><a href="#三-Fetch" class="headerlink" title="三. Fetch"></a>三. Fetch</h2><pre><code>*XMLHttpRequest 是一个设计粗糙的 API，配置和调用方式非常混乱， 而且基于事件的异步模型写起来不友好。* 

**兼容性不好 polyfill: https://github.com/camsong/fetch-ie8**
</code></pre>
<h3 id="1-用法"><a href="#1-用法" class="headerlink" title="1. 用法"></a>1. 用法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;http://localhost:3000/users&quot;</span>)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>res.<span class="title function_">json</span>())</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;http://localhost:3000/users&quot;</span>,&#123;</span><br><span class="line">            <span class="attr">method</span>:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">            <span class="attr">headers</span>:&#123;</span><br><span class="line">                <span class="string">&quot;content-type&quot;</span>:<span class="string">&quot;application/json&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">body</span>:<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">                <span class="attr">username</span>:<span class="string">&quot;kerwin&quot;</span>,</span><br><span class="line">                <span class="attr">password</span>:<span class="string">&quot;123&quot;</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>res.<span class="title function_">json</span>())</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;http://localhost:3000/users/5&quot;</span>,&#123;</span><br><span class="line">            <span class="attr">method</span>:<span class="string">&quot;PUT&quot;</span>,</span><br><span class="line">            <span class="attr">headers</span>:&#123;</span><br><span class="line">                <span class="string">&quot;content-type&quot;</span>:<span class="string">&quot;application/json&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">body</span>:<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">                <span class="attr">username</span>:<span class="string">&quot;kerwin&quot;</span>,</span><br><span class="line">                <span class="attr">password</span>:<span class="string">&quot;456&quot;</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>res.<span class="title function_">json</span>())</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;http://localhost:3000/users/5&quot;</span>,&#123;</span><br><span class="line">            <span class="attr">method</span>:<span class="string">&quot;DELETE&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>res.<span class="title function_">json</span>())</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure>
<h3 id="2-错误处理"><a href="#2-错误处理" class="headerlink" title="2. 错误处理"></a>2. 错误处理</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;http://localhost:3000/users1&quot;</span>)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(res.<span class="property">ok</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> res.<span class="title function_">json</span>()</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(&#123;</span><br><span class="line">                        <span class="attr">status</span>:res.<span class="property">status</span>,</span><br><span class="line">                        <span class="attr">statusText</span>:res.<span class="property">statusText</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure>



<h2 id="四-axios"><a href="#四-axios" class="headerlink" title="四. axios"></a>四. axios</h2><blockquote>
<p>Axios是一个基于promise 的 HTTP 库，可以用在浏览器和 node.js中。</p>
</blockquote>
<blockquote>
<p><a href="https://www.npmjs.com/package/axios">https://www.npmjs.com/package/axios</a></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-get请求"><a href="#1-get请求" class="headerlink" title="1. get请求"></a>1. get请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;http://localhost:3000/users&quot;</span>,&#123;</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;kerwin&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-post请求"><a href="#2-post请求" class="headerlink" title="2.post请求"></a>2.post请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&quot;http://localhost:3000/users&quot;</span>,&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;kerwin&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">100</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-put请求"><a href="#3-put请求" class="headerlink" title="3. put请求"></a>3. put请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">put</span>(<span class="string">&quot;http://localhost:3000/users/12&quot;</span>,&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;kerwin111&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">200</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="4-delete请求"><a href="#4-delete请求" class="headerlink" title="4. delete请求"></a>4. delete请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">delete</span>(<span class="string">&quot;http://localhost:3000/users/11&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="5-axios-config-配置"><a href="#5-axios-config-配置" class="headerlink" title="5. axios(config)配置"></a>5. axios(config)配置</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/users&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;kerwin&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="6-axios拦截器"><a href="#6-axios拦截器" class="headerlink" title="6. axios拦截器"></a>6. axios拦截器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// Do something before request is sent</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;loading-开始&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// Do something with request error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add a response interceptor</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// Any status code that lie within the range of 2xx cause this function to trigger</span></span><br><span class="line">    <span class="comment">// Do something with response data</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;loading-结束&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// Any status codes that falls outside the range of 2xx cause this function to trigger</span></span><br><span class="line">    <span class="comment">// Do something with response error</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;loading---结束&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="7-axios-中断器"><a href="#7-axios-中断器" class="headerlink" title="7. axios 中断器"></a>7. axios 中断器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> controller = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/foo/bar&#x27;</span>, &#123;</span><br><span class="line">   <span class="attr">signal</span>: controller.<span class="property">signal</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>) &#123;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// cancel the request</span></span><br><span class="line">controller.<span class="title function_">abort</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="五-同源策略-Same-origin-policy"><a href="#五-同源策略-Same-origin-policy" class="headerlink" title="五. 同源策略(Same-origin policy)"></a>五. 同源策略(Same-origin policy)</h2><p>一个 URL  有三部分组成：协议、域名(指向主机)、端口，只有这三个完全相同的 URL 才能称之为同源。如下，能和  <code>http://www.example.com/dir1/index.html</code>  同源的是？</p>
<table>
<thead>
<tr>
<th>URL</th>
<th>结果</th>
<th>原因</th>
</tr>
</thead>
<tbody><tr>
<td><code>http://www.example.com/dir2/api</code></td>
<td>同源</td>
<td>只有路径不同</td>
</tr>
<tr>
<td><code>https://www.example.com/api</code></td>
<td>不同源</td>
<td>协议不同</td>
</tr>
<tr>
<td><code>http://www.example.com:81/dir1/etc.html</code></td>
<td>不同源</td>
<td>端口不同 ( <code>http://</code> 默认端口是80)</td>
</tr>
<tr>
<td><code>http://www.kerwin.com/dir1/other.html</code></td>
<td>不同源</td>
<td>域名不同</td>
</tr>
</tbody></table>
<hr>
<blockquote>
<p>（1） 无法读取非同源网页的 Cookie、LocalStorage 。<br>（2） 无法接触非同源网页的 DOM。<br>（3） 无法向非同源地址发送 AJAX 请求（可以发送，但浏览器会拒绝接受响应）。</p>
</blockquote>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><strong>注意：</strong></h3><p>同源策略是浏览器的行为，是为了保护本地数据不被JavaScript代码获取回来的数据污染，因此拦截的是客户端发出的请求回来的数据接收，即请求发送了，服务器响应了，但是无法被浏览器接收。</p>
<h2 id="六-jsonp"><a href="#六-jsonp" class="headerlink" title="六. jsonp"></a>六. jsonp</h2><p>Jsonp(JSON with Padding) 是 json 的一种”使用模式”，可以让网页从别的域名（网站）那获取资料，即跨域读取数据。</p>
<p>为什么我们从不同的域（网站）访问数据需要一个特殊的技术( JSONP )呢？这是因为同源策略。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">script.<span class="property">src</span> = <span class="string">&#x27;./kerwin.txt&#x27;</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script)</span><br></pre></td></tr></table></figure>

<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a><strong>实战</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mysearch.<span class="property">oninput</span> = <span class="keyword">function</span>(<span class="params">evt</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(evt.<span class="property">target</span>.<span class="property">value</span>)</span><br><span class="line">    <span class="keyword">if</span>(!evt.<span class="property">target</span>.<span class="property">value</span>)&#123;</span><br><span class="line">        list.<span class="property">innerHTML</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> oscript = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>)</span><br><span class="line">    oscript.<span class="property">src</span> = <span class="string">`https://www.baidu.com/sugrec?pre=1&amp;p=3&amp;ie=utf-8&amp;json=1&amp;prod=pc&amp;from=pc_web&amp;sugsid=36542,36464,36673,36454,31660,36692,36166,36695,36697,36570,36074,36655,36345,26350,36469,36314&amp;wd=<span class="subst">$&#123;evt.target.value&#125;</span>&amp;req=2&amp;csor=1&amp;cb=test&amp;_=1656294200527`</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(oscript)</span><br><span class="line"></span><br><span class="line">    oscript.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        oscript.<span class="title function_">remove</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">g</span>)</span><br><span class="line"></span><br><span class="line">    list.<span class="property">innerHTML</span> = obj.<span class="property">g</span>.<span class="title function_">map</span>(<span class="function"><span class="params">item</span>=&gt;</span></span><br><span class="line">                               <span class="string">`&lt;li&gt;<span class="subst">$&#123;item.q&#125;</span>&lt;/li&gt;`</span></span><br><span class="line">                              ).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS如何安装Redis</title>
    <url>/blog/2024/02/01/CentOS%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85Redis/</url>
    <content><![CDATA[<h1 id="CentOS系统上安装Redis操作教程"><a href="#CentOS系统上安装Redis操作教程" class="headerlink" title="CentOS系统上安装Redis操作教程"></a>CentOS系统上安装Redis操作教程</h1><p>Redis（Remote Dictionary Server）是一个开源的，基于内存的高性能键值对（NoSQL）数据库。它支持多种类型的数据结构，如字符串（strings）、列表（lists）、集合（sets）、有序集合（sorted sets）、哈希（hashes）、位图（bitmaps）、超日志（hyperloglogs）和地理空间（geospatial）索引半径查询。Redis因其出色的性能、可扩展性和广泛的功能集而广受欢迎。</p>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>在开始安装Redis之前，确保你的CentOS系统已经安装了必要的依赖项，并且系统是最新的。这有助于避免在安装过程中遇到不必要的问题。</p>
<ol>
<li><p><strong>更新系统</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>安装编译工具</strong>：<br>除了<code>gcc</code>，你可能还需要安装<code>make</code>和<code>tcl</code>，因为它们是编译Redis的依赖项。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y gcc make tcl</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="下载Redis"><a href="#下载Redis" class="headerlink" title="下载Redis"></a>下载Redis</h2><ol start="3">
<li><p><strong>下载Redis</strong>：<br>选择一个稳定的Redis版本进行下载。这里我们以6.2.6版本为例。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://download.redis.io/releases/redis-6.2.6.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>解压下载的压缩包</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf redis-6.2.6.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>进入Redis目录</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd redis-6.2.6/</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="编译安装Redis"><a href="#编译安装Redis" class="headerlink" title="编译安装Redis"></a>编译安装Redis</h2><ol start="6">
<li><p><strong>编译Redis</strong>：<br>在Redis目录中，执行编译命令。这将自动检测系统环境并编译Redis。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>安装Redis</strong>：<br>使用<code>make install</code>命令将Redis安装到指定目录。这里我们选择<code>/usr/local/redis</code>作为安装目录。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo make install PREFIX=/usr/local/redis</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="配置Redis"><a href="#配置Redis" class="headerlink" title="配置Redis"></a>配置Redis</h2><ol start="8">
<li><p><strong>创建Redis配置文件目录</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir /etc/redis</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>复制配置文件</strong>：<br>将默认的配置文件复制到<code>/etc/redis</code>目录。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cp redis.conf /etc/redis/</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>编辑配置文件</strong>：<br>使用文本编辑器（如<code>vi</code>或<code>nano</code>）编辑配置文件，根据需要调整设置。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>

<p>例如，你可以设置<code>bind</code>指令来限制Redis服务的访问，或者调整内存使用策略等。</p>
</li>
</ol>
<h2 id="启动Redis服务"><a href="#启动Redis服务" class="headerlink" title="启动Redis服务"></a>启动Redis服务</h2><ol start="11">
<li><p><strong>启动Redis</strong>：<br>使用以下命令启动Redis服务。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看进程来确定redis是否启动成功，非必须</span></span><br><span class="line">ps -ef |grep redis</span><br></pre></td></tr></table></figure>


</li>
<li><p><strong>设置Redis开机自启</strong>：<br>创建一个systemd服务文件来管理Redis服务。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/systemd/system/redis.service</span><br></pre></td></tr></table></figure>

<p>在文件中添加以下内容（请根据实际情况修改<code>ExecStart</code>路径）：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Redis In-Memory Data Store</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">User</span>=redis</span><br><span class="line"><span class="attr">Group</span>=redis</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/redis/bin/redis-server /etc/redis/redis.conf</span><br><span class="line"><span class="attr">ExecStop</span>=/usr/local/redis/bin/redis-cli shutdown</span><br><span class="line"><span class="attr">PrivateTmp</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>

<p>保存并退出编辑器。</p>
</li>
<li><p><strong>启用Redis服务</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable redis.service</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>启动Redis服务</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl start redis.service</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="验证Redis安装"><a href="#验证Redis安装" class="headerlink" title="验证Redis安装"></a>验证Redis安装</h2><ol start="15">
<li><p><strong>检查Redis服务状态</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl status redis.service</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试Redis</strong>：<br>使用Redis命令行客户端测试服务。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli</span><br></pre></td></tr></table></figure>

<p>在客户端中，尝试执行一些基本命令，如<code>set</code>和<code>get</code>，来验证Redis是否正常工作。</p>
</li>
</ol>
<h2 id="停止和重启Redis服务"><a href="#停止和重启Redis服务" class="headerlink" title="停止和重启Redis服务"></a>停止和重启Redis服务</h2><ol start="17">
<li><p><strong>停止Redis服务</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop redis.service</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>重启Redis服务</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart redis.service</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="卸载Redis服务"><a href="#卸载Redis服务" class="headerlink" title="卸载Redis服务"></a>卸载Redis服务</h2><ol start="19">
<li><p><strong>停止并禁用Redis服务</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop redis.service</span><br><span class="line">sudo systemctl disable redis.service</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>删除Redis服务文件</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rm /etc/systemd/system/redis.service</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>删除Redis安装目录</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /usr/local/redis</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>清理Redis配置文件</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rm /etc/redis/redis.conf</span><br></pre></td></tr></table></figure></li>
</ol>
<p>在执行上述步骤时，请确保你有足够的权限来执行系统命令。如果你不是root用户，你可能需要在命令前加上<code>sudo</code>来获取必要的权限。此外，建议在进行任何更改之前备份你的系统或相关文件。</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS如何安装jdk</title>
    <url>/blog/2024/02/09/CentOS%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85jdk/</url>
    <content><![CDATA[<h1 id="CentOS上安装JDK的详细教程"><a href="#CentOS上安装JDK的详细教程" class="headerlink" title="CentOS上安装JDK的详细教程"></a>CentOS上安装JDK的详细教程</h1><p>在CentOS系统上安装Java开发工具包（JDK）是一个常见的任务，特别是对于需要运行Java应用程序的服务器。本教程将指导您如何在CentOS上安装JDK 8和JDK 17。</p>
<h2 id="1-卸载已有的Java版本（如果需要）"><a href="#1-卸载已有的Java版本（如果需要）" class="headerlink" title="1. 卸载已有的Java版本（如果需要）"></a>1. 卸载已有的Java版本（如果需要）</h2><p>在安装新版本的JDK之前，您可能需要卸载系统上已安装的Java版本。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep java</span><br></pre></td></tr></table></figure>

<p>上述命令将列出所有已安装的Java相关包。如果需要卸载，请使用以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -e --nodeps &lt;已安装的JDK包名&gt;</span><br></pre></td></tr></table></figure>

<h2 id="2-安装JDK-8"><a href="#2-安装JDK-8" class="headerlink" title="2. 安装JDK 8"></a>2. 安装JDK 8</h2><h3 id="2-1-下载JDK-8"><a href="#2-1-下载JDK-8" class="headerlink" title="2.1 下载JDK 8"></a>2.1 下载JDK 8</h3><p>首先，下载JDK 8的安装包。这里我们使用华为云提供的JDK 8镜像。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://repo.huaweicloud.com/java/jdk/8u202-b08/jdk-8u202-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="2-2-创建安装目录"><a href="#2-2-创建安装目录" class="headerlink" title="2.2 创建安装目录"></a>2.2 创建安装目录</h3><p>创建一个目录用于存放JDK。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/local/java</span><br></pre></td></tr></table></figure>

<h3 id="2-3-解压JDK到安装目录"><a href="#2-3-解压JDK到安装目录" class="headerlink" title="2.3 解压JDK到安装目录"></a>2.3 解压JDK到安装目录</h3><p>将下载的JDK包解压到<code>/usr/local/java</code>目录。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u202-linux-x64.tar.gz -C /usr/local/java</span><br></pre></td></tr></table></figure>

<h3 id="2-4-配置环境变量"><a href="#2-4-配置环境变量" class="headerlink" title="2.4 配置环境变量"></a>2.4 配置环境变量</h3><p>编辑<code>/etc/profile</code>文件，添加JDK的环境变量。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>

<p>在文件末尾添加以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_202</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure>

<p>保存并退出编辑器。</p>
<h3 id="2-5-使环境变量生效"><a href="#2-5-使环境变量生效" class="headerlink" title="2.5 使环境变量生效"></a>2.5 使环境变量生效</h3><p>使环境变量立即生效。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<h3 id="2-6-验证安装"><a href="#2-6-验证安装" class="headerlink" title="2.6 验证安装"></a>2.6 验证安装</h3><p>检查JDK版本。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<h2 id="3-安装JDK-17"><a href="#3-安装JDK-17" class="headerlink" title="3. 安装JDK 17"></a>3. 安装JDK 17</h2><h3 id="3-1-下载JDK-17"><a href="#3-1-下载JDK-17" class="headerlink" title="3.1 下载JDK 17"></a>3.1 下载JDK 17</h3><p>下载JDK 17的安装包。这里我们使用Oracle官方提供的JDK 17镜像。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="3-2-解压JDK到安装目录"><a href="#3-2-解压JDK到安装目录" class="headerlink" title="3.2 解压JDK到安装目录"></a>3.2 解压JDK到安装目录</h3><p>解压JDK 17到<code>/usr/local/java</code>目录。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-17_linux-x64_bin.tar.gz -C /usr/local/java</span><br></pre></td></tr></table></figure>

<h3 id="3-3-配置环境变量"><a href="#3-3-配置环境变量" class="headerlink" title="3.3 配置环境变量"></a>3.3 配置环境变量</h3><p>编辑<code>/etc/profile</code>文件，添加JDK 17的环境变量。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>

<p>在文件末尾添加以下内容（请确保替换为正确的解压后的目录名）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/java/jdk-17</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure>

<p>保存并退出编辑器。</p>
<h3 id="3-4-使环境变量生效"><a href="#3-4-使环境变量生效" class="headerlink" title="3.4 使环境变量生效"></a>3.4 使环境变量生效</h3><p>使环境变量立即生效。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<h3 id="3-5-验证安装"><a href="#3-5-验证安装" class="headerlink" title="3.5 验证安装"></a>3.5 验证安装</h3><p>检查JDK版本。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<h2 id="4-Java后台运行命令"><a href="#4-Java后台运行命令" class="headerlink" title="4. Java后台运行命令"></a>4. Java后台运行命令</h2><p>如果您需要在后台运行Java应用程序，可以使用以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup java -jar your-application.jar &gt; output.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<p>这将使Java应用程序在后台运行，并将输出重定向到<code>output.log</code>文件。</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS如何安装mysql</title>
    <url>/blog/2024/02/09/CentOS%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85mysql/</url>
    <content><![CDATA[<h1 id="CentOS如何安装mysql"><a href="#CentOS如何安装mysql" class="headerlink" title="CentOS如何安装mysql"></a>CentOS如何安装mysql</h1><h2 id="卸载MySQL"><a href="#卸载MySQL" class="headerlink" title="卸载MySQL"></a>卸载MySQL</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep -i mysql</span><br><span class="line">rpm -ev --nodeps mysql-community-common-5.7.44-1.el7.x86_64</span><br><span class="line">rpm -ev --nodeps mysql57-community-release-el7-10.noarch</span><br><span class="line">rpm -ev --nodeps mysql-community-libs-5.7.44-1.el7.x86_64</span><br><span class="line">rpm -ev --nodeps mysql-community-server-5.7.44-1.el7.x86_64</span><br><span class="line">rpm -ev --nodeps mysql-community-client-5.7.44-1.el7.x86_64</span><br><span class="line"></span><br><span class="line">find / -name mysql</span><br><span class="line">rm -rf /var/lib/mysql</span><br><span class="line">rm -rf /var/lib/mysql/mysql</span><br><span class="line">rm -rf /usr/lib64/mysql</span><br><span class="line">rm -rf /usr/share/mysql</span><br><span class="line"></span><br><span class="line">rm -rf /etc/my.cnf</span><br><span class="line">rpm -qa|grep -i mysql</span><br><span class="line">rpm -qa | grep mariadb</span><br></pre></td></tr></table></figure>



<h2 id="安装5-7版本"><a href="#安装5-7版本" class="headerlink" title="安装5.7版本"></a>安装5.7版本</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">yum -y install mysql-community-server</span><br><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br><span class="line">systemctl start  mysqld.service</span><br><span class="line">systemctl status mysqld.service</span><br><span class="line">grep &quot;password&quot; /var/log/mysqld.log</span><br><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>



<h3 id="配置远程连接"><a href="#配置远程连接" class="headerlink" title="配置远程连接"></a>配置远程连接</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set global validate_password_policy=0;</span><br><span class="line">set global validate_password_mixed_case_count=0;</span><br><span class="line">set global validate_password_number_count=0;</span><br><span class="line">set global validate_password_special_char_count=0;</span><br><span class="line">set global validate_password_length=3;</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;password&#x27;;</span><br><span class="line"></span><br><span class="line">grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;password&#x27; with grant option;</span><br><span class="line">flush privileges;</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line">service mysqld restart</span><br><span class="line"></span><br><span class="line">status</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_general_ci</span><br><span class="line"></span><br><span class="line">set character_set_client=utf8;</span><br><span class="line">set character_set_connection=utf8;</span><br><span class="line">set character_set_database=utf8;</span><br><span class="line">set character_set_results=utf8;</span><br><span class="line">set character_set_server=utf8;</span><br><span class="line"></span><br><span class="line">systemctl enable mysqld</span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>



<h2 id="安装8-0版本"><a href="#安装8-0版本" class="headerlink" title="安装8.0版本"></a>安装8.0版本</h2><h3 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rpm -Uvh https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line"></span><br><span class="line">sudo yum --enablerepo=mysql80-community install mysql-community-server</span><br><span class="line"></span><br><span class="line">grep &quot;A temporary password&quot; /var/log/mysqld.log;</span><br><span class="line"></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;Password@123&#x27;;</span><br><span class="line">--可以使用以下命令进行修改</span><br><span class="line">--密码验证策略低要求(0或LOW代表低级)</span><br><span class="line">set global validate_password.policy=MEDIUM;</span><br><span class="line">--密码至少要包含的小写字母个数和大写字母个数</span><br><span class="line">set global validate_password.mixed_case_count=0;</span><br><span class="line">--密码至少要包含的数字个数。</span><br><span class="line">set global validate_password.number_count=0; </span><br><span class="line">--密码至少要包含的特殊字符数</span><br><span class="line">set global validate_password.special_char_count=0; </span><br><span class="line">-- 密码长度</span><br><span class="line">set global validate_password.length=8;  </span><br><span class="line"></span><br><span class="line">show variables like &#x27;validate%&#x27;;</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;password&#x27;;</span><br></pre></td></tr></table></figure>



<h3 id="配置远程连接-1"><a href="#配置远程连接-1" class="headerlink" title="配置远程连接"></a>配置远程连接</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">select host, user, authentication_string, plugin from user;</span><br><span class="line"></span><br><span class="line">CREATE USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;password&#x27;;</span><br><span class="line">grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27;;</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="检查运行状态"><a href="#检查运行状态" class="headerlink" title="检查运行状态"></a>检查运行状态</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status mysqld</span><br><span class="line">ps -ef|grep mysqld</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS安装配置Nginx</title>
    <url>/blog/2024/02/09/CentOS%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AENginx/</url>
    <content><![CDATA[<h1 id="CentOS上安装与配置Nginx"><a href="#CentOS上安装与配置Nginx" class="headerlink" title="CentOS上安装与配置Nginx"></a>CentOS上安装与配置Nginx</h1><p>Nginx是一款轻量级的Web服务器&#x2F;反向代理服务器及电子邮件（IMAP&#x2F;POP3）代理服务器，并在一个BSD-like协议下发行。以下是在CentOS系统上安装和配置Nginx的步骤。</p>
<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>在开始之前，确保你的系统已经更新到最新版本，并且网络连接正常。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查网络连接</span></span><br><span class="line">ping www.baidu.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新系统源</span></span><br><span class="line">sudo yum update</span><br></pre></td></tr></table></figure>

<h2 id="2-安装编译环境"><a href="#2-安装编译环境" class="headerlink" title="2. 安装编译环境"></a>2. 安装编译环境</h2><p>Nginx需要编译安装，因此需要先安装编译环境和一些必要的库。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装编译工具</span></span><br><span class="line">sudo yum -y install gcc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装PCRE库</span></span><br><span class="line">sudo yum -y install pcre pcre-devel</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装Zlib库</span></span><br><span class="line">sudo yum -y install zlib zlib-devel</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装OpenSSL库</span></span><br><span class="line">sudo yum -y install openssl openssl-devel</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装wget工具</span></span><br><span class="line">sudo yum -y install wget</span><br></pre></td></tr></table></figure>

<h2 id="3-下载与安装Nginx"><a href="#3-下载与安装Nginx" class="headerlink" title="3. 下载与安装Nginx"></a>3. 下载与安装Nginx</h2><p>从Nginx官网下载最新的稳定版本。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载Nginx安装包</span></span><br><span class="line">wget http://nginx.org/download/nginx-1.9.9.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压安装包</span></span><br><span class="line">tar -zxvf nginx-1.9.9.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入解压后的目录</span></span><br><span class="line">cd nginx-1.9.9</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置Nginx</span></span><br><span class="line">./configure</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译并安装Nginx</span></span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<h2 id="4-运行Nginx"><a href="#4-运行Nginx" class="headerlink" title="4. 运行Nginx"></a>4. 运行Nginx</h2><p>安装完成后，Nginx的二进制文件将位于<code>/usr/local/nginx/sbin/</code>目录下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到Nginx安装目录</span></span><br><span class="line">cd /usr/local/nginx/sbin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动Nginx</span></span><br><span class="line">sudo ./nginx</span><br></pre></td></tr></table></figure>

<h2 id="5-检查Nginx运行状态"><a href="#5-检查Nginx运行状态" class="headerlink" title="5. 检查Nginx运行状态"></a>5. 检查Nginx运行状态</h2><p>确认Nginx是否成功运行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看Nginx进程</span></span><br><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure>

<h2 id="6-配置Nginx"><a href="#6-配置Nginx" class="headerlink" title="6. 配置Nginx"></a>6. 配置Nginx</h2><p>编辑Nginx的配置文件，通常位于<code>/usr/local/nginx/conf/nginx.conf</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 用户配置</span><br><span class="line">user  nobody;</span><br><span class="line"></span><br><span class="line"># 工作进程数</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"># 错误日志和PID文件</span><br><span class="line">error_log  logs/error.log;</span><br><span class="line">pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"># 事件配置</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># HTTP服务器配置</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    # 日志配置</span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    # 性能优化</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    # Gzip压缩</span><br><span class="line">    gzip  on;</span><br><span class="line"></span><br><span class="line">    # 虚拟主机配置</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /usr/local/nginx/html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 错误页面配置</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   /usr/local/nginx/html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-重启Nginx"><a href="#7-重启Nginx" class="headerlink" title="7. 重启Nginx"></a>7. 重启Nginx</h2><p>配置完成后，重启Nginx使配置生效。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止Nginx</span></span><br><span class="line">sudo /usr/local/nginx/sbin/nginx -s stop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动Nginx</span></span><br><span class="line">sudo /usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>

<h2 id="8-验证安装"><a href="#8-验证安装" class="headerlink" title="8. 验证安装"></a>8. 验证安装</h2><p>在浏览器中输入服务器的IP地址，如果看到Nginx的欢迎页面，说明安装成功。</p>
<hr>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS系统下Docker的安装教程</title>
    <url>/blog/2024/03/31/CentOS%E7%B3%BB%E7%BB%9F%E4%B8%8BDocker%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="CentOS系统下Docker的安装教程"><a href="#CentOS系统下Docker的安装教程" class="headerlink" title="CentOS系统下Docker的安装教程"></a>CentOS系统下Docker的安装教程</h1><p>Docker是一个开源的应用容器引擎，它允许开发人员将应用及其依赖打包到一个轻量级、可移植的容器中，然后发布到任何流行的Linux机器或Windows机器上，也可以实现虚拟化。在本文中，我们将探讨如何在CentOS系统上安装Docker。</p>
<h2 id="支持的CentOS版本"><a href="#支持的CentOS版本" class="headerlink" title="支持的CentOS版本"></a>支持的CentOS版本</h2><p>Docker支持以下64位CentOS版本：</p>
<ul>
<li>CentOS 7</li>
<li>CentOS 8</li>
<li>更高版本</li>
</ul>
<h2 id="使用官方安装脚本自动安装"><a href="#使用官方安装脚本自动安装" class="headerlink" title="使用官方安装脚本自动安装"></a>使用官方安装脚本自动安装</h2><p>自动安装是最简单的安装方式，只需运行以下命令即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>

<p>这条命令会从Docker的官方网站下载安装脚本，并自动执行安装过程。其中<code>--mirror Aliyun</code>表示使用阿里云的镜像加速，这对于国内用户来说可以大大提高下载速度。</p>
<h2 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h2><p>如果你希望手动控制安装过程，可以按照以下步骤进行：</p>
<h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><p>如果你的系统中已经安装了旧版本的Docker（称为docker或docker-engine），请先卸载它们：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">    docker-client \</span><br><span class="line">    docker-client-latest \</span><br><span class="line">    docker-common \</span><br><span class="line">    docker-latest \</span><br><span class="line">    docker-latest-logrotate \</span><br><span class="line">    docker-logrotate \</span><br><span class="line">    docker-engine</span><br></pre></td></tr></table></figure>

<h3 id="安装Docker-Engine-Community"><a href="#安装Docker-Engine-Community" class="headerlink" title="安装Docker Engine-Community"></a>安装Docker Engine-Community</h3><h4 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h4><p>在安装Docker Engine-Community之前，需要先设置Docker仓库。你可以使用官方源，也可以选择国内的镜像源，如阿里云或清华大学源。</p>
<p>安装必要的软件包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>

<p>使用以下命令设置稳定的仓库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>或者选择国内的镜像源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<h4 id="安装Docker-Engine-Community-1"><a href="#安装Docker-Engine-Community-1" class="headerlink" title="安装Docker Engine-Community"></a>安装Docker Engine-Community</h4><p>安装最新版本的Docker Engine-Community和containerd：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure>

<p>如果你需要安装特定版本的Docker，可以通过以下步骤操作：</p>
<ol>
<li>列出并排序你仓库中可用的版本：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | <span class="built_in">sort</span> -r</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>通过其完整的软件包名称安装特定版本：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure>

<h3 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h3><p>安装完成后，启动Docker服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<h3 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h3><p>通过运行hello-world镜像来验证是否正确安装了Docker Engine-Community：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>

<p>如果看到“Hello from Docker!”这样的输出，那么恭喜你，Docker已经成功安装并可以正常工作了。</p>
<h2 id="卸载Docker"><a href="#卸载Docker" class="headerlink" title="卸载Docker"></a>卸载Docker</h2><p>如果你需要卸载Docker，可以执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove docker-ce</span><br></pre></td></tr></table></figure>

<p>删除镜像、容器、配置文件等内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf /var/lib/docker</span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上就是在CentOS系统上安装Docker的详细步骤。无论你选择自动安装还是手动安装，都可以根据这些步骤来操作。安装Docker后，你将能够轻松地在容器中运行和部署应用，提高开发和部署的效率。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker基本使用</title>
    <url>/blog/2024/02/16/Docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Docker基本使用"><a href="#Docker基本使用" class="headerlink" title="Docker基本使用"></a>Docker基本使用</h1><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">更新源</span><br><span class="line">yum update</span><br><span class="line"></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum install -y docker-ce</span><br><span class="line"></span><br><span class="line">docker -v</span><br><span class="line"></span><br><span class="line">配置docker加速</span><br><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://zpthq4nu.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"></span><br><span class="line">cat /etc/docker/daemon.json</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">开启</span><br><span class="line">systemctl <span class="built_in">start</span> docker</span><br><span class="line"></span><br><span class="line">查看状态</span><br><span class="line">systemctl status docker</span><br><span class="line"></span><br><span class="line">关闭</span><br><span class="line">systemctl stop docker</span><br><span class="line"></span><br><span class="line">重启</span><br><span class="line">restart docker</span><br><span class="line"></span><br><span class="line">开机自启</span><br><span class="line">systemctl enable docker</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">查看镜像</span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line">搜索镜像</span><br><span class="line">docker search redis</span><br><span class="line"></span><br><span class="line">下载最后版本的镜像</span><br><span class="line">docker pull redis</span><br><span class="line"></span><br><span class="line">查找就像版本网址</span><br><span class="line">--hub.docker.com</span><br><span class="line"></span><br><span class="line">下载指定版本镜像</span><br><span class="line">docker pull redis:<span class="number">5</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line">删除指定镜像</span><br><span class="line">docker rmi id</span><br><span class="line"></span><br><span class="line">删除指定版本镜像</span><br><span class="line">docker rmi redis:<span class="number">5</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line">查看所有id</span><br><span class="line">docker images -q</span><br><span class="line"></span><br><span class="line">删除所有镜像</span><br><span class="line">docker rmi `docker images -q`</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">创建容器 前台运行</span><br><span class="line">docker run -it --name=c1 centos:<span class="number">7</span> /bin/bash</span><br><span class="line"></span><br><span class="line">退出</span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line">查看正在运行的容器</span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">查看容器</span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line">创建容器 后台运行</span><br><span class="line">docker run -id --name=c2 centos:<span class="number">7</span></span><br><span class="line"></span><br><span class="line">进入容器</span><br><span class="line">docker exec -it c2 /bin/bash</span><br><span class="line"></span><br><span class="line">删除容器</span><br><span class="line">docker rm c1</span><br><span class="line"></span><br><span class="line">查看所有容器</span><br><span class="line">docker ps -aq</span><br><span class="line"></span><br><span class="line">删除所有容器</span><br><span class="line">docker rm `docker ps -aq`</span><br><span class="line"></span><br><span class="line">查看容器信息</span><br><span class="line">docker inspect c1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">将 /root/data 绑定到容器 /root/data_container</span><br><span class="line">docker run -it --name=c3 -v /root/data:/root/data_container centos:<span class="number">7</span> /bin/bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言开发实战：使用EasyX在Visual Studio 2022中创建井字棋游戏</title>
    <url>/blog/2024/04/07/C%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BD%BF%E7%94%A8EasyX%E5%9C%A8Visual-Studio-2022%E4%B8%AD%E5%88%9B%E5%BB%BA%E4%BA%95%E5%AD%97%E6%A3%8B%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<h1 id="C语言开发实战：使用EasyX在Visual-Studio-2022中创建井字棋游戏"><a href="#C语言开发实战：使用EasyX在Visual-Studio-2022中创建井字棋游戏" class="headerlink" title="C语言开发实战：使用EasyX在Visual Studio 2022中创建井字棋游戏"></a>C语言开发实战：使用EasyX在Visual Studio 2022中创建井字棋游戏</h1><p>在本文中，我们将学习如何使用Visual Studio 2022和EasyX图形库来开发一个简单的井字棋游戏。EasyX是一个开源的图形库，它简化了Windows平台下的图形编程，使得开发者能够更快速地创建图形界面。</p>
<h2 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h2><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>首先，确保你已经安装了Visual Studio 2022。接下来，你需要下载并安装EasyX图形库。</p>
<ol>
<li>访问EasyX的官方网站或GitHub页面下载最新版本的EasyX。</li>
<li>将EasyX的库文件解压到你的项目目录中。</li>
<li>在Visual Studio中创建一个新的C++项目，并配置项目以包含EasyX的头文件和库文件。</li>
</ol>
<h2 id="游戏逻辑实现"><a href="#游戏逻辑实现" class="headerlink" title="游戏逻辑实现"></a>游戏逻辑实现</h2><h3 id="初始化游戏板"><a href="#初始化游戏板" class="headerlink" title="初始化游戏板"></a>初始化游戏板</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> board_data[<span class="number">3</span>][<span class="number">3</span>] = &#123;</span><br><span class="line">    &#123;<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;-&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;-&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;-&#x27;</span>&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这是一个3x3的字符数组，用来表示游戏板的状态。<code>&#39;-&#39;</code>表示空格，<code>&#39;O&#39;</code>和<code>&#39;X&#39;</code>表示玩家的棋子。</p>
<h3 id="检查胜利条件"><a href="#检查胜利条件" class="headerlink" title="检查胜利条件"></a>检查胜利条件</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CheckWin</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 检查所有可能的获胜行、列和对角线</span></span><br><span class="line">    <span class="comment">// 如果找到连续三个相同的字符，返回true</span></span><br><span class="line">    	<span class="keyword">if</span> (board_data[<span class="number">0</span>][<span class="number">0</span>] == c &amp;&amp; board_data[<span class="number">0</span>][<span class="number">1</span>] == c &amp;&amp; board_data[<span class="number">0</span>][<span class="number">2</span>] == c) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span> (board_data[<span class="number">1</span>][<span class="number">0</span>] == c &amp;&amp; board_data[<span class="number">1</span>][<span class="number">1</span>] == c &amp;&amp; board_data[<span class="number">1</span>][<span class="number">2</span>] == c) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span> (board_data[<span class="number">2</span>][<span class="number">0</span>] == c &amp;&amp; board_data[<span class="number">2</span>][<span class="number">1</span>] == c &amp;&amp; board_data[<span class="number">2</span>][<span class="number">2</span>] == c) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span> (board_data[<span class="number">0</span>][<span class="number">0</span>] == c &amp;&amp; board_data[<span class="number">1</span>][<span class="number">0</span>] == c &amp;&amp; board_data[<span class="number">2</span>][<span class="number">0</span>] == c) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span> (board_data[<span class="number">0</span>][<span class="number">1</span>] == c &amp;&amp; board_data[<span class="number">1</span>][<span class="number">1</span>] == c &amp;&amp; board_data[<span class="number">2</span>][<span class="number">1</span>] == c) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span> (board_data[<span class="number">0</span>][<span class="number">2</span>] == c &amp;&amp; board_data[<span class="number">1</span>][<span class="number">2</span>] == c &amp;&amp; board_data[<span class="number">2</span>][<span class="number">2</span>] == c) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span> (board_data[<span class="number">0</span>][<span class="number">0</span>] == c &amp;&amp; board_data[<span class="number">1</span>][<span class="number">1</span>] == c &amp;&amp; board_data[<span class="number">2</span>][<span class="number">2</span>] == c) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span> (board_data[<span class="number">0</span>][<span class="number">2</span>] == c &amp;&amp; board_data[<span class="number">1</span>][<span class="number">1</span>] == c &amp;&amp; board_data[<span class="number">2</span>][<span class="number">0</span>] == c) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个函数会检查游戏板上是否有玩家获胜。</p>
<h3 id="检查平局"><a href="#检查平局" class="headerlink" title="检查平局"></a>检查平局</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CheckDraw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 检查游戏板上是否有空格</span></span><br><span class="line">    <span class="comment">// 如果所有位置都被填满，返回true，表示平局</span></span><br><span class="line">    	<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (board_data[i][j] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个函数会检查游戏是否平局。</p>
<h3 id="绘制游戏板"><a href="#绘制游戏板" class="headerlink" title="绘制游戏板"></a>绘制游戏板</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">DrawBoard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用EasyX的绘图函数绘制游戏板的边框</span></span><br><span class="line">    <span class="built_in">line</span>(<span class="number">0</span>, <span class="number">200</span>, <span class="number">600</span>, <span class="number">200</span>);</span><br><span class="line">	<span class="built_in">line</span>(<span class="number">0</span>, <span class="number">400</span>, <span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line">	<span class="built_in">line</span>(<span class="number">200</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">600</span>);</span><br><span class="line">	<span class="built_in">line</span>(<span class="number">400</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">600</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个函数负责绘制游戏板的边框。</p>
<h3 id="绘制棋子"><a href="#绘制棋子" class="headerlink" title="绘制棋子"></a>绘制棋子</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">DrawPiece</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 根据游戏板的状态，绘制&#x27;O&#x27;或&#x27;X&#x27;棋子</span></span><br><span class="line">    	<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">switch</span> (board_data[i][j])</span><br><span class="line">			&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;O&#x27;</span>:</span><br><span class="line">				<span class="built_in">circle</span>(<span class="number">200</span> * j + <span class="number">100</span>, <span class="number">200</span> * i + <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;X&#x27;</span>:</span><br><span class="line">				<span class="built_in">line</span>(<span class="number">200</span> * j, <span class="number">200</span> * i, <span class="number">200</span> * (j + <span class="number">1</span>), <span class="number">200</span> * (i + <span class="number">1</span>));</span><br><span class="line">				<span class="built_in">line</span>(<span class="number">200</span> * (j + <span class="number">1</span>), <span class="number">200</span> * i, <span class="number">200</span> * j, <span class="number">200</span> * (i + <span class="number">1</span>));</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个函数会根据游戏板的状态绘制棋子。</p>
<h3 id="绘制提示文本"><a href="#绘制提示文本" class="headerlink" title="绘制提示文本"></a>绘制提示文本</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">DrawTipText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 显示当前轮到哪一位玩家下棋</span></span><br><span class="line">    	<span class="type">static</span> TCHAR str[<span class="number">64</span>];</span><br><span class="line">	_stprintf_s(str, _T(<span class="string">&quot;当前棋子类型为：%c&quot;</span>), current_piece);</span><br><span class="line">	<span class="built_in">settextcolor</span>(<span class="built_in">RGB</span>(<span class="number">225</span>, <span class="number">175</span>, <span class="number">45</span>));</span><br><span class="line">	<span class="built_in">outtextxy</span>(<span class="number">0</span>, <span class="number">0</span>, str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个函数会在屏幕上显示提示信息，告诉玩家当前轮到谁下棋。</p>
<h3 id="游戏主循环"><a href="#游戏主循环" class="headerlink" title="游戏主循环"></a>游戏主循环</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化图形界面</span></span><br><span class="line">    <span class="built_in">initgraph</span>(<span class="number">600</span>, <span class="number">600</span>);</span><br><span class="line">    <span class="comment">// 游戏循环</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 处理鼠标点击事件</span></span><br><span class="line">        <span class="comment">// 绘制游戏板和棋子</span></span><br><span class="line">        <span class="comment">// 检查游戏结束条件</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>游戏的主循环负责处理用户输入、更新游戏状态、绘制游戏界面，并检查游戏是否结束。</p>
<h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;graphics.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> board_data[<span class="number">3</span>][<span class="number">3</span>] = &#123;</span><br><span class="line">	&#123;<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;-&#x27;</span>&#125;,</span><br><span class="line">	&#123;<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;-&#x27;</span>&#125;,</span><br><span class="line">	&#123;<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;-&#x27;</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> current_piece = <span class="string">&#x27;O&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">CheckWin</span><span class="params">(<span class="type">char</span> c)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (board_data[<span class="number">0</span>][<span class="number">0</span>] == c &amp;&amp; board_data[<span class="number">0</span>][<span class="number">1</span>] == c &amp;&amp; board_data[<span class="number">0</span>][<span class="number">2</span>] == c) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span> (board_data[<span class="number">1</span>][<span class="number">0</span>] == c &amp;&amp; board_data[<span class="number">1</span>][<span class="number">1</span>] == c &amp;&amp; board_data[<span class="number">1</span>][<span class="number">2</span>] == c) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span> (board_data[<span class="number">2</span>][<span class="number">0</span>] == c &amp;&amp; board_data[<span class="number">2</span>][<span class="number">1</span>] == c &amp;&amp; board_data[<span class="number">2</span>][<span class="number">2</span>] == c) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span> (board_data[<span class="number">0</span>][<span class="number">0</span>] == c &amp;&amp; board_data[<span class="number">1</span>][<span class="number">0</span>] == c &amp;&amp; board_data[<span class="number">2</span>][<span class="number">0</span>] == c) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span> (board_data[<span class="number">0</span>][<span class="number">1</span>] == c &amp;&amp; board_data[<span class="number">1</span>][<span class="number">1</span>] == c &amp;&amp; board_data[<span class="number">2</span>][<span class="number">1</span>] == c) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span> (board_data[<span class="number">0</span>][<span class="number">2</span>] == c &amp;&amp; board_data[<span class="number">1</span>][<span class="number">2</span>] == c &amp;&amp; board_data[<span class="number">2</span>][<span class="number">2</span>] == c) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span> (board_data[<span class="number">0</span>][<span class="number">0</span>] == c &amp;&amp; board_data[<span class="number">1</span>][<span class="number">1</span>] == c &amp;&amp; board_data[<span class="number">2</span>][<span class="number">2</span>] == c) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span> (board_data[<span class="number">0</span>][<span class="number">2</span>] == c &amp;&amp; board_data[<span class="number">1</span>][<span class="number">1</span>] == c &amp;&amp; board_data[<span class="number">2</span>][<span class="number">0</span>] == c) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">CheckDraw</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (board_data[i][j] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DrawBoard</span><span class="params">()</span> &#123;</span><br><span class="line">	line(<span class="number">0</span>, <span class="number">200</span>, <span class="number">600</span>, <span class="number">200</span>);</span><br><span class="line">	line(<span class="number">0</span>, <span class="number">400</span>, <span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line">	line(<span class="number">200</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">600</span>);</span><br><span class="line">	line(<span class="number">400</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">600</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DrawPiece</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">switch</span> (board_data[i][j])</span><br><span class="line">			&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;O&#x27;</span>:</span><br><span class="line">				circle(<span class="number">200</span> * j + <span class="number">100</span>, <span class="number">200</span> * i + <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;X&#x27;</span>:</span><br><span class="line">				line(<span class="number">200</span> * j, <span class="number">200</span> * i, <span class="number">200</span> * (j + <span class="number">1</span>), <span class="number">200</span> * (i + <span class="number">1</span>));</span><br><span class="line">				line(<span class="number">200</span> * (j + <span class="number">1</span>), <span class="number">200</span> * i, <span class="number">200</span> * j, <span class="number">200</span> * (i + <span class="number">1</span>));</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DrawTipText</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">static</span> TCHAR str[<span class="number">64</span>];</span><br><span class="line">	_stprintf_s(str, _T(<span class="string">&quot;当前棋子类型为：%c&quot;</span>), current_piece);</span><br><span class="line">	settextcolor(RGB(<span class="number">225</span>, <span class="number">175</span>, <span class="number">45</span>));</span><br><span class="line">	outtextxy(<span class="number">0</span>, <span class="number">0</span>, str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	initgraph(<span class="number">600</span>, <span class="number">600</span>);</span><br><span class="line">	<span class="type">bool</span> runing = <span class="literal">true</span>;</span><br><span class="line">	ExMessage msg;</span><br><span class="line">	BeginBatchDraw();</span><br><span class="line">	<span class="keyword">while</span> (runing)</span><br><span class="line">	&#123;</span><br><span class="line">		DWORD start_time = GetTickCount();</span><br><span class="line">		<span class="keyword">while</span> (peekmessage(&amp;msg))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (msg.message == WM_LBUTTONDOWN)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="type">int</span> x = msg.x;</span><br><span class="line">				<span class="type">int</span> y = msg.y;</span><br><span class="line">				<span class="type">int</span> index_x = x / <span class="number">200</span>;</span><br><span class="line">				<span class="type">int</span> index_y = y / <span class="number">200</span>;</span><br><span class="line">				<span class="keyword">if</span> (board_data[index_y][index_x] == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					board_data[index_y][index_x] = current_piece;</span><br><span class="line">					<span class="keyword">if</span> (current_piece == <span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						current_piece = <span class="string">&#x27;O&#x27;</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> &#123;</span><br><span class="line">						current_piece = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		cleardevice();</span><br><span class="line">		DrawBoard();</span><br><span class="line">		DrawPiece();</span><br><span class="line">		DrawTipText();</span><br><span class="line">		FlushBatchDraw();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (CheckWin(<span class="string">&#x27;X&#x27;</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			MessageBox(GetHWnd(), _T(<span class="string">&quot;玩家X获胜&quot;</span>), _T(<span class="string">&quot;游戏结束&quot;</span>), MB_OK);</span><br><span class="line">			runing = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (CheckWin(<span class="string">&#x27;O&#x27;</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			MessageBox(GetHWnd(), _T(<span class="string">&quot;玩家O获胜&quot;</span>), _T(<span class="string">&quot;游戏结束&quot;</span>), MB_OK);</span><br><span class="line">			runing = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (CheckDraw())</span><br><span class="line">		&#123;</span><br><span class="line">			MessageBox(GetHWnd(), _T(<span class="string">&quot;平局&quot;</span>), _T(<span class="string">&quot;游戏结束&quot;</span>), MB_OK);</span><br><span class="line">			runing = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		DWORD end_time = GetTickCount();</span><br><span class="line">		DWORD delta_time = end_time - start_time;</span><br><span class="line">		<span class="keyword">if</span> (delta_time &lt; <span class="number">1000</span> / <span class="number">60</span>) &#123;</span><br><span class="line">			Sleep(<span class="number">1000</span> / <span class="number">60</span> - delta_time);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	EndBatchDraw();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过上述步骤，我们成功地使用Visual Studio 2022和EasyX开发了一个简单的井字棋游戏。这个教程展示了如何设置游戏环境、实现游戏逻辑、处理用户输入以及绘制游戏界面。现在，你可以在此基础上添加更多功能，如AI对手、网络对战等，来丰富你的游戏。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript核心概念与现代JavaScript特性全解析</title>
    <url>/blog/2024/03/20/ECMAScript%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E4%B8%8E%E7%8E%B0%E4%BB%A3JavaScript%E7%89%B9%E6%80%A7%E5%85%A8%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="ECMAScript核心概念与现代JavaScript特性全解析"><a href="#ECMAScript核心概念与现代JavaScript特性全解析" class="headerlink" title="ECMAScript核心概念与现代JavaScript特性全解析"></a>ECMAScript核心概念与现代JavaScript特性全解析</h1><p>ECMAScript（通常简称为 ES）是JavaScript的标准化规范，由Ecma International的TC39（技术委员会39）组织维护。ECMAScript定义了脚本语言的语法和行为，而JavaScript是ECMAScript规范的一种实现。以下是ECMAScript的一些核心语法特性：</p>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="1-变量声明"><a href="#1-变量声明" class="headerlink" title="1. 变量声明"></a>1. 变量声明</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>; <span class="comment">// 块级作用域的变量声明</span></span><br><span class="line"><span class="keyword">const</span> y = <span class="number">20</span>; <span class="comment">// 常量声明，不可重新赋值</span></span><br></pre></td></tr></table></figure>

<h3 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2. 数据类型"></a>2. 数据类型</h3><p>ECMAScript支持多种数据类型，包括：</p>
<ul>
<li>原始数据类型：字符串（String）、数字（Number）、布尔值（Boolean）、空值（null）、未定义（undefined）、符号（Symbol）</li>
<li>复合数据类型：对象（Object）、数组（Array）、函数（Function）</li>
</ul>
<h3 id="3-函数"><a href="#3-函数" class="headerlink" title="3. 函数"></a>3. 函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">greet</span> = (<span class="params">name</span>) =&gt; <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-条件语句"><a href="#4-条件语句" class="headerlink" title="4. 条件语句"></a>4. 条件语句</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">  <span class="comment">// 代码块</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 另一个代码块</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件（三元）运算符</span></span><br><span class="line"><span class="keyword">const</span> result = condition ? expression1 : expression2;</span><br></pre></td></tr></table></figure>

<h3 id="5-循环"><a href="#5-循环" class="headerlink" title="5. 循环"></a>5. 循环</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">  <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="comment">// 循环体</span></span><br><span class="line">&#125; <span class="keyword">while</span> (condition);</span><br></pre></td></tr></table></figure>

<h3 id="6-数组"><a href="#6-数组" class="headerlink" title="6. 数组"></a>6. 数组</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">&#x27;Apple&#x27;</span>, <span class="string">&#x27;Banana&#x27;</span>, <span class="string">&#x27;Cherry&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问数组元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits[<span class="number">0</span>]); <span class="comment">// Apple</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改数组元素</span></span><br><span class="line">fruits[<span class="number">1</span>] = <span class="string">&#x27;Blueberry&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="7-对象"><a href="#7-对象" class="headerlink" title="7. 对象"></a>7. 对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="attr">greet</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问对象属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// Alice</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用对象方法</span></span><br><span class="line">person.<span class="title function_">greet</span>();</span><br></pre></td></tr></table></figure>

<h3 id="8-类（ES6-）"><a href="#8-类（ES6-）" class="headerlink" title="8. 类（ES6+）"></a>8. 类（ES6+）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> alice = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Alice&#x27;</span>, <span class="number">25</span>);</span><br><span class="line">alice.<span class="title function_">greet</span>();</span><br></pre></td></tr></table></figure>

<h3 id="9-模板字符串"><a href="#9-模板字符串" class="headerlink" title="9. 模板字符串"></a>9. 模板字符串</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Alice&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> greeting = <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeting); <span class="comment">// Hello, Alice!</span></span><br></pre></td></tr></table></figure>

<h3 id="10-解构赋值"><a href="#10-解构赋值" class="headerlink" title="10. 解构赋值"></a>10. 解构赋值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b] = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; name, age &#125; = &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// Alice</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 25</span></span><br></pre></td></tr></table></figure>

<h3 id="11-异步编程（Promise和async-await）"><a href="#11-异步编程（Promise和async-await）" class="headerlink" title="11. 异步编程（Promise和async&#x2F;await）"></a>11. 异步编程（Promise和async&#x2F;await）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fetchData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;Data fetched&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(error));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用async/await</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchDataAsync</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetchData</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchDataAsync</span>();</span><br></pre></td></tr></table></figure>

<p>这些是ECMAScript语法的一些基本元素。随着ECMAScript规范的不断发展，新的语法和特性不断被添加到JavaScript中，例如模块导入（import&#x2F;export）、集合（Set和Map）、异步迭代器（async iterable）等。</p>
<h2 id="高级教程"><a href="#高级教程" class="headerlink" title="高级教程"></a>高级教程</h2><h3 id="12-模块导入（import-export）"><a href="#12-模块导入（import-export）" class="headerlink" title="12. 模块导入（import&#x2F;export）"></a>12. 模块导入（import&#x2F;export）</h3><p>在ECMAScript 6之前，JavaScript缺乏官方的模块系统。随着ES6的引入，<code>import</code>和<code>export</code>关键字使得模块化编程成为可能。模块化允许开发者将代码分割成独立的、可重用的单元，每个模块可以独立维护和更新。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出单个值</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> myConstant = <span class="string">&#x27;Hello, World!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出多个值</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">myFunction</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; myFunction &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出默认值</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> myFunction;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; myConstant, myFunction &#125; <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> myDefaultFunction <span class="keyword">from</span> <span class="string">&#x27;./defaultModule.js&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="13-集合（Set和Map）"><a href="#13-集合（Set和Map）" class="headerlink" title="13. 集合（Set和Map）"></a>13. 集合（Set和Map）</h3><p><code>Set</code>和<code>Map</code>是ES6中引入的两种新的数据结构，它们提供了不同于数组和对象的数据存储方式。</p>
<ul>
<li><code>Set</code>是一个集合，它只存储唯一的值（不允许重复）。</li>
<li><code>Map</code>是一个键值对的集合，其中的键可以是任何类型，包括函数、对象或任何原始类型。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用Set</span></span><br><span class="line"><span class="keyword">const</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet.<span class="property">size</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Map</span></span><br><span class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">myMap.<span class="title function_">set</span>(<span class="string">&#x27;key1&#x27;</span>, <span class="string">&#x27;value1&#x27;</span>);</span><br><span class="line">myMap.<span class="title function_">set</span>(<span class="string">&#x27;key2&#x27;</span>, <span class="string">&#x27;value2&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMap.<span class="title function_">get</span>(<span class="string">&#x27;key1&#x27;</span>)); <span class="comment">// &#x27;value1&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="14-异步迭代器（async-iterable）"><a href="#14-异步迭代器（async-iterable）" class="headerlink" title="14. 异步迭代器（async iterable）"></a>14. 异步迭代器（async iterable）</h3><p>ECMAScript 8引入了异步迭代器的概念，它允许开发者在<code>for...of</code>循环中处理异步操作，如异步请求数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span>* <span class="title function_">asyncGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> value <span class="keyword">of</span> <span class="title function_">asyncGenerator</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 依次打印 1, 2, 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>asyncGenerator</code>是一个异步生成器函数，它可以异步地产生值。<code>for await...of</code>循环使得我们可以等待每个异步操作完成后再进行下一次迭代。</p>
<h3 id="15-其他高级特性"><a href="#15-其他高级特性" class="headerlink" title="15. 其他高级特性"></a>15. 其他高级特性</h3><p>除了上述特性，ECMAScript还包括其他一些高级特性，如：</p>
<ul>
<li><strong>默认参数值</strong>：允许在函数定义时为参数指定默认值。</li>
<li><strong>rest参数</strong>：允许我们将不定数量的参数表示为一个数组。</li>
<li><strong>spread操作符</strong>：用于将数组或可迭代对象的元素展开。</li>
<li><strong>类（Class）</strong>：提供了一种新的语法糖，使得对象原型的写法更加清晰和易于理解。</li>
<li><strong>模块顶级等待（Top-level await）</strong>：在ES12中引入，允许在模块的顶层使用<code>await</code>，这有助于处理动态导入。</li>
</ul>
<p>这些特性共同推动了JavaScript语言的发展，使其在构建大型、复杂的应用程序方面变得更加强大和灵活。</p>
<p><strong>如果对你有帮助，点赞、收藏、关注是我更新的动力！👋🌟🚀</strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Element-Plus 实现动态渲染图标教程</title>
    <url>/blog/2024/03/27/Element-Plus-%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E6%B8%B2%E6%9F%93%E5%9B%BE%E6%A0%87%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Element-Plus-实现动态渲染图标教程"><a href="#Element-Plus-实现动态渲染图标教程" class="headerlink" title="Element-Plus 实现动态渲染图标教程"></a>Element-Plus 实现动态渲染图标教程</h1><p>Element-Plus 是 Element UI 的 Vue 3 版本，它提供了一套完整的组件库，用于快速构建企业级的后台产品。在 Element-Plus 中，我们可以使用 <code>&lt;component&gt;</code> 标签来动态渲染组件，这使得在菜单中根据条件动态显示不同的图标成为可能。本文将介绍如何使用 Element-Plus 和 Vue.js 来实现动态渲染图标的功能。</p>
<h2 id="Element-Plus-简介"><a href="#Element-Plus-简介" class="headerlink" title="Element-Plus 简介"></a>Element-Plus 简介</h2><p>Element-Plus 是基于 Vue 3 的组件库，它继承了 Element UI 的设计思想和组件结构，同时充分利用了 Vue 3 的新特性，如 Composition API，以提供更加灵活和强大的组件使用体验。Element-Plus 支持自定义主题，提供了丰富的文档和示例，使得开发者能够快速上手并构建高质量的用户界面。</p>
<h2 id="Vue-js-简介"><a href="#Vue-js-简介" class="headerlink" title="Vue.js 简介"></a>Vue.js 简介</h2><p>Vue.js 是一个渐进式的 JavaScript 框架，用于构建用户界面。Vue 的核心库只关注视图层，易于上手，同时也能够配合其他库或现有项目使用。Vue 的响应式数据绑定和虚拟 DOM 技术使得状态管理和视图更新变得简单高效。</p>
<h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="1-安装-Element-Plus"><a href="#1-安装-Element-Plus" class="headerlink" title="1. 安装 Element-Plus"></a>1. 安装 Element-Plus</h3><p>首先，确保你的项目已经安装了 Vue 3，然后通过 npm 或 yarn 安装 Element-Plus：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install element-plus --save</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">yarn add element-plus</span><br></pre></td></tr></table></figure>

<h3 id="2-引入-Element-Plus"><a href="#2-引入-Element-Plus" class="headerlink" title="2. 引入 Element-Plus"></a>2. 引入 Element-Plus</h3><p>在你的主文件（通常是 <code>main.js</code> 或 <code>main.ts</code>）中引入 Element-Plus 并注册为全局可用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createApp&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;createPinia&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/dist/index.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dayjs/locale/zh-cn&#x27;</span></span><br><span class="line"><span class="keyword">import</span> zhCn <span class="keyword">from</span> <span class="string">&#x27;element-plus/dist/locale/zh-cn.mjs&#x27;</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>, &#123;<span class="attr">locale</span>: zhCn&#125;)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">createPinia</span>())</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-安装导入图标组件"><a href="#3-安装导入图标组件" class="headerlink" title="3. 安装导入图标组件"></a>3. 安装导入图标组件</h3><p>在你的项目中定义 SVG 图标组件，例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择一个你喜欢的包管理器</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">NPM</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install @element-plus/icons-vue</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Yarn</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yarn add @element-plus/icons-vue</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pnpm</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pnpm install @element-plus/icons-vue</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">ElementPlusIconsVue</span> <span class="keyword">from</span> <span class="string">&#x27;@element-plus/icons-vue&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, component] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(<span class="title class_">ElementPlusIconsVue</span>)) &#123;</span><br><span class="line">    app.<span class="title function_">component</span>(key, component)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-使用动态渲染图标"><a href="#4-使用动态渲染图标" class="headerlink" title="4. 使用动态渲染图标"></a>4. 使用动态渲染图标</h3><p>在你的 Vue 组件中使用 Element-Plus 提供的 <code>&lt;el-sub-menu&gt;</code> 组件来创建下拉菜单，并使用 <code>&lt;component&gt;</code> 标签来动态渲染图标。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--  item.id+&#x27;&#x27; 解决Invalid prop: type check failed for prop &quot;index&quot;. Expected String with value &quot;1&quot;, got Number with value 1.   --&gt;</span><br><span class="line">&lt;el-sub-menu v-for=&quot;(item,index) in menuAsc&quot; :index=&quot;item.id+&#x27;&#x27;&quot;&gt;</span><br><span class="line">  &lt;template #title&gt;</span><br><span class="line">    &lt;!--    关键代码    --&gt;</span><br><span class="line">    &lt;component class=&quot;icons&quot; :is=&quot;item.icon&quot;&gt;&lt;/component&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123; item.name &#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  &lt;el-menu-item v-for=&quot;(i,num) in menuAsc[index].children&quot; :index=&quot;menuAsc[index].children[num].id+&#x27;&#x27;&quot;</span><br><span class="line">                @click=&quot;routerTo(i)&quot;&gt;</span><br><span class="line">    &#123;&#123; i.name &#125;&#125;</span><br><span class="line">  &lt;/el-menu-item&gt;</span><br><span class="line">&lt;/el-sub-menu&gt;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>menuAsc</code> 是一个数组，包含了菜单项和它们的子菜单。每个菜单项都有一个 <code>icon</code> 属性，该属性是一个组件的名称，用于指定要渲染的图标。<code>&lt;component&gt;</code> 标签的 <code>:is</code> 属性用于动态绑定组件名称，从而实现根据条件渲染不同的图标。</p>
<h3 id="5-样式调整"><a href="#5-样式调整" class="headerlink" title="5. 样式调整"></a>5. 样式调整</h3><p>为了确保图标正确显示，我们可以添加一些 CSS 样式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">svg &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过上述步骤，我们成功地在 Element-Plus 的菜单中实现了动态渲染图标的功能。这个实例展示了如何使用 Element-Plus 和 Vue.js 来动态渲染组件，并自定义菜单项的图标。通过学习和实践，你可以更深入地理解 Element-Plus 和 Vue.js 的强大功能，以及如何将它们应用到实际的开发工作中。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Element-Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>Element-Plus下拉菜单边框去除教程</title>
    <url>/blog/2024/03/26/Element-Plus%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95%E8%BE%B9%E6%A1%86%E5%8E%BB%E9%99%A4%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Element-Plus下拉菜单边框去除教程"><a href="#Element-Plus下拉菜单边框去除教程" class="headerlink" title="Element-Plus下拉菜单边框去除教程"></a>Element-Plus下拉菜单边框去除教程</h1><p>好久没更新关于Vue的内容了，正好记录一下今天开发中遇到的一个小Bug😁😊😊</p>
<blockquote>
<p>去除边框前：</p>
</blockquote>
<blockquote>
<p>去除边框后：</p>
</blockquote>
<p>Element-Plus 是 Element UI 的 Vue 3 版本，它提供了一套完整的组件库，用于快速构建企业级的后台产品。在使用 Element-Plus 进行开发时，我们可能会遇到需要自定义组件样式的情况，比如去除下拉框在聚焦时的默认边框。本文将介绍如何使用 CSS 来去除 Element-Plus 下拉框的边框，并简要介绍 Element-Plus 以及 Vue 的相关概念。</p>
<h2 id="Element-Plus-简介"><a href="#Element-Plus-简介" class="headerlink" title="Element-Plus 简介"></a>Element-Plus 简介</h2><p>Element-Plus 是基于 Vue 3 的组件库，它继承了 Element UI 的设计思想和组件结构，同时充分利用了 Vue 3 的新特性，如 Composition API，以提供更加灵活和强大的组件使用体验。Element-Plus 支持自定义主题，提供了丰富的文档和示例，使得开发者能够快速上手并构建高质量的用户界面。</p>
<h2 id="Vue-js-简介"><a href="#Vue-js-简介" class="headerlink" title="Vue.js 简介"></a>Vue.js 简介</h2><p>Vue.js 是一个渐进式的 JavaScript 框架，用于构建用户界面。Vue 的核心库只关注视图层，易于上手，同时也能够配合其他库或现有项目使用。Vue 的响应式数据绑定和虚拟 DOM 技术使得状态管理和视图更新变得简单高效。</p>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="1-安装-Element-Plus"><a href="#1-安装-Element-Plus" class="headerlink" title="1. 安装 Element-Plus"></a>1. 安装 Element-Plus</h3><p>首先，确保你的项目已经安装了 Vue 3，然后通过 npm 或 yarn 安装 Element-Plus：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install element-plus --save</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">yarn add element-plus</span><br></pre></td></tr></table></figure>

<h3 id="2-引入-Element-Plus"><a href="#2-引入-Element-Plus" class="headerlink" title="2. 引入 Element-Plus"></a>2. 引入 Element-Plus</h3><p>在你的主文件（通常是 <code>main.js</code> 或 <code>main.ts</code>）中引入 Element-Plus 并注册为全局可用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/dist/index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="3-使用-Element-Plus-组件"><a href="#3-使用-Element-Plus-组件" class="headerlink" title="3. 使用 Element-Plus 组件"></a>3. 使用 Element-Plus 组件</h3><p>在你的 Vue 组件中使用 Element-Plus 提供的下拉框（Select）组件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;el-dropdown&gt;</span><br><span class="line">      &lt;el-avatar :size=&quot;45&quot; shape=&quot;square&quot; src=&quot;https://cube.elemecdn.com/0/88/03b0d39583f48206768a7534e55bcpng.png&quot;/&gt;</span><br><span class="line">      &lt;template #dropdown&gt;</span><br><span class="line">        &lt;el-dropdown-menu&gt;</span><br><span class="line">          &lt;el-dropdown-item&gt;个人中心&lt;/el-dropdown-item&gt;</span><br><span class="line">          &lt;el-dropdown-item&gt;修改信息&lt;/el-dropdown-item&gt;</span><br><span class="line">          &lt;el-dropdown-item&gt;安全退出&lt;/el-dropdown-item&gt;</span><br><span class="line">        &lt;/el-dropdown-menu&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/el-dropdown&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      value: &#x27;&#x27;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="4-去除边框样式"><a href="#4-去除边框样式" class="headerlink" title="4. 去除边框样式"></a>4. 去除边框样式</h3><p>为了去除下拉框在聚焦时的边框，我们需要在项目的样式文件中添加 CSS 规则。Vue 3 引入了 <code>:deep()</code> 伪类，它可以用来穿透组件的样式作用域，修改子组件的样式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">deep</span>(.el-tooltip__trigger:focus-visible) &#123;</span><br><span class="line">  <span class="attribute">outline</span>: unset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述样式规则将移除 <code>el-tooltip__trigger</code> 类（通常是下拉框的触发元素）在聚焦时的默认边框。<code>:focus-visible</code> 伪类确保只有在用户通过键盘聚焦元素时才会应用样式，这样鼠标聚焦时的默认样式不会被影响。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过上述步骤，我们成功地去除了 Element-Plus 下拉框在聚焦时的边框样式。这个简单的实例展示了如何在 Vue 3 项目中使用 Element-Plus 组件库，并自定义组件的样式。通过学习和实践，你可以更深入地理解 Vue 和 Element-Plus 的强大功能，以及如何将它们应用到实际的开发工作中。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Element-Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>Git基本使用</title>
    <url>/blog/2024/02/16/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Git-创建仓库"><a href="#Git-创建仓库" class="headerlink" title="Git 创建仓库"></a>Git 创建仓库</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git init newrepo 初始化后，会在 newrepo 目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。</span><br><span class="line">git add \*.p</span><br><span class="line">git add README</span><br><span class="line">git commit -m &#x27;初始化项目版本&#x27;</span><br><span class="line">如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：</span><br></pre></td></tr></table></figure>

<h1 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone "></a>git clone <repo></h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">repo:Git 仓库。</span><br><span class="line">git clone &lt;repo&gt; &lt;directory&gt;</span><br><span class="line">directory:本地目录。</span><br><span class="line">git clone git://github.com/schacon/grit.git</span><br><span class="line">执行该命令后，会在当前目录下创建一个名为 grit 的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录。</span><br><span class="line">git clone git://github.com/schacon/grit.git mygrit</span><br><span class="line">如果要自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字</span><br></pre></td></tr></table></figure>

<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config -e  </span><br><span class="line">针对当前仓库</span><br><span class="line">git config -e --global  </span><br><span class="line">针对系统上所有仓库</span><br><span class="line">git config --global user.name &quot;runoob&quot;</span><br><span class="line">git config --global user.email test@runoob.com</span><br><span class="line">设置提交代码时的用户信息，如果去掉 --global 参数只对当前仓库有效。</span><br></pre></td></tr></table></figure>

<h1 id="一个简单的操作步骤："><a href="#一个简单的操作步骤：" class="headerlink" title="一个简单的操作步骤："></a>一个简单的操作步骤：</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">初始化仓库。</span><br><span class="line">git add .</span><br><span class="line">添加文件到暂存区。</span><br><span class="line">git commit</span><br><span class="line">将暂存区内容添加到仓库中。</span><br></pre></td></tr></table></figure>

<h1 id="创建仓库命令"><a href="#创建仓库命令" class="headerlink" title="创建仓库命令"></a>创建仓库命令</h1><p>git init 初始化仓库<br>git clone 拷贝一份远程仓库，也就是下载一个项目。</p>
<h1 id="提交与修改"><a href="#提交与修改" class="headerlink" title="提交与修改"></a>提交与修改</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add 添加文件到暂存区</span><br><span class="line">git status 查看仓库当前的状态，显示有变更的文件。</span><br><span class="line">git diff 比较文件的不同，即暂存区和工作区的差异。</span><br><span class="line">git commit 提交暂存区到本地仓库。</span><br><span class="line">git reset 回退版本。</span><br><span class="line">git rm 将文件从暂存区和工作区中删除。</span><br><span class="line">git mv 移动或重命名工作区文件。</span><br></pre></td></tr></table></figure>

<h1 id="提交日志"><a href="#提交日志" class="headerlink" title="提交日志"></a>提交日志</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log 查看历史提交记录</span><br><span class="line">git blame &lt;file&gt; 以列表形式查看指定文件的历史修改记录</span><br></pre></td></tr></table></figure>

<h1 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote 查看当前的远程库</span><br><span class="line">git fetch 从远程获取代码库</span><br><span class="line">git pull 下载远程代码并合并</span><br><span class="line">git push 上传远程代码并合并</span><br></pre></td></tr></table></figure>

<h1 id="Git-分支管理"><a href="#Git-分支管理" class="headerlink" title="Git 分支管理"></a>Git 分支管理</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch</span><br><span class="line">没有参数时，git branch 会列出你在本地的分支。</span><br><span class="line">git branch (branchname) 创建分支</span><br><span class="line">git branch -d (branchname) 删除分支</span><br><span class="line">git checkout (branchname) 切换分支</span><br><span class="line">git merge 合并分支</span><br></pre></td></tr></table></figure>

<h1 id="Git-查看提交历史"><a href="#Git-查看提交历史" class="headerlink" title="Git 查看提交历史"></a>Git 查看提交历史</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log 查看历史提交记录。</span><br><span class="line">git log --oneline 查看历史记录的简洁的版本</span><br><span class="line">git log --reverse --oneline 逆向显示所有日志</span><br><span class="line">git log --author=Linus --oneline -5 Git 源码中 Linus 提交的部分。</span><br><span class="line">git log --oneline --before=&#123;3.weeks.ago&#125; --after=&#123;2010-04-18&#125; --no-merges 指定日期、隐藏合并提交</span><br><span class="line">git blame &lt;file&gt; 查看指定文件的历史修改记录。</span><br></pre></td></tr></table></figure>

<h1 id="Git-标签"><a href="#Git-标签" class="headerlink" title="Git 标签"></a>Git 标签</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git tag -a v1.0 创建带注解的标签</span><br><span class="line">git tag 查看所有标签</span><br><span class="line">git tag -a &lt;tagname&gt; -m &quot;com 标签&quot; 指定标签信息</span><br></pre></td></tr></table></figure>


<h1 id="Git-远程仓库"><a href="#Git-远程仓库" class="headerlink" title="Git 远程仓库"></a>Git 远程仓库</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add [shortname] [url] 添加一个新的远程仓库</span><br><span class="line">ssh-keygen -t rsa -C &quot;youremail@example.com&quot; 生成 SSH Key</span><br><span class="line">ssh -T git@github.com 验证是否成功</span><br></pre></td></tr></table></figure>

<h1 id="推送到-GitHub-仓库"><a href="#推送到-GitHub-仓库" class="headerlink" title="推送到 GitHub 仓库"></a>推送到 GitHub 仓库</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir runoob-git-test # 创建测试目录</span><br><span class="line">cd runoob-git-test/ # 进入测试目录</span><br><span class="line">echo &quot;# 菜鸟教程 Git 测试&quot; &gt;&gt; README.md # 创建 README.md 文件并写入内容</span><br><span class="line">ls #查看目录下的文件</span><br><span class="line">git init # 初始化</span><br><span class="line">git add README.md # 添加文件</span><br><span class="line">git commit -m &quot;添加 README.md 文件&quot; # 提交并备注信息</span><br><span class="line"></span><br><span class="line">git remote add origin git@github.com:tianqixin/runoob-git-test.git  </span><br><span class="line">git push -u origin master # 提交到 Github</span><br></pre></td></tr></table></figure>

<h1 id="查看当前的远程库"><a href="#查看当前的远程库" class="headerlink" title="查看当前的远程库"></a>查看当前的远程库</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote 查看当前配置有哪些远程仓库</span><br><span class="line">git remote -v 别名的实际链接地址</span><br></pre></td></tr></table></figure>

<h1 id="提取远程仓库"><a href="#提取远程仓库" class="headerlink" title="提取远程仓库"></a>提取远程仓库</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git fetch 从远程仓库下载新分支与数据</span><br><span class="line">git merge 从远端仓库提取数据并尝试合并到当前分支</span><br></pre></td></tr></table></figure>

<h1 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h1><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;xiaohe&quot;</span><br><span class="line">git config --global user.email &quot;2109664977@qq.com&quot;</span><br></pre></td></tr></table></figure>

<h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;2109664977@qq.com&quot;</span><br><span class="line">ssh-keygen -t ed25519 -C &quot;2109664977@qq.com&quot;</span><br><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure>

<h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add [shortname] [url]</span><br><span class="line">git remote add test https://gitee.com/bestwishes0203/login.git</span><br><span class="line">ssh-keygen -t rsa -C &quot;2109664977@qq.com&quot;</span><br></pre></td></tr></table></figure>

<h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init - 初始化仓库。</span><br><span class="line">git add . - 添加文件到暂存区。</span><br><span class="line">git commit - 将暂存区内容添加到仓库中。</span><br><span class="line">git commit -m &quot;提交说明&quot;</span><br><span class="line">git commit -m &quot;第一次提交&quot;</span><br><span class="line">git pull</span><br><span class="line">git push -u https://gitee.com/bestwishes0203/login.git master</span><br><span class="line">git log</span><br><span class="line">git checkout 版本号</span><br><span class="line">git checkout master</span><br></pre></td></tr></table></figure>

<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch</span><br><span class="line">git branch dev</span><br><span class="line">git checkout dev</span><br></pre></td></tr></table></figure>

<h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;fenzhi&quot;</span><br><span class="line">git checkout master</span><br><span class="line">git pull</span><br><span class="line">git merge dev</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6教程</title>
    <url>/blog/2024/03/11/ES6%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="ES6教程"><a href="#ES6教程" class="headerlink" title="ES6教程"></a>ES6教程</h1><h2 id="一-ES6基础"><a href="#一-ES6基础" class="headerlink" title="一.ES6基础"></a>一.ES6基础</h2><h5 id="1-初识ES6"><a href="#1-初识ES6" class="headerlink" title="1.初识ES6"></a>1.初识ES6</h5><blockquote>
<p>ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p>
</blockquote>
<ul>
<li><p>1997年：ECMAScript 1.0</p>
</li>
<li><p>1998年：ECMAScript 2.0</p>
</li>
<li><p>1999年：ECMAScript 3.0</p>
</li>
<li><p>2006年：ECMAScript 4.0 未通过</p>
</li>
<li><p>2009年：ECMAScript 5.0</p>
</li>
<li><p>2015年：ECMAScript 6.0</p>
</li>
<li><p>至今，版本号改用年号的形式。</p>
</li>
</ul>
<h5 id="2-let声明变量与const声明常量"><a href="#2-let声明变量与const声明常量" class="headerlink" title="2.let声明变量与const声明常量"></a>2.let声明变量与const声明常量</h5><ol>
<li><p><code>let</code> 不允许重复声明变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 var 的时候重复声明变量是没问题的，只不过就是后面会把前面覆盖掉</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">200</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 let 重复声明变量的时候就会报错了</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">200</span> <span class="comment">// 这里就会报错了</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 const 重复声明变量的时候就会报错</span></span><br><span class="line"><span class="keyword">const</span> num = <span class="number">100</span></span><br><span class="line"><span class="keyword">const</span> num = <span class="number">200</span> <span class="comment">// 这里就会报错了</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>let</code> 和 <code>const</code> 声明的变量不会在预解析的时候解析（也就是没有变量提升）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 因为预解析（变量提升）的原因，在前面是有这个变量的，只不过没有赋值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 因为 let 不会进行预解析（变量提升），所以直接报错了</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) </span><br><span class="line"><span class="keyword">let</span> num = <span class="number">100</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 因为 const 不会进行预解析（变量提升），所以直接报错了</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) </span><br><span class="line"><span class="keyword">const</span> num = <span class="number">100</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>let</code> 和 <code>const</code> 声明的变量会被所有代码块限制作用范围</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var 声明的变量只有函数能限制其作用域，其他的不能限制</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 100</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// let 声明的变量，除了函数可以限制，所有的代码块都可以限制其作用域（if/while/for/...）</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">100</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// const 声明的变量，除了函数可以限制，所有的代码块都可以限制其作用域（if/while/for/...）</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> num = <span class="number">100</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p><code>let</code> 和 <code>const</code> 的区别</p>
<ol>
<li><p><code>let</code> 声明的变量的值可以改变，<code>const</code> 声明的变量的值不可以改变</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">100</span></span><br><span class="line">num = <span class="number">200</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 200</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">100</span></span><br><span class="line">num = <span class="number">200</span> <span class="comment">// 这里就会报错了，因为 const 声明的变量值不可以改变（我们也叫做常量）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>let</code> 声明的时候可以不赋值，<code>const</code> 声明的时候必须赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num</span><br><span class="line">num = <span class="number">100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 100</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> num <span class="comment">// 这里就会报错了，因为 const 声明的时候必须赋值</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h5 id="3-解构赋值"><a href="#3-解构赋值" class="headerlink" title="3.解构赋值"></a>3.解构赋值</h5><ul>
<li>解构赋值，就是快速的从对象或者数组中取出成员的一个语法方式</li>
</ul>
<h6 id="3-1-解构对象"><a href="#3-1-解构对象" class="headerlink" title="3-1 解构对象"></a>3-1 解构对象</h6><ul>
<li><p>快速的从对象中获取成员</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 的方法向得到对象中的成员</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kerwin&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = obj.<span class="property">name</span></span><br><span class="line"><span class="keyword">let</span> age = obj.<span class="property">age</span></span><br><span class="line"><span class="keyword">let</span> gender = obj.<span class="property">gender</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解构赋值的方式从对象中获取成员</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kerwin&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前面的 &#123;&#125; 表示我要从 obj 这个对象中获取成员了</span></span><br><span class="line"><span class="comment">// name age gender 都得是 obj 中有的成员</span></span><br><span class="line"><span class="comment">// obj 必须是一个对象</span></span><br><span class="line"><span class="keyword">let</span> &#123; name, age, gender &#125; = obj</span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="3-2-解构数组"><a href="#3-2-解构数组" class="headerlink" title="3-2 解构数组"></a>3-2 解构数组</h6><ul>
<li><p>快速的从数组中获取成员</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 的方式从数组中获取成员</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;kerwin&#x27;</span>, <span class="string">&#x27;tiechui&#x27;</span>, <span class="string">&#x27;gangdan&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> a = arr[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">let</span> b = arr[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">let</span> c = arr[<span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用解构赋值的方式从数组中获取成员</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;kerwin&#x27;</span>, <span class="string">&#x27;tiechui&#x27;</span>, <span class="string">&#x27;gangdan&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前面的 [] 表示要从 arr 这个数组中获取成员了</span></span><br><span class="line"><span class="comment">// a b c 分别对应这数组中的索引 0 1 2</span></span><br><span class="line"><span class="comment">// arr 必须是一个数组</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = arr</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="4-模版字符串"><a href="#4-模版字符串" class="headerlink" title="4. 模版字符串"></a>4. 模版字符串</h5><ul>
<li><p>ES5 中我们表示字符串的时候使用 <code>&#39;&#39;</code> 或者 <code>&quot;&quot;</code></p>
</li>
<li><p>在 ES6 中，我们还有一个东西可以表示字符串，就是 **&#96;&#96;**（反引号）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`hello world`</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> str) <span class="comment">// string</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>和单引号好友双引号的区别</p>
<ol>
<li><p>反引号可以换行书写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这个单引号或者双引号不能换行，换行就会报错了</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;hello world&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面这个就报错了</span></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&#x27;hello </span></span><br><span class="line"><span class="string">world&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">	hello</span></span><br><span class="line"><span class="string">	world</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">// 是可以使用的</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>反引号可以直接在字符串里面拼接变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 需要字符串拼接变量的时候</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;hello&#x27;</span> + num + <span class="string">&#x27;world&#x27;</span> + num</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">// hello100world100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接写在字符串里面不好使</span></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&#x27;hellonumworldnum&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2) <span class="comment">// hellonumworldnum</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模版字符串拼接变量</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`hello<span class="subst">$&#123;num&#125;</span>world<span class="subst">$&#123;num&#125;</span>`</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">// hello100world100</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在 <strong>&#96;&#96;</strong> 里面的 <code>$&#123;&#125;</code> 就是用来书写变量的位置</li>
</ul>
</li>
</ol>
</li>
</ul>
<h5 id="5-字符串扩展"><a href="#5-字符串扩展" class="headerlink" title="5.字符串扩展"></a>5.字符串扩展</h5><h6 id="5-1-includes函数"><a href="#5-1-includes函数" class="headerlink" title="5-1 includes函数"></a>5-1 includes函数</h6><p>判断字符串中是否存在指定字符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myname = <span class="string">&quot;kerwin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myname.<span class="title function_">includes</span>(<span class="string">&quot;e&quot;</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myname.<span class="title function_">startsWith</span>(<span class="string">&quot;k&quot;</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myname.<span class="title function_">endsWith</span>(<span class="string">&quot;n&quot;</span>)) <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h6 id="5-2-repeat函数"><a href="#5-2-repeat函数" class="headerlink" title="5-2 repeat函数"></a>5-2 repeat函数</h6><p>repeat()方法返回一个新字符串,表示将原字符串重复n次。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myname = <span class="string">&quot;kerwin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myname.<span class="title function_">repeat</span>(<span class="number">3</span>)) <span class="comment">//kerwinkerwinkerwin</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myname.<span class="title function_">repeat</span>(<span class="number">0</span>)) <span class="comment">//&quot;&quot; </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myname.<span class="title function_">repeat</span>(<span class="number">3.5</span>)) <span class="comment">//kerwinkerwinkerwin</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myname.<span class="title function_">repeat</span>(<span class="string">&quot;3&quot;</span>))<span class="comment">//kerwinkerwinkerwin</span></span><br></pre></td></tr></table></figure>

<h5 id="6-数值扩展"><a href="#6-数值扩展" class="headerlink" title="6.数值扩展"></a>6.数值扩展</h5><h6 id="6-1-二进制和八进制表示法"><a href="#6-1-二进制和八进制表示法" class="headerlink" title="6-1 二进制和八进制表示法"></a>6-1 二进制和八进制表示法</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> count1 = <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> count2 = <span class="number">0x100</span></span><br><span class="line"><span class="keyword">let</span> count3 = <span class="number">0o100</span></span><br><span class="line"><span class="keyword">let</span> count4 = <span class="number">0b100</span></span><br></pre></td></tr></table></figure>

<h6 id="6-2-isFinite与isNaN方法"><a href="#6-2-isFinite与isNaN方法" class="headerlink" title="6-2 isFinite与isNaN方法"></a>6-2 isFinite与isNaN方法</h6><p>减少全局性方法，使得语言逐步模块化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">100</span>) <span class="comment">//true</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">100</span>/<span class="number">0</span>) <span class="comment">//false</span></span><br><span class="line"><span class="keyword">let</span> num3 = <span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="title class_">Infinity</span>) <span class="comment">// false</span></span><br><span class="line"><span class="keyword">let</span> num4 = <span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="string">&quot;100&quot;</span>) <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="number">100</span>) <span class="comment">// false</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="title class_">NaN</span>) <span class="comment">//true</span></span><br><span class="line"><span class="keyword">let</span> num3 = <span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="string">&quot;kerwin&quot;</span>) <span class="comment">//false</span></span><br><span class="line"><span class="keyword">let</span> num4 = <span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="string">&quot;100&quot;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>



<p>它们与传统的全局方法isFinite()和isNaN()的区别在于，传统方法先调用Number()将非数值的值转为数值，再进行判断，而这两个新方法只对数值有效，Number.isFinite()对于非数值一律返回false, Number.isNaN()只有对于NaN才返回true，非NaN一律返回false。</p>
<h6 id="6-3-isInteger方法"><a href="#6-3-isInteger方法" class="headerlink" title="6-3 isInteger方法"></a>6-3 isInteger方法</h6><p>用来判断一个数值是否为整数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">100</span>) <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">100.0</span>) <span class="comment">//true</span></span><br><span class="line"><span class="keyword">let</span> num3 = <span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="string">&quot;kerwin&quot;</span>) <span class="comment">//false</span></span><br><span class="line"><span class="keyword">let</span> num4 = <span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="string">&quot;100&quot;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h6 id="6-4-极小常量Number-EPSILON"><a href="#6-4-极小常量Number-EPSILON" class="headerlink" title="6-4 极小常量Number.EPSILON"></a>6-4 极小常量Number.EPSILON</h6><p>它表示 1 与大于 1 的最小浮点数之间的差。2.220446049250313e-16</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isEqual</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">abs</span>(a-b)&lt;<span class="title class_">Number</span>.<span class="property">EPSILON</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEqual</span>(<span class="number">0.1</span>+<span class="number">0.2</span>,<span class="number">0.3</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1</span>+<span class="number">0.2</span>===<span class="number">0.3</span>) <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h6 id="6-5-Math-trunc"><a href="#6-5-Math-trunc" class="headerlink" title="6-5 Math.trunc"></a>6-5 Math.trunc</h6><p>将小数部分抹掉,返回一个整数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">trunc</span>(<span class="number">1.2</span>)) <span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">trunc</span>(<span class="number">1.8</span>))<span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">trunc</span>(-<span class="number">1.8</span>)) <span class="comment">//-1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">trunc</span>(-<span class="number">1.2</span>))<span class="comment">//-1</span></span><br></pre></td></tr></table></figure>

<h6 id="6-6-Math-sign"><a href="#6-6-Math-sign" class="headerlink" title="6-6 Math.sign"></a>6-6 Math.sign</h6><p><code>Math.sign</code>方法用来判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">sign</span>(-<span class="number">100</span>) <span class="comment">// -1</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">sign</span>(<span class="number">100</span>) <span class="comment">// +1</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">sign</span>(<span class="number">0</span>) <span class="comment">// +0</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">sign</span>(-<span class="number">0</span>) <span class="comment">// -0</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">sign</span>(<span class="string">&quot;kerwin&quot;</span>) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>

<h5 id="7-数组扩展"><a href="#7-数组扩展" class="headerlink" title="7.数组扩展"></a>7.数组扩展</h5><h6 id="7-1-扩展运算符"><a href="#7-1-扩展运算符" class="headerlink" title="7-1 扩展运算符"></a>7-1 扩展运算符</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...arr1,...arr2])</span><br></pre></td></tr></table></figure>

<h6 id="7-2-Array-from"><a href="#7-2-Array-from" class="headerlink" title="7-2 Array.from"></a>7-2 Array.from</h6><p>将类数组对象转换为真正数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> oli = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;li&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(oli))</span><br></pre></td></tr></table></figure>

<h6 id="7-3-Array-of"><a href="#7-3-Array-of" class="headerlink" title="7-3 Array.of"></a>7-3 Array.of</h6><p>将一组值转化为数组,即新建数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = <span class="title class_">Array</span>(<span class="number">3</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1)<span class="comment">// [,,]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">3</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2)<span class="comment">// [3]</span></span><br></pre></td></tr></table></figure>

<h6 id="7-4-find方法"><a href="#7-4-find方法" class="headerlink" title="7-4. find方法"></a>7-4. find方法</h6><p>1)该方法主要应用于查找第一个符合条件的数组元素 </p>
<p>2)它的参数是一个回调函数。在回调函数中可以写你要查找元素的条件,当条件成立为true时,返回该元素。如果没有符合条件的元素,返回值为undefined </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>]</span><br><span class="line"><span class="keyword">let</span> res1 = arr.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> item&gt;<span class="number">13</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> res2 = arr.<span class="title function_">findIndex</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> item&gt;<span class="number">13</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1) <span class="comment">//14</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2) <span class="comment">//3</span></span><br></pre></td></tr></table></figure>



<h6 id="7-5-fill方法"><a href="#7-5-fill方法" class="headerlink" title="7-5. fill方法"></a>7-5. fill方法</h6><p>使用自己想要的参数替换原数组内容,但是会改变原来的数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">3</span>).<span class="title function_">fill</span>(<span class="string">&quot;kerwin&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].<span class="title function_">fill</span>(<span class="string">&quot;kerwin&quot;</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1)<span class="comment">//[&#x27;kerwin&#x27;, &#x27;kerwin&#x27;, &#x27;kerwin&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2)<span class="comment">// [&#x27;a&#x27;, &#x27;kerwin&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>

<h6 id="7-6-flat与flatMap方法"><a href="#7-6-flat与flatMap方法" class="headerlink" title="7-6 flat与flatMap方法"></a>7-6 flat与flatMap方法</h6><p>按照一个可指定的深度递归遍历数组,并将所有元素与遍历到的子数组中的元素合并为一个新数组返回</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = [&#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">                <span class="attr">list</span>: [<span class="string">&quot;鞍山&quot;</span>, <span class="string">&quot;安庆&quot;</span>, <span class="string">&quot;安阳&quot;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&quot;B&quot;</span>,</span><br><span class="line">                <span class="attr">list</span>: [<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;保定&quot;</span>, <span class="string">&quot;包头&quot;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">flatMap</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">list</span>))</span><br></pre></td></tr></table></figure>



<h5 id="8-对象扩展"><a href="#8-对象扩展" class="headerlink" title="8.对象扩展"></a>8.对象扩展</h5><h6 id="8-1-对象简写"><a href="#8-1-对象简写" class="headerlink" title="8-1 对象简写"></a>8-1 对象简写</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name =<span class="string">&quot;moduleA&quot;</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name,</span><br><span class="line">    <span class="title function_">test1</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">test2</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="8-2-属性名表达式"><a href="#8-2-属性名表达式" class="headerlink" title="8-2 属性名表达式"></a>8-2 属性名表达式</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name =<span class="string">&quot;moduleA&quot;</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name,</span><br><span class="line">    [name+<span class="string">&quot;test1&quot;</span>]()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    [name+<span class="string">&quot;test2&quot;</span>]()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="8-3-Object-assign"><a href="#8-3-Object-assign" class="headerlink" title="8-3 Object.assign"></a>8-3 Object.assign</h6><p>Object.assign(target, object1，object2)的第一个参数是目标对象，后面可以跟一个或多个源对象作为参数。</p>
<p>target：参数合并后存放的对象</p>
<p>object1：参数1</p>
<p>object2：参数2</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;kerwin&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;tiechui&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj3 = &#123;</span><br><span class="line">    <span class="attr">age</span>:<span class="number">100</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj1, obj2, obj3);</span><br><span class="line"><span class="comment">//obj1 &#123;name: &#x27;tiechui&#x27;, age: 100&#125;</span></span><br></pre></td></tr></table></figure>
<h6 id="8-4-Object-is"><a href="#8-4-Object-is" class="headerlink" title="8-4 Object.is"></a>8-4 Object.is</h6><p>方法判断两个值是否是相同的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span>===<span class="title class_">NaN</span>) <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="number">0</span>===-<span class="number">0</span>) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>,<span class="title class_">NaN</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(+<span class="number">0</span>,-<span class="number">0</span>)) <span class="comment">//false</span></span><br></pre></td></tr></table></figure>



<h5 id="9-函数扩展"><a href="#9-函数扩展" class="headerlink" title="9.函数扩展"></a>9.函数扩展</h5><h6 id="9-1-箭头函数"><a href="#9-1-箭头函数" class="headerlink" title="9-1 箭头函数"></a>9-1 箭头函数</h6><ul>
<li><p>箭头函数是 ES6 里面一个简写函数的语法方式</p>
</li>
<li><p>重点： <strong>箭头函数只能简写函数表达式，不能简写声明式函数</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;&#125; <span class="comment">// 不能简写</span></span><br><span class="line"><span class="keyword">const</span> fun = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125; <span class="comment">// 可以简写</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125; <span class="comment">// 可以简写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>语法： <code>(函数的行参) =&gt; &#123; 函数体内要执行的代码 &#125;</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以使用箭头函数写成</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fun</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以使用箭头函数写成</span></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">fn</span>: <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="9-2-箭头函数的特殊性"><a href="#9-2-箭头函数的特殊性" class="headerlink" title="9-2 箭头函数的特殊性"></a>9-2 箭头函数的特殊性</h6><ul>
<li><p>箭头函数内部没有 this，箭头函数的 this 是上下文的 this</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在箭头函数定义的位置往上数，这一行是可以打印出 this 的</span></span><br><span class="line"><span class="comment">// 因为这里的 this 是 window</span></span><br><span class="line"><span class="comment">// 所以箭头函数内部的 this 就是 window</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 这个位置是箭头函数的上一行，但是不能打印出 this</span></span><br><span class="line">  <span class="attr">fun</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 箭头函数内部的 this 是书写箭头函数的上一行一个可以打印出 this 的位置</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">fn</span>()</span><br><span class="line">obj.<span class="title function_">fun</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li>按照我们之前的 this 指向来判断，两个都应该指向 obj</li>
<li>但是 fun 因为是箭头函数，所以 this 不指向 obj，而是指向 fun 的外层，就是 window</li>
</ul>
</li>
<li><p>箭头函数内部没有 <code>arguments</code> 这个参数集合</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">fun</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 会打印一个伪数组 [1, 2, 3]</span></span><br><span class="line">obj.<span class="title function_">fun</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 会直接报错</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>函数的行参只有一个的时候可以不写 <code>()</code> 其余情况必须写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">fn</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有参数，必须写小括号&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">fn2</span>: <span class="function"><span class="params">a</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;一个行参，可以不写小括号&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">fn3</span>: <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;两个或两个以上参数，必须写小括号&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>函数体只有一行代码的时候，可以不写 <code>&#123;&#125;</code> ，并且会自动 return</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">fn</span>: <span class="function"><span class="params">a</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + <span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">fun</span>: <span class="function"><span class="params">a</span> =&gt;</span> a + <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">10</span>)) <span class="comment">// 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun</span>(<span class="number">10</span>)) <span class="comment">// 20</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="9-3-函数传递参数的时候的默认值"><a href="#9-3-函数传递参数的时候的默认值" class="headerlink" title="9-3 函数传递参数的时候的默认值"></a>9-3 函数传递参数的时候的默认值</h6><ul>
<li><p>我们在定义函数的时候，有的时候需要一个默认值出现</p>
</li>
<li><p>就是当我不传递参数的时候，使用默认值，传递参数了就使用传递的参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  a = a || <span class="number">10</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()   <span class="comment">// 不传递参数的时候，函数内部的 a 就是 10</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">20</span>) <span class="comment">// 传递了参数 20 的时候，函数内部的 a 就是 20</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在 ES6 中我们可以直接把默认值写在函数的行参位置</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a = <span class="number">10</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()   <span class="comment">// 不传递参数的时候，函数内部的 a 就是 10</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">20</span>) <span class="comment">// 传递了参数 20 的时候，函数内部的 a 就是 20</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这个默认值的方式箭头函数也可以使用</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">a = <span class="number">10</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()   <span class="comment">// 不传递参数的时候，函数内部的 a 就是 10</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">20</span>) <span class="comment">// 传递了参数 20 的时候，函数内部的 a 就是 20</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意： <strong>箭头函数如果你需要使用默认值的话，那么一个参数的时候也需要写 （）</strong></li>
</ul>
</li>
</ul>
<h5 id="10-Symbol"><a href="#10-Symbol" class="headerlink" title="10.Symbol"></a>10.Symbol</h5><blockquote>
<p>ES6 引入了一种新的原始数据类型<code>Symbol</code>，表示独一无二的值。它属于 JavaScript 语言的原生数据类型之一，其他数据类型是：<code>undefined</code>、<code>null</code>、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。</p>
</blockquote>
<ol>
<li>使用Symbol作为对象属性名</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="keyword">let</span> age = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="keyword">var</span> obj  =&#123;</span><br><span class="line">    [name]:<span class="string">&quot;kerwin&quot;</span>,</span><br><span class="line">    [age]:<span class="number">100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Symbol()函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述。这主要是为了在控制台显示，比较容易区分。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="title class_">Symbol</span>(<span class="string">&quot;name&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> age = <span class="title class_">Symbol</span>(<span class="string">&quot;age&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> obj  =&#123;</span><br><span class="line">    [name]:<span class="string">&quot;kerwin&quot;</span>,</span><br><span class="line">    [age]:<span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>遍历问题</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> keys = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="title class_">Symbol</span>(<span class="string">&quot;name&quot;</span>),</span><br><span class="line">    <span class="attr">age</span>:<span class="title class_">Symbol</span>(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj  =&#123;</span><br><span class="line">    [keys.<span class="property">name</span>]:<span class="string">&quot;kerwin&quot;</span>,</span><br><span class="line">    [keys.<span class="property">age</span>]:<span class="number">100</span>,</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">c</span>:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item,obj[item])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<ol start="4">
<li>Symbol.for()可以重新使用同一个 Symbol 值</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj  =&#123;</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;name&quot;</span>)]:<span class="string">&quot;kerwin&quot;</span>,</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;age&quot;</span>)]:<span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;name&quot;</span>)])</span><br></pre></td></tr></table></figure>

<h5 id="11-Iterator迭代器"><a href="#11-Iterator迭代器" class="headerlink" title="11.Iterator迭代器"></a>11.Iterator迭代器</h5><blockquote>
<p>Iterator 的作用有三个：</p>
<p>一是为各种数据结构，提供一个统一的、简便的访问接口；</p>
<p>二是使得数据结构的成员能够按某种次序排列；</p>
<p>三是 ES6 创造了一种新的遍历命令<strong>for…of</strong>循环，Iterator 接口主要供<strong>for…of</strong>循环</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;kerwin&quot;</span>, <span class="string">&quot;tiechui&quot;</span>, <span class="string">&quot;gangdaner&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> arr)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Iterator</span> 的遍历过程是这样的。</span><br><span class="line"></span><br><span class="line">（<span class="number">1</span>）创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。</span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）第二次调用指针对象的next方法，指针就指向数据结构的第二个成员。</span><br><span class="line"></span><br><span class="line">（<span class="number">4</span>）不断调用指针对象的next方法，直到它指向数据结构的结束位置。</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> i = arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i.<span class="title function_">next</span>())</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ES6 规定，默认的 Iterator 接口部署在数据结构的Symbol.iterator属性，或者说，一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历的”（iterable）。Symbol.iterator属性本身是一个函数，就是当前数据结构默认的遍历器生成函数。执行这个函数，就会返回一个遍历器。</p>
</blockquote>
<p>原生默认具备 Iterator 接口的数据结构如下。</p>
<ul>
<li>Array</li>
<li>Set</li>
<li>Map</li>
<li>String</li>
<li>arguments 对象</li>
<li>NodeList 对象</li>
</ul>
<p><strong>如何对于对象进行for fo遍历？</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="string">&quot;kerwin&quot;</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="string">&quot;tiechui&quot;</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="string">&quot;gangdaner&quot;</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">3</span>,</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]: <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> obj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">data</span>: [<span class="string">&#x27;kerwin&#x27;</span>, <span class="string">&#x27;tiechui&#x27;</span>, <span class="string">&quot;gangdaner&quot;</span>],</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">        <span class="comment">// let _this = this</span></span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">next</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (index &lt; <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">length</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> &#123;</span><br><span class="line">                        <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">data</span>[index++],</span><br><span class="line">                        <span class="attr">done</span>: <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;</span><br><span class="line">                        <span class="attr">value</span>: <span class="literal">undefined</span>,</span><br><span class="line">                        <span class="attr">done</span>: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> obj2) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="12-Set结构"><a href="#12-Set结构" class="headerlink" title="12.Set结构"></a>12.Set结构</h5><blockquote>
<p>它类似于数组，但成员的值都是唯一的，没有重复的值。</p>
</blockquote>
<h6 id="12-1-初识Set"><a href="#12-1-初识Set" class="headerlink" title="12-1 初识Set"></a>12-1 初识Set</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">s2.<span class="title function_">add</span>(<span class="number">1</span>)</span><br><span class="line">s2.<span class="title function_">add</span>(<span class="number">2</span>)</span><br><span class="line">s2.<span class="title function_">add</span>(<span class="number">3</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2)</span><br></pre></td></tr></table></figure>



<h6 id="12-2-实例的属性和方法"><a href="#12-2-实例的属性和方法" class="headerlink" title="12-2 实例的属性和方法"></a>12-2 实例的属性和方法</h6><ul>
<li><p>size：返回Set实例的成员总数。</p>
</li>
<li><p><code>Set.prototype.add(value)</code>：添加某个value。</p>
</li>
<li><p><code>Set.prototype.delete(value)</code>：删除某个value，返回一个布尔值，表示删除是否成功。</p>
</li>
<li><p><code>Set.prototype.has(value)</code>：返回一个布尔值，表示该值是否为<code>Set</code>的成员。</p>
</li>
<li><p><code>Set.prototype.clear()</code>：清除所有成员，没有返回值。</p>
</li>
</ul>
<h6 id="12-3-遍历"><a href="#12-3-遍历" class="headerlink" title="12-3 遍历"></a>12-3 遍历</h6><ul>
<li><code>Set.prototype.keys()</code>：返回键名的遍历器</li>
<li><code>Set.prototype.values()</code>：返回键值的遍历器</li>
<li><code>Set.prototype.entries()</code>：返回键值对的遍历器</li>
<li><code>Set.prototype.forEach()</code>：遍历每个成员</li>
</ul>
<h6 id="12-4-复杂数据结构去重"><a href="#12-4-复杂数据结构去重" class="headerlink" title="12-4 复杂数据结构去重"></a>12-4 复杂数据结构去重</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">uni</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> id = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(item)</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="title function_">has</span>(id)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">add</span>(id)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;data&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;kerwin&quot;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;kerwin&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">           [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">           [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">           [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">          ]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">uni</span>(arr))</span><br></pre></td></tr></table></figure>

<h5 id="13-Map结构"><a href="#13-Map结构" class="headerlink" title="13.Map结构"></a>13.Map结构</h5><blockquote>
<p>类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</p>
</blockquote>
<h6 id="13-1-初识Map"><a href="#13-1-初识Map" class="headerlink" title="13-1 初识Map"></a>13-1 初识Map</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> m1 = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">m1.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;kerwin&quot;</span>)</span><br><span class="line">m1.<span class="title function_">set</span>(&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;,<span class="string">&quot;大连&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> m2= <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">    [<span class="string">&quot;name&quot;</span>,<span class="string">&quot;kerwin&quot;</span>],</span><br><span class="line">    [&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;,<span class="string">&quot;大连&quot;</span>]</span><br><span class="line">])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m2)</span><br></pre></td></tr></table></figure>

<h6 id="13-2-实例的属性和方法"><a href="#13-2-实例的属性和方法" class="headerlink" title="13-2 实例的属性和方法"></a>13-2 实例的属性和方法</h6><ul>
<li><p>size：返回 Map 结构的成员总数。</p>
</li>
<li><p><code>Map.prototype.set(key,value)</code>：添加key对应得value，返回 Map 结构本身。</p>
</li>
<li><p><code>Map.prototype.get(key)</code>：获取key对应的value</p>
</li>
<li><p><code>Map.prototype.delete(key)</code>：删除某个键（键名+键值）</p>
</li>
<li><p><code>Map.prototype.has(key)</code>：某个键是否在当前 Map 对象之中。</p>
</li>
<li><p><code>Map.prototype.clear()</code>：清除所有成员，没有返回值。</p>
</li>
</ul>
<h6 id="13-3-遍历"><a href="#13-3-遍历" class="headerlink" title="13-3 遍历"></a>13-3 遍历</h6><ul>
<li>Map.prototype.keys()：返回键名的遍历器。</li>
<li>Map.prototype.values()：返回键值的遍历器。</li>
<li>Map.prototype.entries()：返回所有成员的遍历器。</li>
<li>Map.prototype.forEach()：遍历 Map 的所有成员。</li>
</ul>
<h5 id="14-Proxy代理"><a href="#14-Proxy代理" class="headerlink" title="14.Proxy代理"></a>14.Proxy代理</h5><blockquote>
<p>Proxy如其名， 它的作用是在对象和和对象的属性值之间设置一个代理，获取该对象的值或者设置该对象的值， 以及实例化等等多种操作， 都会被拦截住， 经过这一层我们可以统一处理，我们可以认为它就是“代理器”</p>
</blockquote>
<h6 id="14-1-get方法"><a href="#14-1-get方法" class="headerlink" title="14-1.get方法"></a>14-1.get方法</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target,&#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target,prop</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> target[prop]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h6 id="14-2-set方法"><a href="#14-2-set方法" class="headerlink" title="14-2.set方法"></a>14-2.set方法</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target,&#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target,prop</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> target[prop]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target,prop,value</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(prop===<span class="string">&quot;data&quot;</span>)&#123;</span><br><span class="line">            box.<span class="property">innerHTML</span> = value</span><br><span class="line">        &#125;</span><br><span class="line">        target[prop] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="14-3-has方法"><a href="#14-3-has方法" class="headerlink" title="14-3.has方法"></a>14-3.has方法</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;</span><br><span class="line">    <span class="attr">_prop</span>: <span class="string">&quot;内部数据&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, prop</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> target[prop]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, prop, value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prop === <span class="string">&quot;data&quot;</span>) &#123;</span><br><span class="line">            box.<span class="property">innerHTML</span> = value</span><br><span class="line">        &#125;</span><br><span class="line">        target[prop] = value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">has</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">&#x27;_&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> key <span class="keyword">in</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h6 id="14-4-this问题"><a href="#14-4-this问题" class="headerlink" title="14-4.this问题"></a>14-4.this问题</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> target = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> value =  target[key]</span><br><span class="line">        <span class="comment">// 遇到 Function 都手动绑定一下 this</span></span><br><span class="line">        <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="title class_">Function</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`访问<span class="subst">$&#123;value&#125;</span>方法了`</span>)</span><br><span class="line">            <span class="keyword">return</span> value.<span class="title function_">bind</span>(target)</span><br><span class="line">            <span class="comment">//不能 是 call apply </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">proxy.<span class="title function_">add</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>Proxy本质上属于元编程非破坏性数据劫持，在原对象的基础上进行了功能的衍生而又不影响原对象，符合松耦合高内聚的设计理念。</p>
</blockquote>
<h5 id="15-Reflect对象"><a href="#15-Reflect对象" class="headerlink" title="15.Reflect对象"></a>15.Reflect对象</h5><blockquote>
<p>Reflect 可以用于获取目标对象的行为，它与 Object 类似，但是更易读，为操作对象提供了一种更优雅的方式。它的方法与 Proxy 是对应的。</p>
</blockquote>
<h6 id="15-1-代替Object的某些方法"><a href="#15-1-代替Object的某些方法" class="headerlink" title="15-1 代替Object的某些方法"></a>15-1 代替Object的某些方法</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;kerwin&#x27;</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">configurable</span>:<span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="15-2-修改某些Object方法返回结果"><a href="#15-2-修改某些Object方法返回结果" class="headerlink" title="15-2 修改某些Object方法返回结果"></a>15-2 修改某些Object方法返回结果</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 老写法</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target, property, attributes);</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="comment">// fail</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新写法</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Reflect</span>.<span class="title function_">defineProperty</span>(target, property, attributes)) &#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// fail</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="15-3-命令式变为函数行为"><a href="#15-3-命令式变为函数行为" class="headerlink" title="15-3 命令式变为函数行为"></a>15-3 命令式变为函数行为</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;kerwin&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//老写法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> obj) <span class="comment">//true</span></span><br><span class="line"><span class="comment">//新写法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Reflect</span>.<span class="title function_">has</span>(obj, <span class="string">&#x27;name&#x27;</span>)) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//老写法</span></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">name</span></span><br><span class="line"><span class="comment">//新写法</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(obj, <span class="string">&quot;name&quot;</span>)</span><br></pre></td></tr></table></figure>

<h6 id="15-4-配合Proxy"><a href="#15-4-配合Proxy" class="headerlink" title="15-4 配合Proxy"></a>15-4 配合Proxy</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> target = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> value = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target,key)</span><br><span class="line">        <span class="comment">// 遇到 Function 都手动绑定一下 this</span></span><br><span class="line">        <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="title class_">Function</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`访问<span class="subst">$&#123;value&#125;</span>方法了`</span>)</span><br><span class="line">            <span class="keyword">return</span> value.<span class="title function_">bind</span>(target)</span><br><span class="line">            <span class="comment">//不能 是 call apply </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">proxy.<span class="title function_">add</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(arr, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get&#x27;</span>, key)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, value</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set&#x27;</span>, key, value)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">proxy.<span class="title function_">push</span>(<span class="number">4</span>)</span><br><span class="line"><span class="comment">// 能够打印出很多内容</span></span><br><span class="line"><span class="comment">// get push     (寻找 proxy.push 方法)</span></span><br><span class="line"><span class="comment">// get length   (获取当前的 length)</span></span><br><span class="line"><span class="comment">// set 3 4      (设置 proxy[3] = 4)</span></span><br><span class="line"><span class="comment">// set length 4 (设置 proxy.length = 4)</span></span><br></pre></td></tr></table></figure>

<h5 id="16-Promise"><a href="#16-Promise" class="headerlink" title="16.Promise"></a>16.Promise</h5><blockquote>
<p>Promise 是异步编程的一种解决方案，比传统的解决方案回调函数,  更合理和更强大。ES6 将其写进了语言标准，统一了用法，原生提供了Promise对象 。</p>
</blockquote>
<ul>
<li><p>指定回调函数方式更灵活易懂。</p>
</li>
<li><p>解决异步 <strong>回调地狱</strong> 的问题。</p>
</li>
</ul>
<h6 id="16-1-回调地狱"><a href="#16-1-回调地狱" class="headerlink" title="16-1 回调地狱"></a>16-1 回调地狱</h6><ul>
<li><p>当一个回调函数嵌套一个回调函数的时候</p>
</li>
<li><p>就会出现一个嵌套结构</p>
</li>
<li><p>当嵌套的多了就会出现回调地狱的情况</p>
</li>
<li><p>比如我们发送三个 ajax 请求</p>
<ul>
<li>第一个正常发送</li>
<li>第二个请求需要第一个请求的结果中的某一个值作为参数</li>
<li>第三个请求需要第二个请求的结果中的某一个值作为参数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;我是第一个请求&#x27;</span>,</span><br><span class="line">  success (res) &#123;</span><br><span class="line">    <span class="comment">// 现在发送第二个请求</span></span><br><span class="line">    <span class="title function_">ajax</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;我是第二个请求&#x27;</span>，</span><br><span class="line">      <span class="attr">data</span>: &#123; <span class="attr">a</span>: res.<span class="property">a</span>, <span class="attr">b</span>: res.<span class="property">b</span> &#125;,</span><br><span class="line">      success (res2) &#123;</span><br><span class="line">        <span class="comment">// 进行第三个请求</span></span><br><span class="line">        <span class="title function_">ajax</span>(&#123;</span><br><span class="line">          <span class="attr">url</span>: <span class="string">&#x27;我是第三个请求&#x27;</span>,</span><br><span class="line">          <span class="attr">data</span>: &#123; <span class="attr">a</span>: res2.<span class="property">a</span>, <span class="attr">b</span>: res2.<span class="property">b</span> &#125;,</span><br><span class="line">  				success (res3) &#123; </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res3) </span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>回调地狱，其实就是回调函数嵌套过多导致的</strong></p>
</li>
</ul>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-u6H56r6e-1681921901149)(%E7%AC%94%E8%AE%B0.assets&#x2F;%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1.jpeg)]</p>
<ul>
<li>当代码成为这个结构以后，已经没有维护的可能了</li>
</ul>
<h6 id="16-2-Promise使用"><a href="#16-2-Promise使用" class="headerlink" title="16-2 Promise使用"></a>16-2 Promise使用</h6><ul>
<li><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">// resolve 表示成功的回调</span></span><br><span class="line">  <span class="comment">// reject 表示失败的回调</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">  <span class="comment">// 成功的函数</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="comment">// 失败的函数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="16-3-Promise-对象的状态"><a href="#16-3-Promise-对象的状态" class="headerlink" title="16-3 Promise 对象的状态"></a>16-3 Promise 对象的状态</h6><p>Promise 对象通过自身的状态，来控制异步操作。Promise 实例具有三种状态。</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">异步操作未完成（pending）</span><br><span class="line">异步操作成功（fulfilled）</span><br><span class="line">异步操作失败（rejected）</span><br></pre></td></tr></table></figure>

<p>这三种的状态的变化途径只有两种。</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">从“未完成”到“成功”</span><br><span class="line">从“未完成”到“失败”</span><br></pre></td></tr></table></figure>

<p>一旦状态发生变化，就凝固了，不会再有新的状态变化。这也是 Promise 这个名字的由来，它的英语意思是“承诺”，一旦承诺成效，就不得再改变了。这也意味着，Promise 实例的状态变化只可能发生一次。</p>
<p>因此，Promise 的最终结果只有两种。</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">异步操作成功，Promise 实例传回一个值（value），状态变为fulfilled。</span><br><span class="line">异步操作失败，Promise 实例抛出一个错误（error），状态变为rejected。</span><br></pre></td></tr></table></figure>

<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-X5z03Bpt-1681921901150)(%E7%AC%94%E8%AE%B0.assets&#x2F;image-20220902141409899.png)]</p>
<h6 id="16-4-Promise-all"><a href="#16-4-Promise-all" class="headerlink" title="16-4 Promise.all"></a>16-4 Promise.all</h6><p><code>Promise.all()</code>方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2, p3]);</span><br></pre></td></tr></table></figure>

<p>p的状态由p1,p2,p3 决定，分成两种情况。</p>
<p>（1）只有<code>p1</code>、<code>p2</code>、<code>p3</code>的状态都变成<code>fulfilled</code>，<code>p</code>的状态才会变成<code>fulfilled</code>，此时<code>p1</code>、<code>p2</code>、<code>p3</code>的返回值组成一个数组，传递给<code>p</code>的回调函数。</p>
<p>（2）只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个被<code>rejected</code>，<code>p</code>的状态就变成<code>rejected</code>，此时第一个被<code>reject</code>的实例的返回值，会传递给<code>p</code>的回调函数。</p>
<h6 id="16-5-Promise-race"><a href="#16-5-Promise-race" class="headerlink" title="16-5 Promise.race"></a>16-5 Promise.race</h6><p><code>Promise.race()</code>方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2, p3]);</span><br></pre></td></tr></table></figure>

<p>上面代码中，只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个实例率先改变状态，<code>p</code>的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给<code>p</code>的回调函数。</p>
<h5 id="17-Generator-函数"><a href="#17-Generator-函数" class="headerlink" title="17.Generator 函数"></a>17.Generator 函数</h5><blockquote>
<p>Generator 函数是 ES6 提供的一种异步编程解决方案</p>
<p>Generator 函数是一个状态机，封装了多个内部状态。</p>
<p>执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。</p>
</blockquote>
<h6 id="17-1-基本语法"><a href="#17-1-基本语法" class="headerlink" title="17-1 基本语法"></a>17-1 基本语法</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> *<span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">yield</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">yield</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g = <span class="title function_">gen</span>()</span><br><span class="line">g.<span class="title function_">next</span>()</span><br><span class="line">g.<span class="title function_">next</span>()</span><br><span class="line">g.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure>

<img src="%E7%AC%94%E8%AE%B0.assets/image-20220917070351858.png" alt="image-20220917070351858" style="zoom:50%;float:left" />

<blockquote>
<p>yield(产出)表达式是暂停执行的标记，而next方法可以恢复执行。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> *<span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">yield</span>  <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span>  <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g = <span class="title function_">gen</span>()</span><br><span class="line"><span class="keyword">let</span> res1 = g.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1)</span><br><span class="line"><span class="keyword">let</span> res2 = g.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2)</span><br><span class="line"><span class="keyword">let</span> res3 = g.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res3)</span><br></pre></td></tr></table></figure>

<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-UmesXKSH-1681921901151)(%E7%AC%94%E8%AE%B0.assets&#x2F;image-20220917070836171.png)]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> *<span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> res1 = <span class="keyword">yield</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res1)</span><br><span class="line">    <span class="keyword">let</span> res2 = <span class="keyword">yield</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g = <span class="title function_">gen</span>()</span><br><span class="line">g.<span class="title function_">next</span>(<span class="string">&quot;data-1&quot;</span>)</span><br><span class="line">g.<span class="title function_">next</span>(<span class="string">&quot;data-2&quot;</span>)</span><br><span class="line">g.<span class="title function_">next</span>(<span class="string">&quot;data-3&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-tOdc6zF1-1681921901151)(%E7%AC%94%E8%AE%B0.assets&#x2F;image-20220917071219520.png)]</p>
<h6 id="17-2-异步流程"><a href="#17-2-异步流程" class="headerlink" title="17-2 异步流程"></a>17-2 异步流程</h6><p><strong>手动版本</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> *<span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> res1 = <span class="keyword">yield</span> <span class="title function_">ajax</span>(<span class="string">&quot;1.json&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res1)</span><br><span class="line">    <span class="keyword">let</span> res2 = <span class="keyword">yield</span> <span class="title function_">ajax</span>(<span class="string">&quot;2.json&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g = <span class="title function_">gen</span>()   </span><br><span class="line"></span><br><span class="line">g.<span class="title function_">next</span>().<span class="property">value</span>.<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    g.<span class="title function_">next</span>(data).<span class="property">value</span>.<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">        g.<span class="title function_">next</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>

<p><strong>自动版本</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res1 = <span class="keyword">yield</span> <span class="title function_">ajax</span>(<span class="string">&quot;1.json&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res1)</span><br><span class="line">    <span class="keyword">let</span> res2 = <span class="keyword">yield</span> <span class="title function_">ajax</span>(<span class="string">&quot;2.json&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">AutoRun</span>(<span class="params">gen</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> g = <span class="title function_">gen</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">next</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> res = g.<span class="title function_">next</span>(data);</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">done</span>) <span class="keyword">return</span> </span><br><span class="line">        res.<span class="property">value</span>.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">            <span class="title function_">next</span>(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">AutoRun</span>(gen);</span><br></pre></td></tr></table></figure>

<h5 id="18-Class语法"><a href="#18-Class语法" class="headerlink" title="18. Class语法"></a>18. Class语法</h5><h6 id="18-1-类的写法"><a href="#18-1-类的写法" class="headerlink" title="18-1 类的写法"></a>18-1 类的写法</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>,<span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;kerwin&quot;</span>,<span class="number">100</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure>

<h6 id="18-2-getter与setter"><a href="#18-2-getter与setter" class="headerlink" title="18-2 getter与setter"></a>18-2 getter与setter</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">List</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">ele</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">element</span> = ele</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">html</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">innerHTML</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">html</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">innerHTML</span> = arr.<span class="title function_">map</span>(<span class="function"><span class="params">item</span>=&gt;</span><span class="string">`&lt;li&gt;<span class="subst">$&#123;item&#125;</span>&lt;/li&gt;`</span>).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">List</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#list&quot;</span>))</span><br><span class="line"></span><br><span class="line">obj.<span class="property">html</span> = [<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;cccc&quot;</span>]</span><br></pre></td></tr></table></figure>

<h6 id="18-3-静态属性和静态方法"><a href="#18-3-静态属性和静态方法" class="headerlink" title="18-3 静态属性和静态方法"></a>18-3 静态属性和静态方法</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> name = <span class="string">&quot;Person这个类&quot;</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>,<span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">eat</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;eat&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;kerwin&quot;</span>,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">name</span>)</span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">eat</span>()</span><br></pre></td></tr></table></figure>

<h6 id="18-4-继承"><a href="#18-4-继承" class="headerlink" title="18-4 继承"></a>18-4 继承</h6><blockquote>
<p>ES6 规定，子类必须在<code>constructor()</code>方法中调用<code>super()</code>，否则就会报错。这是因为子类自己的<code>this</code>对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，添加子类自己的实例属性和方法。如果不调用<code>super()</code>方法，子类就得不到自己的<code>this</code>对象。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> name = <span class="string">&quot;Person这个类&quot;</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>,<span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">eat</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;eat&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,age,score</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name,age)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">score</span> = score</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">say</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">score</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">eat</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">eat</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;student eat&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;kerwin&quot;</span>,<span class="number">100</span>,<span class="number">200</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line">obj.<span class="title function_">say</span>()</span><br><span class="line"><span class="title class_">Student</span>.<span class="title function_">eat</span>()</span><br></pre></td></tr></table></figure>



<h5 id="19-模块化"><a href="#19-模块化" class="headerlink" title="19.模块化"></a>19.模块化</h5><blockquote>
<p>JavaScript 现在有两种模块。一种是 ES6 模块，简称 ESM；另一种是 CommonJS 模块，简称 CJS。</p>
<p>CommonJS 模块是 Node.js 专用的，与 ES6 模块不兼容。语法上面，两者最明显的差异是，CommonJS 模块使用<code>require()</code>和<code>module.exports</code>，ES6 模块使用<code>import</code>和<code>export</code>。</p>
</blockquote>
<p>ES6 模块不是对象，而是通过<code>export</code>命令显式指定输出的代码，再通过<code>import</code>命令输入。</p>
<p><strong>写法1：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="variable constant_">A1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> a1 <span class="keyword">from</span> <span class="string">&quot;./1.js&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>写法2：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;<span class="variable constant_">A1</span>,<span class="variable constant_">A2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">A1</span>,<span class="variable constant_">A2</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./1.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">A1</span> <span class="keyword">as</span> a1,<span class="variable constant_">A2</span> <span class="keyword">as</span> a2&#125; <span class="keyword">from</span> <span class="string">&quot;./1.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> obj <span class="keyword">from</span> <span class="string">&quot;./1.js&quot;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">A1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;A1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">A2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;A2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">A1</span>,<span class="variable constant_">A2</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./1.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">A1</span> <span class="keyword">as</span> a1,<span class="variable constant_">A2</span> <span class="keyword">as</span> a2&#125; <span class="keyword">from</span> <span class="string">&quot;./1.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> obj <span class="keyword">from</span> <span class="string">&quot;./1.js&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>混合写法：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;<span class="variable constant_">A1</span>&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="variable constant_">A2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">A2</span>,&#123;<span class="variable constant_">A1</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./1.js&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="二-ES7新特性"><a href="#二-ES7新特性" class="headerlink" title="二. ES7新特性"></a>二. ES7新特性</h2><h5 id="1-求幂运算符"><a href="#1-求幂运算符" class="headerlink" title="1. 求幂运算符"></a>1. 求幂运算符</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">3</span>, <span class="number">2</span>) === <span class="number">3</span> ** <span class="number">2</span>    <span class="comment">// 9</span></span><br></pre></td></tr></table></figure>

<h5 id="2-数组的includes方法"><a href="#2-数组的includes方法" class="headerlink" title="2.数组的includes方法"></a>2.数组的includes方法</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="title class_">NaN</span>].<span class="title function_">includes</span>(<span class="title class_">NaN</span>)     <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="title class_">NaN</span>].<span class="title function_">indexOf</span>(<span class="title class_">NaN</span>)  <span class="comment">// -1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果仅仅查找数据是否在数组中，建议使用includes，如果是查找数据的索引位置，建议使用indexOf更好一些</p>
</blockquote>
<h2 id="三-ES8新特性"><a href="#三-ES8新特性" class="headerlink" title="三. ES8新特性"></a>三. ES8新特性</h2><h5 id="1-async和await"><a href="#1-async和await" class="headerlink" title="1. async和await"></a>1. async和await</h5><h6 id="1-1-Async"><a href="#1-1-Async" class="headerlink" title="1-1.Async"></a>1-1.Async</h6><p>async 函数，使得异步操作变得更加方便。</p>
<ul>
<li>更好的语义。</li>
<li>返回值是 Promise。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>()</span><br></pre></td></tr></table></figure>



<h6 id="1-2-Await"><a href="#1-2-Await" class="headerlink" title="1-2.Await"></a>1-2.Await</h6><p><code>await</code>命令后面是一个 Promise 对象，返回该对象的结果。如果不是 Promise 对象，就直接返回对应的值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> res1 =  <span class="keyword">await</span> <span class="title function_">ajax</span>(<span class="string">&quot;http://localhost:3000/news1&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> res2 =  <span class="keyword">await</span> <span class="title function_">ajax</span>(<span class="string">&quot;http://localhost:3000/news2&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> res2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;返回结果&quot;</span>,res)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;err&quot;</span>,err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h6 id="1-3-错误处理"><a href="#1-3-错误处理" class="headerlink" title="1-3.错误处理"></a>1-3.错误处理</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res1 =  <span class="keyword">await</span> <span class="title function_">ajax</span>(<span class="string">&quot;http://localhost:3000/news1&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> res2 =  <span class="keyword">await</span> <span class="title function_">ajax</span>(<span class="string">&quot;http://localhost:3000/news2&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;err&quot;</span>,err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-对象方法扩展"><a href="#2-对象方法扩展" class="headerlink" title="2.对象方法扩展"></a>2.对象方法扩展</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;kerwin&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(obj))</span><br></pre></td></tr></table></figure>

<img src="%E7%AC%94%E8%AE%B0.assets/image-20220920154527417.png" alt="image-20220920154527417" style="zoom:50%;float:left" />


<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;kerwin&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(obj))</span><br></pre></td></tr></table></figure>



<img src="%E7%AC%94%E8%AE%B0.assets/image-20220920154622530.png" alt="image-20220920154622530" style="zoom:50%;float:left" />



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;kerwin&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(obj))</span><br></pre></td></tr></table></figure>

<img src="%E7%AC%94%E8%AE%B0.assets/image-20220920155143538.png" alt="image-20220920155143538" style="zoom:50%;float:left" />



<p><strong>克隆对象</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;Kerwin&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">100</span>,</span><br><span class="line">    <span class="attr">location</span>:&#123;</span><br><span class="line">        <span class="attr">provice</span>:<span class="string">&quot;辽宁&quot;</span>,</span><br><span class="line">        <span class="attr">city</span>:<span class="string">&quot;大连&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//只设置city，防止破坏province</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">city</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">location</span>.<span class="property">city</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">city</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">location</span>.<span class="property">city</span> = value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">nameset</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = value.<span class="title function_">substring</span>(<span class="number">0</span>,<span class="number">1</span>).<span class="title function_">toUpperCase</span>()+value.<span class="title function_">substring</span>(<span class="number">1</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">nameset</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(obj1))</span><br><span class="line"><span class="keyword">var</span> obj2=  &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Object.assign(obj2,obj1)//无法克隆 get set方法</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(obj2,<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(obj1))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="3-字符串填充"><a href="#3-字符串填充" class="headerlink" title="3. 字符串填充"></a>3. 字符串填充</h5><blockquote>
<p>padStart()、padEnd()方法可以使得字符串达到固定长度，有两个参数，字符串目标长度和填充内容。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str= <span class="string">&quot;kerwin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">padStart</span>(<span class="number">10</span>,<span class="string">&quot;x&quot;</span>));<span class="comment">//xxxxkerwin</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">padEnd</span>(<span class="number">10</span>,<span class="string">&quot;x&quot;</span>));<span class="comment">//kerwinxxxx</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">padStart</span>(<span class="number">5</span>,<span class="string">&quot;x&quot;</span>))<span class="comment">//kerwin</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">padEnd</span>(<span class="number">5</span>,<span class="string">&quot;x&quot;</span>))<span class="comment">//kerwin</span></span><br></pre></td></tr></table></figure>



<h5 id="4-函数参数的末尾加逗号"><a href="#4-函数参数的末尾加逗号" class="headerlink" title="4. 函数参数的末尾加逗号"></a>4. 函数参数的末尾加逗号</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span></span><br><span class="line"><span class="params"> a,</span></span><br><span class="line"><span class="params"> b,</span></span><br><span class="line"><span class="params"> c,</span></span><br><span class="line"><span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="number">2</span>,</span><br><span class="line">    <span class="number">3</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>『末尾逗号』在添加新的参数、属性、元素时是有用的，你可以直接新加一行而不必给上一行再补充一个逗号，这样使版本控制工具的修改记录也更加整洁</p>
</blockquote>
<h2 id="四-ES9新特性"><a href="#四-ES9新特性" class="headerlink" title="四. ES9新特性"></a>四. ES9新特性</h2><h5 id="1-对象的剩余参数与扩展运算符"><a href="#1-对象的剩余参数与扩展运算符" class="headerlink" title="1. 对象的剩余参数与扩展运算符"></a>1. 对象的剩余参数与扩展运算符</h5><h6 id="1-1-对象的剩余参数"><a href="#1-1-对象的剩余参数" class="headerlink" title="1-1 对象的剩余参数"></a>1-1 对象的剩余参数</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;kerwin&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">100</span>,</span><br><span class="line">    <span class="attr">location</span>:<span class="string">&quot;dalian&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name,...other&#125; = obj</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name) <span class="comment">//kerwin</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(other) <span class="comment">//&#123;age: 100, location: &#x27;dalian&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h6 id="1-2-对象的扩展运算符"><a href="#1-2-对象的扩展运算符" class="headerlink" title="1-2 对象的扩展运算符"></a>1-2 对象的扩展运算符</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;kerwin&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">age</span>:<span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;...obj1,...obj2&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="2-正则表达式命名捕获组"><a href="#2-正则表达式命名捕获组" class="headerlink" title="2.正则表达式命名捕获组"></a>2.正则表达式命名捕获组</h5><p>JS正则表达式可以返回一个匹配的对象, 一个包含匹配字符串的类数组, 比如: 以 YYYY-MM-DD的格式解析日期，</p>
<p>这样的代码可读性很差, 并且在改变正则表达式的结构的时候很有可能就会改变匹配对象的索引</p>
<p>ES9允许使用命名捕获 ?<name> , 在打开捕获括号后立即命名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;今天是2022-10-10&quot;</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/([0-9]&#123;4&#125;)-([0-9]&#123;2&#125;)-([0-9]&#123;2&#125;)/g</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res1 = reg.<span class="title function_">exec</span>(str)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1)</span><br></pre></td></tr></table></figure>

<img src="%E7%AC%94%E8%AE%B0.assets/image-20220921110518183.png" alt="image-20220921110518183" style="zoom:67%;float:left" />



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;今天是2022-10-10&quot;</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(?&lt;year&gt;[0-9]&#123;4&#125;)-(?&lt;month&gt;[0-9]&#123;2&#125;)-(?&lt;day&gt;[0-9]&#123;2&#125;)/g</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res1 = reg.<span class="title function_">exec</span>(str)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1)</span><br></pre></td></tr></table></figure>

<img src="%E7%AC%94%E8%AE%B0.assets/image-20220921110644896.png" alt="image-20220921110644896" style="zoom:67%;float:left" />

<h5 id="3-Promise-finally"><a href="#3-Promise-finally" class="headerlink" title="3. Promise.finally()"></a>3. Promise.finally()</h5><blockquote>
<p>无论是成功还是失败, 都运行同样的代码, 比如隐藏对话框, 关闭数据连接</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="number">1111</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//showloading</span></span><br><span class="line"><span class="title function_">ajax</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//hideloading</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;finally&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h5 id="4-异步遍历器"><a href="#4-异步遍历器" class="headerlink" title="4. 异步遍历器"></a>4. 异步遍历器</h5><h6 id="4-1-同步遍历器的问题"><a href="#4-1-同步遍历器的问题" class="headerlink" title="4-1 同步遍历器的问题"></a>4-1 同步遍历器的问题</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span>  <span class="number">1111</span></span><br><span class="line">    <span class="keyword">yield</span>  <span class="number">2222</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> syncI = <span class="title function_">fn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(syncI.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(syncI.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(syncI.<span class="title function_">next</span>())</span><br></pre></td></tr></table></figure>

<img src="%E7%AC%94%E8%AE%B0.assets/image-20220921132030973.png" alt="image-20220921132030973" style="zoom:67%;float:left" />

<h6 id=""><a href="#" class="headerlink" title=""></a></h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span>  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span><span class="title function_">resolve</span>(<span class="string">&quot;1111&quot;</span>))</span><br><span class="line">    <span class="keyword">yield</span>  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span><span class="title function_">resolve</span>(<span class="string">&quot;2222&quot;</span>))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> syncI = <span class="title function_">fn</span>();</span><br><span class="line">syncI.<span class="title function_">next</span>().<span class="property">value</span>.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(res)&#125;)</span><br><span class="line">syncI.<span class="title function_">next</span>().<span class="property">value</span>.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(res)&#125;)</span><br></pre></td></tr></table></figure>

<img src="%E7%AC%94%E8%AE%B0.assets/image-20220921132403676.png" alt="image-20220921132403676" style="zoom:67%;float:left" />

<blockquote>
<p><code>value</code>属性的返回值是一个 Promise 对象，用来放置异步操作。但是这样写很麻烦，不太符合直觉，语义也比较绕。</p>
</blockquote>
<h6 id="4-2-异步遍历器生成函数"><a href="#4-2-异步遍历器生成函数" class="headerlink" title="4-2 异步遍历器生成函数"></a>4-2 异步遍历器生成函数</h6><blockquote>
<p>Generator 函数返回一个同步遍历器，异步 Generator 函数的作用，是返回一个异步遍历器对象。在语法上，异步 Generator 函数就是async函数与 Generator 函数的结合。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span>* <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span>  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span><span class="title function_">resolve</span>(<span class="string">&quot;1111&quot;</span>))</span><br><span class="line">    <span class="keyword">yield</span>  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span><span class="title function_">resolve</span>(<span class="string">&quot;2222&quot;</span>))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> asyncI = <span class="title function_">fn</span>();</span><br><span class="line"></span><br><span class="line">asyncI.<span class="title function_">next</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="keyword">return</span> asyncI.<span class="title function_">next</span>()</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="keyword">return</span> asyncI.<span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<img src="%E7%AC%94%E8%AE%B0.assets/image-20220921132528997.png" alt="image-20220921132528997" style="zoom:67%;float:left" />



<h6 id="4-3-for-await-of"><a href="#4-3-for-await-of" class="headerlink" title="4-3 for await of"></a>4-3 for await of</h6><blockquote>
<p><code>for...of</code>循环用于遍历同步的 Iterator 接口。新引入的<code>for await...of</code>循环，则是用于遍历异步的 Iterator 接口。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">let</span> i <span class="keyword">of</span> asyncI) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>()</span><br></pre></td></tr></table></figure>



<h6 id="4-4-案例改造"><a href="#4-4-案例改造" class="headerlink" title="4-4 案例改造"></a>4-4 案例改造</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">timer</span>(<span class="params">t</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              <span class="title function_">resolve</span>(t)</span><br><span class="line">          &#125;, t)</span><br><span class="line">      &#125;)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span>* <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">timer</span>(<span class="number">1000</span>)<span class="comment">//任务1</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">timer</span>(<span class="number">2000</span>)<span class="comment">//任务2</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">timer</span>(<span class="number">3000</span>)<span class="comment">//任务3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用一下 for await ...of</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="title function_">await</span>(<span class="params"><span class="keyword">const</span> val <span class="keyword">of</span> fn()</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start&quot;</span>,<span class="title class_">Date</span>.<span class="title function_">now</span>())</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(val);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;end&quot;</span>,<span class="title class_">Date</span>.<span class="title function_">now</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>();</span><br></pre></td></tr></table></figure>



<h6 id="4-5-nodejs用法"><a href="#4-5-nodejs用法" class="headerlink" title="4-5 nodejs用法"></a>4-5 nodejs用法</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传统写法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params">inputFilePath</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> readStream = fs.<span class="title function_">createReadStream</span>(</span><br><span class="line">    inputFilePath,</span><br><span class="line">    &#123; <span class="attr">encoding</span>: <span class="string">&#x27;utf8&#x27;</span>, <span class="attr">highWaterMark</span>: <span class="number">1024</span> &#125;</span><br><span class="line">  );</span><br><span class="line">  readStream.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&gt;&gt;&gt; &#x27;</span>+chunk);</span><br><span class="line">  &#125;);</span><br><span class="line">  readStream.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;### DONE ###&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步遍历器写法</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params">inputFilePath</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> readStream = fs.<span class="title function_">createReadStream</span>(</span><br><span class="line">    inputFilePath,</span><br><span class="line">    &#123; <span class="attr">encoding</span>: <span class="string">&#x27;utf8&#x27;</span>, <span class="attr">highWaterMark</span>: <span class="number">1024</span> &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> chunk <span class="keyword">of</span> readStream) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&gt;&gt;&gt; &#x27;</span>+chunk);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;### DONE ###&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="五-ES10新特性"><a href="#五-ES10新特性" class="headerlink" title="五.ES10新特性"></a>五.ES10新特性</h2><h5 id="1-Object-fromEntries"><a href="#1-Object-fromEntries" class="headerlink" title="1. Object.fromEntries"></a>1. Object.fromEntries</h5><blockquote>
<p>Object.fromEntries()方法允许你轻松地将键值对列表转换为对象</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [[<span class="string">&quot;name&quot;</span>, <span class="string">&quot;kerwin&quot;</span>], [<span class="string">&quot;age&quot;</span>, <span class="number">100</span>]];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(arr))<span class="comment">//&#123;name: &#x27;kerwin&#x27;, age: 100&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;tiechui&quot;</span>)</span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(m))</span><br></pre></td></tr></table></figure>

<p><strong>用处</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str =<span class="string">&quot;name=kerwin&amp;age=100&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> searchParams = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(str)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(searchParams))<span class="comment">//&#123;name: &#x27;kerwin&#x27;, age: &#x27;100&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-trimStart-and-trimEnd"><a href="#2-trimStart-and-trimEnd" class="headerlink" title="2. trimStart() and trimEnd()"></a>2. trimStart() and trimEnd()</h5><blockquote>
<p>trimStart()和trimEnd()方法在实现与trimLeft()和trimRight()相同。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;   kerwin    &quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;|&quot;</span>+str.<span class="title function_">trimStart</span>(str)+<span class="string">&quot;|&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;|&quot;</span>+str.<span class="title function_">trimEnd</span>(str)+<span class="string">&quot;|&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;|&quot;</span>+str.<span class="title function_">trimLeft</span>(str)+<span class="string">&quot;|&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;|&quot;</span>+str.<span class="title function_">trimRight</span>(str)+<span class="string">&quot;|&quot;</span>)</span><br></pre></td></tr></table></figure>



<h5 id="3-Symbol-对象的-description-属性"><a href="#3-Symbol-对象的-description-属性" class="headerlink" title="3. Symbol 对象的 description 属性"></a>3. Symbol 对象的 description 属性</h5><blockquote>
<p>为Symbol对象添加了只读属性 description ，该对象返回包含Symbol描述的字符串。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>(<span class="string">&quot;kerwin&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">description</span>) <span class="comment">//kerwin</span></span><br></pre></td></tr></table></figure>

<h5 id="4-可选的-catch"><a href="#4-可选的-catch" class="headerlink" title="4. 可选的 catch"></a>4. 可选的 catch</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> pro1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="comment">//执行器函数</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&quot;成功的结果&quot;</span>)</span><br><span class="line">    &#125;, <span class="number">30000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> pro2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="comment">//执行器函数</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>()</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">race</span>([pro1, pro2])</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;不关心错误结果，网络超时&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>()</span><br></pre></td></tr></table></figure>





<h2 id="六-ES11新特性"><a href="#六-ES11新特性" class="headerlink" title="六. ES11新特性"></a>六. ES11新特性</h2><h5 id="1-Promise-allSettled"><a href="#1-Promise-allSettled" class="headerlink" title="1. Promise.allSettled"></a>1. Promise.allSettled</h5><blockquote>
<p>Promise.allSettled() 方法返回一个在所有给定的 promise 都已经 fulfilled 或 rejected 后的 promise ，并带有一个对象数组，每个对象表示对应的 promise 结果。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promises = [ <span class="title function_">ajax</span>(<span class="string">&#x27;/200接口&#x27;</span>), <span class="title function_">ajax</span>(<span class="string">&#x27;/401接口&#x27;</span>) ];</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">allSettled</span>(promises).<span class="title function_">then</span>(<span class="function"><span class="params">results</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 过滤出成功的请求</span></span><br><span class="line">    results.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span>item.<span class="property">status</span> === <span class="string">&#x27;fulfilled&#x27;</span>);</span><br><span class="line">    过滤出失败的请求</span><br><span class="line">    results.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span>=&gt;</span> item.<span class="property">status</span> === <span class="string">&#x27;rejected&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="2-module新增"><a href="#2-module新增" class="headerlink" title="2.module新增"></a>2.module新增</h5><h6 id="2-1-动态导入-import"><a href="#2-1-动态导入-import" class="headerlink" title="2-1 动态导入 import()"></a>2-1 动态导入 import()</h6><blockquote>
<p>标准用法的 import 导入的模块是静态的，会使所有被导入的模块，在加载时就被编译（无法做到按需编译，降低首页加载速度）。有些场景中，你可能希望根据条件导入模块或者按需导入模块，这时你可以使用动态导入代替静态导入。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> role1 = <span class="string">&quot;管理员&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> role2 = <span class="string">&quot;普通用户&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> <span class="string">&quot;普通用户&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">role</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span>(role===role1)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">let</span> res1 = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&quot;./1.js&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res1.<span class="property">default</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">let</span> res2 = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&quot;./2.js&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res2.<span class="property">default</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> obtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;button&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        obtn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">let</span> role = <span class="title function_">login</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">render</span>(role)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h6 id="2-2-import-meta"><a href="#2-2-import-meta" class="headerlink" title="2-2 import.meta"></a>2-2 import.meta</h6><p>import.meta 会返回一个对象，有一个 url 属性，返回当前模块的url路径，只能在模块内部使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span>&gt;</span><br><span class="line">        <span class="keyword">import</span> obj <span class="keyword">from</span> <span class="string">&#x27;./1.js&#x27;</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.js</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">import</span>.<span class="property">meta</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h6 id="2-3-export-as-obj-from-‘module’"><a href="#2-3-export-as-obj-from-‘module’" class="headerlink" title="2-3 export * as obj from ‘module’"></a>2-3 export * as obj from ‘module’</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;111111&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">test1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;22222&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">as</span> obj1 <span class="keyword">from</span> <span class="string">&#x27;./1.js&#x27;</span></span><br><span class="line"><span class="comment">//html</span></span><br><span class="line"> &lt;script type=<span class="string">&quot;module&quot;</span>&gt;</span><br><span class="line">        <span class="keyword">import</span> * <span class="keyword">as</span> obj <span class="keyword">from</span> <span class="string">&#x27;./2.js&#x27;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>



<img src="%E7%AC%94%E8%AE%B0.assets/image-20220922111416681.png" alt="image-20220922111416681" style="zoom:67%;float:left;" />





<h5 id="3-字符串的matchAll方法"><a href="#3-字符串的matchAll方法" class="headerlink" title="3.字符串的matchAll方法"></a>3.字符串的matchAll方法</h5><blockquote>
<p>matchAll() 方法返回一个包含所有匹配正则表达式的结果的迭代器。可以使用 for…of 遍历，或者使用 展开运算符(…) 或者 Array.from 转换为数组.</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;1111&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;2222&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;3333&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;4444&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/&lt;li&gt;(.*)&lt;\/li&gt;/g</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(reg)) </span><br><span class="line"><span class="comment">//&#x27;&lt;li&gt;1111&lt;/li&gt;&#x27;, &#x27;&lt;li&gt;2222&lt;/li&gt;&#x27;, &#x27;&lt;li&gt;3333&lt;/li&gt;&#x27;, &#x27;&lt;li&gt;4444&lt;/li&gt;&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;1111&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;2222&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;3333&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;4444&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/&lt;li&gt;(.*)&lt;\/li&gt;/g</span></span><br><span class="line"><span class="keyword">let</span> match = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">while</span>(match = reg.<span class="title function_">exec</span>(str))&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(match[<span class="number">0</span>])</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(match[<span class="number">1</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;1111&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;2222&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;3333&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;4444&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/&lt;li&gt;(.*)&lt;\/li&gt;/g</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> str.<span class="title function_">matchAll</span>(reg))&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h5 id="4-BigInt"><a href="#4-BigInt" class="headerlink" title="4. BigInt"></a>4. BigInt</h5><blockquote>
<p>JavaScript 能够准确表示的整数范围在-2^53到2^53之间（不含两个端点），超过这个范围，无法精确表示这个值，这使得 JavaScript 不适合进行科学和金融方面的精确计算。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">9007199254740992</span> <span class="comment">//9007199254740992</span></span><br><span class="line"><span class="number">9007199254740993</span> <span class="comment">//9007199254740992</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>,<span class="number">53</span>) === <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>,<span class="number">53</span>)+<span class="number">1</span></span><br></pre></td></tr></table></figure>



<p>为了与 Number 类型区别，BigInt 类型的数据必须添加后缀<code>n</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1234</span> <span class="comment">// 普通整数</span></span><br><span class="line"><span class="number">1234n</span> <span class="comment">// BigInt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// BigInt 的运算</span></span><br><span class="line"><span class="number">1n</span> + <span class="number">2n</span> <span class="comment">// 3n</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="5-globalThis"><a href="#5-globalThis" class="headerlink" title="5. globalThis"></a>5. globalThis</h5><blockquote>
<p>globalThis 提供了一个标准的方式来获取不同环境下的全局 this 对象（也就是全局对象自身）。不像 window 或者 self这些属性，它确保可以在有无窗口的各种环境下正常工作。所以，你可以安心的使用 globalThis，不必担心它的运行环境。为便于记忆，你只需要记住，全局作用域中的 this 就是 globalThis。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//es6-shim</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getGlobal = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the only reliable means to get the global object is</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Function(&#x27;return this&#x27;)()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// However, this causes CSP violations in Chrome apps.</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">typeof</span> self !== <span class="string">&#x27;undefined&#x27;</span>) &#123; <span class="keyword">return</span> self; &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">window</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123; <span class="keyword">return</span> <span class="variable language_">window</span>; &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">global</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123; <span class="keyword">return</span> <span class="variable language_">global</span>; &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;unable to locate global object&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> globals = <span class="title function_">getGlobal</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!globals.<span class="property">Reflect</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="title function_">defineProperty</span>(globals, ‘<span class="title class_">Reflect</span>’, &#123;&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以前</span></span><br><span class="line"><span class="keyword">var</span> getGlobal = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> self !== <span class="string">&#x27;undefined&#x27;</span>) &#123; <span class="keyword">return</span> self; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">window</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123; <span class="keyword">return</span> <span class="variable language_">window</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">global</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123; <span class="keyword">return</span> <span class="variable language_">global</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;unable to locate global object&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> globals = <span class="title function_">getGlobal</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (globals.<span class="property">document</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进行dom操作相关&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;不能进行dom操作&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在</span></span><br><span class="line"><span class="keyword">if</span> (globalThis.<span class="property">document</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进行dom操作相关&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;不能进行dom操作&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h5 id="6-空值合并运算符"><a href="#6-空值合并运算符" class="headerlink" title="6.空值合并运算符"></a>6.空值合并运算符</h5><blockquote>
<p><strong>空值合并运算符（*??*）</strong>是一个逻辑运算符。当左侧操作数为 null 或 undefined 时，其返回右侧的操作数。否则返回左侧的操作数。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;kerwin&quot;</span>,</span><br><span class="line">    <span class="attr">introduction</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">introduction</span> || <span class="string">&quot;这个人很懒&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">introduction</span> ?? <span class="string">&quot;这个人很懒&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>??和 || 的区别是什么呢?</strong></p>
<p>他们两个最大的区别就是 ’ ‘和 0，??的左侧 为 ’ ‘或者为 0 的时候，依然会返回左侧的值；</p>
<p>|| 会对左侧的数据进行boolean类型转换，所以’ ‘和 0 会被转换成false,返回右侧的值</p>
<h5 id="7-可选链操作符"><a href="#7-可选链操作符" class="headerlink" title="7.可选链操作符"></a>7.可选链操作符</h5><blockquote>
<p>可选链前面的值如果是null或undefined，则不再执行后面的，之前返回可选链前面的值</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;kerwin&quot;</span>,</span><br><span class="line">    <span class="attr">introduction</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="comment">// location:&#123;</span></span><br><span class="line">    <span class="comment">//     city:&quot;dalian&quot;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj &amp;&amp; obj.<span class="property">location</span> &amp;&amp; obj.<span class="property">location</span>.<span class="property">city</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj?.<span class="property">location</span>?.<span class="property">city</span>)</span><br></pre></td></tr></table></figure>



<h2 id="七-ES12新特性"><a href="#七-ES12新特性" class="headerlink" title="七. ES12新特性"></a>七. ES12新特性</h2><h5 id="1-逻辑赋值操作符"><a href="#1-逻辑赋值操作符" class="headerlink" title="1. 逻辑赋值操作符"></a>1. 逻辑赋值操作符</h5><p>逻辑赋值操作符 ??&#x3D;、&amp;&amp;&#x3D;、 ||&#x3D;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="literal">true</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="literal">false</span></span><br><span class="line"><span class="comment">//a &amp;&amp;= b //false</span></span><br><span class="line">a ||= b ; <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;kerwin&quot;</span>,           </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">introduction</span> = obj.<span class="property">introduction</span>??<span class="string">&quot;很懒&quot;</span></span><br><span class="line">obj.<span class="property">introduction</span>??=<span class="string">&quot;很懒&quot;</span></span><br></pre></td></tr></table></figure>





<h5 id="2-数字分隔符"><a href="#2-数字分隔符" class="headerlink" title="2.数字分隔符"></a>2.数字分隔符</h5><p>这个新特性是为了方便程序员看代码而出现的，如果数字比较大，那么看起来就不是那么一目了然</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> num= <span class="number">123456789</span>；</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>分隔符不仅可以分割十进制，也可以分割二净值或者十六净值的数据，非常好用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> number = <span class="number">1_000_000_000_000</span>;</span><br><span class="line"><span class="keyword">const</span> binary = <span class="number">0b1010_0101_1111_1101</span>;</span><br><span class="line"><span class="keyword">const</span> hex = <span class="number">0xA1_B2_C3</span>;</span><br></pre></td></tr></table></figure>





<h5 id="3-replaceAll"><a href="#3-replaceAll" class="headerlink" title="3. replaceAll"></a>3. replaceAll</h5><blockquote>
<p>所有匹配都会被替代项替换。模式可以是字符串或正则表达式，而替换项可以是字符串或针对每次匹配执行的函数。并返回一个全新的字符串  </p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str =</span><br><span class="line">      <span class="string">&quot;I wish to wish the wish you wish to wish, but if you wish the wish the witch wishes, I won&#x27;t wish the wish you wish to wish. &quot;</span>;</span><br><span class="line"><span class="keyword">const</span> newStr = str.<span class="title function_">replaceAll</span>(<span class="string">&quot;wish&quot;</span>, <span class="string">&quot;kerwin&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newStr);</span><br></pre></td></tr></table></figure>





<h5 id="4-Promise-any"><a href="#4-Promise-any" class="headerlink" title="4.Promise.any"></a>4.Promise.any</h5><p>只要参数实例有一个变成<code>fulfilled</code>状态，包装实例就会变成<code>fulfilled</code>状态；如果所有参数实例都变成<code>rejected</code>状态，包装实例就会变成<code>rejected</code>状态。</p>
<blockquote>
<p><code>Promise.any()</code>跟<code>Promise.race()</code>方法很像，只有一点不同，就是<code>Promise.any()</code>不会因为某个 Promise 变成<code>rejected</code>状态而结束，必须等到所有参数 Promise 变成<code>rejected</code>状态才会结束。</p>
</blockquote>
<h5 id="5-WeakRef"><a href="#5-WeakRef" class="headerlink" title="5. WeakRef"></a>5. WeakRef</h5><blockquote>
<p>在一般情况下，对象的引用是强引用的，这意味着只要持有对象的引用，它就不会被垃圾回收。只有当该对象没有任何的强引用时，垃圾回收才会销毁该对象并且回收该对象所占的内存空间。</p>
<p>而 <code>WeakRef</code> 允许您保留对另一个对象的弱引用，而不会阻止被弱引用对象被垃圾回收。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> wr = <span class="keyword">new</span> <span class="title class_">WeakRef</span>(target);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>WeakRef 实例对象有一个<code>deref()</code>方法，如果原始对象存在，该方法返回原始对象；如果原始对象已经被垃圾回收机制清除，该方法返回<code>undefined</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> wr = <span class="keyword">new</span> <span class="title class_">WeakRef</span>(target);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = wr.<span class="title function_">deref</span>();</span><br><span class="line"><span class="keyword">if</span> (obj) &#123; <span class="comment">// target 未被垃圾回收机制清除</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> like = <span class="keyword">new</span> <span class="title class_">WeakRef</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;like&quot;</span>))</span><br><span class="line"><span class="keyword">let</span> mymap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line">mymap.<span class="title function_">set</span>(like.<span class="title function_">deref</span>(), &#123;</span><br><span class="line">    <span class="attr">click</span>: <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line">like.<span class="title function_">deref</span>().<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> times = mymap.<span class="title function_">get</span>(like.<span class="title function_">deref</span>())</span><br><span class="line">    times.<span class="property">click</span>++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(like.<span class="title function_">deref</span>())</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure>





<h5 id="6-FinalizationRegistry"><a href="#6-FinalizationRegistry" class="headerlink" title="6. FinalizationRegistry"></a>6. FinalizationRegistry</h5><blockquote>
<p>清理器注册表功能 FinalizationRegistry，用来指定目标对象被垃圾回收机制清除以后，所要执行的回调函数。</p>
</blockquote>
<p>首先，新建一个注册表实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> registry = <span class="keyword">new</span> <span class="title class_">FinalizationRegistry</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ....</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">registry.<span class="title function_">register</span>(obj, <span class="string">&quot;some value&quot;</span>);</span><br><span class="line">registry.<span class="title function_">unregister</span>(obj);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> like = <span class="keyword">new</span> <span class="title class_">WeakRef</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;like&quot;</span>))</span><br><span class="line"><span class="keyword">let</span> mymap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line">mymap.<span class="title function_">set</span>(like.<span class="title function_">deref</span>(), &#123;</span><br><span class="line">    <span class="attr">click</span>: <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line">like.<span class="title function_">deref</span>().<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> times = mymap.<span class="title function_">get</span>(like.<span class="title function_">deref</span>())</span><br><span class="line">    times.<span class="property">click</span>++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// registry.register(document.getElementById(&quot;like&quot;), mymap.get(like.deref()));</span></span><br><span class="line">    registry.<span class="title function_">register</span>(like.<span class="title function_">deref</span>(), mymap.<span class="title function_">get</span>(like.<span class="title function_">deref</span>()));</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(like.<span class="title function_">deref</span>())</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> registry = <span class="keyword">new</span> <span class="title class_">FinalizationRegistry</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;被销毁了&quot;</span>, data)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>







<h2 id="八-ES13新特性"><a href="#八-ES13新特性" class="headerlink" title="八.ES13新特性"></a>八.ES13新特性</h2><h5 id="1-私有属性和方法"><a href="#1-私有属性和方法" class="headerlink" title="1. 私有属性和方法"></a>1. 私有属性和方法</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cache</span>&#123;</span><br><span class="line">    #obj  =&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">get</span>(<span class="params">key</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#obj[key]</span><br><span class="line">    &#125;</span><br><span class="line"><span class="title function_">set</span>(<span class="params">key,value</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.#obj[key] =value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cache = <span class="keyword">new</span> <span class="title class_">Cache</span>()</span><br><span class="line">cache.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;kerwin&quot;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="2-静态成员的私有属性和方法"><a href="#2-静态成员的私有属性和方法" class="headerlink" title="2.静态成员的私有属性和方法"></a>2.静态成员的私有属性和方法</h5><blockquote>
<p>我们还可以给类定义静态成员和静态私有函数。类的静态方法可以使用<code>this</code>关键字访问其他的私有或者公有静态成员，</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">class</span> <span class="title class_">Cache</span>&#123;</span><br><span class="line">     <span class="keyword">static</span> #count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">static</span> <span class="title function_">getCount</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="variable language_">this</span>.#count</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    #obj  =&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">get</span>(<span class="params">key</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#obj[key]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">key,value</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.#obj[key] =value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cache = <span class="keyword">new</span> <span class="title class_">Cache</span>()</span><br><span class="line">cache.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;kerwin&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Cache</span>.<span class="title function_">getCount</span>())</span><br></pre></td></tr></table></figure>



<h5 id="3-静态代码块"><a href="#3-静态代码块" class="headerlink" title="3.静态代码块"></a>3.静态代码块</h5><blockquote>
<p>ES13允许在类中通过<code>static</code>关键字定义一系列静态代码块，这些代码块只会在类被创造的时候<strong>执行一次</strong>。这其实有点像一些其他的如C#和Java等面向对象的编程语言的静态构造函数的用法。</p>
</blockquote>
<p>一个类可以定义任意多的静态代码块，这些代码块会和穿插在它们之间的静态成员变量一起按照定义的顺序在类初始化的时候执行一次。我们还可以使用<code>super</code>关键字来访问父类的属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">class</span> <span class="title class_">Cache</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> obj = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">obj</span>.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;kerwin&quot;</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">obj</span>.<span class="title function_">set</span>(<span class="string">&quot;age&quot;</span>,<span class="number">100</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">obj</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Cache</span>.<span class="property">obj</span>)</span><br></pre></td></tr></table></figure>



<h5 id="4-使用in来判断某个对象是否拥有某个私有属性"><a href="#4-使用in来判断某个对象是否拥有某个私有属性" class="headerlink" title="4. 使用in来判断某个对象是否拥有某个私有属性"></a>4. 使用in来判断某个对象是否拥有某个私有属性</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cache</span> &#123;</span><br><span class="line">    #obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">get</span>(<span class="params">key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#obj[key]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#obj[key] = value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">hasObj</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> #obj <span class="keyword">in</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cache = <span class="keyword">new</span> <span class="title class_">Cache</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cache.<span class="title function_">hasObj</span>())</span><br></pre></td></tr></table></figure>



<h5 id="5-支持在最外层写await"><a href="#5-支持在最外层写await" class="headerlink" title="5.支持在最外层写await"></a>5.支持在最外层写await</h5><blockquote>
<p>顶层<code>await</code>只能用在 ES6 模块，不能用在 CommonJS 模块。这是因为 CommonJS 模块的<code>require()</code>是同步加载，如果有顶层<code>await</code>，就没法处理加载了。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&quot;data-1111&quot;</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">ajax</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="6-at函数来索引元素"><a href="#6-at函数来索引元素" class="headerlink" title="6. at函数来索引元素"></a>6. at函数来索引元素</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;kerwin&quot;</span>,<span class="string">&quot;tiechui&quot;</span>,<span class="string">&quot;gangdan&quot;</span>,<span class="string">&quot;xiaoming&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">1</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[arr.<span class="property">length</span>-<span class="number">1</span>]) <span class="comment">//变丑了</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[arr.<span class="property">length</span>-<span class="number">2</span>]) <span class="comment">//变丑了</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">at</span>(<span class="number">1</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">at</span>(-<span class="number">1</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">at</span>(-<span class="number">2</span>))</span><br></pre></td></tr></table></figure>



<h5 id="7-正则匹配的开始和结束索引"><a href="#7-正则匹配的开始和结束索引" class="headerlink" title="7. 正则匹配的开始和结束索引"></a>7. 正则匹配的开始和结束索引</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;今天是2022-11-10&quot;</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(?&lt;year&gt;[0-9]&#123;4&#125;)-(?&lt;month&gt;[0-9]&#123;2&#125;)-(?&lt;day&gt;[0-9]&#123;2&#125;)/</span>d</span><br><span class="line"></span><br><span class="line"><span class="comment">//exec</span></span><br><span class="line"><span class="keyword">let</span> res = reg.<span class="title function_">exec</span>(str)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br></pre></td></tr></table></figure>

<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-67p98HC6-1681921901152)(%E7%AC%94%E8%AE%B0.assets&#x2F;image-20220927105243515.png)]</p>
<h5 id="8-findLast-和findLastIndex-函数"><a href="#8-findLast-和findLastIndex-函数" class="headerlink" title="8.findLast()和findLastIndex()函数"></a>8.findLast()和findLastIndex()函数</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// let res = arr.find(function(value)&#123;</span></span><br><span class="line"><span class="comment">//   return value % 2 === 0</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// let res = arr.findIndex(function(value)&#123;</span></span><br><span class="line"><span class="comment">//   return value % 2 === 0</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// let res = arr.findLast(function(value)&#123;</span></span><br><span class="line"><span class="comment">//   return value % 2 === 0</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="keyword">let</span> res = arr.<span class="title function_">findLastIndex</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> value % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br></pre></td></tr></table></figure>

<h5 id="9-Error对象的Cause属性"><a href="#9-Error对象的Cause属性" class="headerlink" title="9.Error对象的Cause属性"></a>9.Error对象的Cause属性</h5><blockquote>
<p>Error对象多了一个<code>cause</code>属性来指明错误出现的原因。这个属性可以帮助我们为错误添加更多的上下文信息，从而帮助使用者们更好地定位错误。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(kerwin)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;New error 1111111&#x27;</span>,&#123;<span class="attr">cause</span>:<span class="string">&quot;这是因为,,,,,,,,,&quot;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="title function_">getData</span>()</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">cause</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>H5实现3D旋转照片墙教程</title>
    <url>/blog/2024/03/31/H5%E5%AE%9E%E7%8E%B03D%E6%97%8B%E8%BD%AC%E7%85%A7%E7%89%87%E5%A2%99%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="H5实现3D旋转照片墙教程"><a href="#H5实现3D旋转照片墙教程" class="headerlink" title="H5实现3D旋转照片墙教程"></a>H5实现3D旋转照片墙教程</h1><p>在本文中，我们将学习如何使用HTML5、CSS3和JavaScript来创建一个3D旋转照片墙的效果。我们将介绍CSS的<code>transform</code>属性，以及如何使用JavaScript DOM API来实现这个效果。</p>
<h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><h2 id="CSS-transform属性"><a href="#CSS-transform属性" class="headerlink" title="CSS transform属性"></a>CSS transform属性</h2><p>CSS的<code>transform</code>属性允许我们对元素进行2D或3D的转换。这包括旋转、缩放、移动和倾斜等操作。在3D转换中，<code>rotateX</code>、<code>rotateY</code>和<code>translateZ</code>是常用的函数，它们分别用于围绕X轴和Y轴旋转以及沿Z轴移动。</p>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="1-创建HTML结构"><a href="#1-创建HTML结构" class="headerlink" title="1. 创建HTML结构"></a>1. 创建HTML结构</h3><p>首先，我们需要创建一个包含图片的HTML结构。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;perspective&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span> <span class="attr">id</span>=<span class="string">&quot;imgwrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image1.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image2.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 更多图片 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-编写CSS样式"><a href="#2-编写CSS样式" class="headerlink" title="2. 编写CSS样式"></a>2. 编写CSS样式</h3><p>接下来，我们使用CSS来设置照片墙的样式。我们给<code>.perspective</code>类添加<code>perspective</code>属性来定义3D空间的深度，给<code>.wrap</code>类添加<code>transform</code>属性来设置初始的3D旋转。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.perspective</span> &#123;</span><br><span class="line">  <span class="attribute">perspective</span>: <span class="number">800px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">240px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">140px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(-<span class="number">20deg</span>) <span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span><br><span class="line">  <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-使用JavaScript进行动画"><a href="#3-使用JavaScript进行动画" class="headerlink" title="3. 使用JavaScript进行动画"></a>3. 使用JavaScript进行动画</h3><p>现在我们需要使用JavaScript来动态地为每张图片添加3D旋转效果，并使其能够响应用户的鼠标操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> oImg = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> len = oImg.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">var</span> deg = <span class="number">360</span> / len;</span><br><span class="line">  <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">forEach</span>.<span class="title function_">call</span>(oImg, <span class="keyword">function</span>(<span class="params">ele, index</span>) &#123;</span><br><span class="line">    ele.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">&quot;rotateY(&quot;</span> + deg * index + <span class="string">&quot;deg) translateZ(565px)&quot;</span>;</span><br><span class="line">    ele.<span class="property">style</span>.<span class="property">transition</span> = <span class="string">&quot;1s &quot;</span> + (len - index) * <span class="number">0.1</span> + <span class="string">&quot;s&quot;</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onmousedown</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> oWrap = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;imgwrap&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> newX, newY, lastX, lastY, minusX, minusY, rotX = -<span class="number">20</span>, rotY = <span class="number">0</span>;</span><br><span class="line">  lastX = e.<span class="property">clientX</span>;</span><br><span class="line">  lastY = e.<span class="property">clientY</span>;</span><br><span class="line">  oWrap.<span class="property">onmousemove</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    newX = e.<span class="property">clientX</span>;</span><br><span class="line">    newY = e.<span class="property">clientY</span>;</span><br><span class="line">    minusX = newX - lastX;</span><br><span class="line">    minusY = newY - lastY;</span><br><span class="line">    rotX -= minusY * <span class="number">0.2</span>;</span><br><span class="line">    rotY += minusX * <span class="number">0.1</span>;</span><br><span class="line">    oWrap.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">&quot;rotateX(&quot;</span> + rotX + <span class="string">&quot;deg) rotateY(&quot;</span> + rotY + <span class="string">&quot;deg)&quot;</span>;</span><br><span class="line">    lastX = newX;</span><br><span class="line">    lastY = newY;</span><br><span class="line">  &#125;</span><br><span class="line">  oWrap.<span class="property">onmouseup</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    oWrap.<span class="property">onmousemove</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在上述JavaScript代码中，我们首先在页面加载完成后为每张图片设置了一个初始的旋转角度和过渡时间。然后，我们监听<code>mousedown</code>事件来开始旋转，并在<code>mousemove</code>中实时更新旋转角度，从而实现3D旋转的效果。</p>
<h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">ondragstart</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>洛可可白😊3D旋转照片墙<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 层叠样式表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 去掉默认效果 */</span></span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.6</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#222</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 取消选中 */</span></span></span><br><span class="line"><span class="language-css">            user-select: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.perspective</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*子元素透视 场景深度*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">perspective</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 3d */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">240px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">140px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* border: 1px solid red; */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(-<span class="number">20deg</span>) <span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.wrap</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 绝对定位 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">0deg</span>) <span class="built_in">translateZ</span>(<span class="number">0px</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: transparent;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* webkit */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 照片底座 */</span></span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.wrap</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">1200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">1200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">-webkit-radial-gradient</span>(center center, <span class="number">600px</span> <span class="number">600px</span>, <span class="built_in">rgba</span>(<span class="number">122</span>, <span class="number">122</span>, <span class="number">122</span>, .<span class="number">5</span>), <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: -<span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: -<span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 沿着x轴按倒 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">90deg</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 盒子容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;perspective&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span> <span class="attr">id</span>=<span class="string">&quot;imgwrap&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 引入图片值页面 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn-hw-static2.shanhutech.cn/bizhi/staticwp/202209/bec005059c961095de116266433609ad.jpg&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn-hw-static2.shanhutech.cn/bizhi/staticwp/202209/1d9e79967a0e9ef1bb6869f8d2d27d56.jpg&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn-hw-static2.shanhutech.cn/bizhi/staticwp/202208/40f1faa375cb09993ac56d0100247169--1155426306.jpg&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn-hw-static2.shanhutech.cn/bizhi/staticwp/202208/15383340a19d5e66858afec909e8376a--143226042.jpg&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn-hw-static2.shanhutech.cn/bizhi/staticwp/202208/f80a3cf13ed922ae56c295b6e1750b9f--862862084.jpg&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn-hw-static2.shanhutech.cn/bizhi/staticwp/202208/03e3215ba41e9dda4b612d435dc33749--4017768935.jpg&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn-hw-static2.shanhutech.cn/bizhi/staticwp/202208/e46db6533224e5f49e5a0187c46f5f74--583756240.jpg&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn-hw-static2.shanhutech.cn/bizhi/staticwp/202208/c052bcaad5831e744d80408c7f18309e--1643858281.jpg&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn-hw-static2.shanhutech.cn/bizhi/staticwp/202208/097af3d9e33c26ed741a8df79445f2e9--3623425165.jpg&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn-hw-static2.shanhutech.cn/bizhi/staticwp/202208/fb48e4405d33675142f1f96bf5d13433--1464361656.jpg&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn-hw-static2.shanhutech.cn/bizhi/staticwp/202208/47648ad8b435d8c865a0e1720d67f19e--2484210946.jpg&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn-hw-static2.shanhutech.cn/bizhi/staticwp/202211/1908da2b1afec00022ad3b22c02da692--4079323895.jpg&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn-hw-static2.shanhutech.cn/bizhi/staticwp/202211/dc954cdfc5aac06f8e26c1cdc6d02349--1494553420.jpg&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn-hw-static2.shanhutech.cn/bizhi/staticwp/202211/30d74773eeb77bfc4cf9db10e62a80f2--3057522847.jpg&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn-hw-static2.shanhutech.cn/bizhi/staticwp/202210/b07fa9c46502bbb1d715a7034a3a7c42--77324329.jpg&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;p&gt;&lt;/p&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  src=&quot;JS/photo.js&quot; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> oImg = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;img&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> len = oImg.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(len)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> deg = <span class="number">360</span> / len;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> oWrap = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;imgwrap&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var oWrap=document.querySelector(&#x27;.wrap&#x27;);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//页面加载完毕在执行的代码</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">forEach</span>.<span class="title function_">call</span>(oImg, <span class="keyword">function</span>(<span class="params">ele, index, self</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 旋转并沿Z轴平移</span></span></span><br><span class="line"><span class="language-javascript">                    ele.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">&quot;rotateY(&quot;</span> + deg * index + <span class="string">&quot;deg) translateZ(565px)&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//过渡时间1s</span></span></span><br><span class="line"><span class="language-javascript">                    ele.<span class="property">style</span>.<span class="property">transition</span> = <span class="string">&quot;1s &quot;</span> + (len - index) * <span class="number">0.1</span> + <span class="string">&quot;s&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//翻动3D相册</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> newX, newY, lastX, lastY, minusX, minusY, rotX = -<span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript">            rotY = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">onmousedown</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 点击设置初值</span></span></span><br><span class="line"><span class="language-javascript">            lastX = e.<span class="property">clientX</span>;</span></span><br><span class="line"><span class="language-javascript">            lastY = e.<span class="property">clientY</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">onmousemove</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                newX = e.<span class="property">clientX</span>;</span></span><br><span class="line"><span class="language-javascript">                newY = e.<span class="property">clientY</span>;</span></span><br><span class="line"><span class="language-javascript">                minusX = newX - lastX;</span></span><br><span class="line"><span class="language-javascript">                minusY = newY - lastY;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                rotX -= minusY * <span class="number">0.2</span>;</span></span><br><span class="line"><span class="language-javascript">                rotY += minusX * <span class="number">0.1</span>;</span></span><br><span class="line"><span class="language-javascript">                oWrap.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">&quot;rotateX(&quot;</span> + rotX + <span class="string">&quot;deg) rotateY(&quot;</span> + rotY + <span class="string">&quot;deg)&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                lastX = newX;</span></span><br><span class="line"><span class="language-javascript">                lastY = newY;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">onmouseup</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//鼠标松开</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">onmousemove</span> = <span class="literal">null</span>; <span class="comment">//清除鼠标移动</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过上述步骤，我们成功地创建了一个3D旋转照片墙的效果。这个实例展示了如何结合HTML、CSS和JavaScript来实现复杂的3D动画效果。通过学习和实践，你可以更深入地理解这些技术，并将其应用到你的项目中。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Gsap基本使用</title>
    <url>/blog/2024/02/16/Gsap%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Gsap基本使用"><a href="#Gsap基本使用" class="headerlink" title="Gsap基本使用"></a>Gsap基本使用</h1><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h2><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">// power shell</span><br><span class="line">npm i gsap </span><br></pre></td></tr></table></figure>

<h2 id="2-导入"><a href="#2-导入" class="headerlink" title="2.导入"></a>2.导入</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; gsap &#125; <span class="keyword">from</span> <span class="string">&quot;gsap&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="3-编写配置文件"><a href="#3-编写配置文件" class="headerlink" title="3.编写配置文件"></a>3.编写配置文件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">	<span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">		config.<span class="property">resolve</span>.<span class="property">alias</span>.<span class="title function_">set</span>(<span class="string">&#x27;gsap&#x27;</span>, path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;node_modules&#x27;</span>, <span class="string">&#x27;gsap&#x27;</span>)); <span class="comment">// 设置GSAP别名</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4-使用gsap"><a href="#4-使用gsap" class="headerlink" title="4.使用gsap"></a>4.使用gsap</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; gsap &#125; <span class="keyword">from</span> <span class="string">&quot;gsap&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">flow</span> =(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    gsap.<span class="title function_">set</span>(<span class="string">&quot;.flow&quot;</span>,&#123;</span><br><span class="line">        <span class="attr">y</span>:<span class="string">&quot;-20px&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">	gsap.<span class="title function_">to</span>(<span class="string">&quot;.form&quot;</span>, &#123;</span><br><span class="line">		<span class="attr">y</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">		<span class="attr">duration</span>: <span class="number">1</span>,</span><br><span class="line">		<span class="attr">repeat</span>: -<span class="number">1</span>,</span><br><span class="line">		<span class="attr">yoyo</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="attr">ease</span>: <span class="string">&quot;power1.inOut&quot;</span></span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-全部代码"><a href="#5-全部代码" class="headerlink" title="5.全部代码"></a>5.全部代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view class=&quot;main&quot;&gt;</span><br><span class="line">		&lt;view class=&quot;flow form&quot;&gt;</span><br><span class="line">			&lt;input type=&quot;text&quot; placeholder=&quot;账号&quot; v-model=&quot;user.acc&quot;&gt;</span><br><span class="line">			&lt;input type=&quot;text&quot; placeholder=&quot;密码&quot; v-model=&quot;user.pwd&quot;&gt;</span><br><span class="line">			&lt;button size=&quot;mini&quot; type=&quot;default&quot; @click=&quot;loginIn&quot;&gt;登录&lt;/button&gt;</span><br><span class="line">			&lt;button size=&quot;mini&quot; type=&quot;default&quot; @click=&quot;reset&quot;&gt;取消&lt;/button&gt;</span><br><span class="line">		&lt;/view&gt;</span><br><span class="line">		&lt;view class=&quot;dots&quot;&gt;</span><br><span class="line">			&lt;view class=&quot;dot&quot;&gt;&lt;/view&gt;</span><br><span class="line">			&lt;view class=&quot;dot&quot;&gt;&lt;/view&gt;</span><br><span class="line">			&lt;view class=&quot;dot&quot;&gt;&lt;/view&gt;</span><br><span class="line">		&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">		&lt;view class=&quot;bg-container&quot;&gt;&lt;/view&gt;</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	import &#123;</span><br><span class="line">		flow,</span><br><span class="line">		showMessage</span><br><span class="line">	&#125; from &#x27;../../gsap/index.js&#x27;</span><br><span class="line">	import &#123;</span><br><span class="line">		$login</span><br><span class="line">	&#125; from &#x27;../../api/index.js&#x27;</span><br><span class="line">	export default &#123;</span><br><span class="line">		data() &#123;</span><br><span class="line">			return &#123;</span><br><span class="line">				user: &#123;</span><br><span class="line">					acc: &#x27;&#x27;,</span><br><span class="line">					pwd: &#x27;&#x27;,</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		mounted() &#123;</span><br><span class="line">			flow();</span><br><span class="line">		&#125;,</span><br><span class="line">		methods: &#123;</span><br><span class="line">			async loginIn() &#123;</span><br><span class="line">				if (this.user.acc.length &lt;= 0 || this.user.pwd.length &lt;= 0) &#123;</span><br><span class="line">					showMessage(&#x27;请输入账号或密码...&#x27;);</span><br><span class="line">					return;</span><br><span class="line">				&#125;</span><br><span class="line">				let data = await $login(this.user);</span><br><span class="line">				if (data.length &gt;= 1) &#123;</span><br><span class="line">					uni.setStorage(&#123;</span><br><span class="line">						key: &#x27;account&#x27;,</span><br><span class="line">						data: this.user.acc,</span><br><span class="line">						success: (res) =&gt; &#123;</span><br><span class="line">							console.log(&#x27;记录登录+1&#x27;);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;)</span><br><span class="line">					uni.navigateTo(&#123;</span><br><span class="line">						url: &#x27;/pages/index/index&#x27;,</span><br><span class="line">						animationType: &#x27;slide-in-right&#x27;</span><br><span class="line">					&#125;)</span><br><span class="line">				&#125; else &#123;</span><br><span class="line">					showMessage(&#x27;账号或密码错误...&#x27;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br><span class="line">			reset() &#123;</span><br><span class="line">				this.user.acc = &#x27;&#x27;;</span><br><span class="line">				this.user.pwd = &#x27;&#x27;;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		onLoad() &#123;</span><br><span class="line">			uni.getStorage(&#123;</span><br><span class="line">				key: &#x27;account&#x27;,</span><br><span class="line">				success: (res) =&gt; &#123;</span><br><span class="line">					if (res.data.length &gt;= 0) &#123;</span><br><span class="line">						uni.navigateTo(&#123;</span><br><span class="line">							url: &#x27;/pages/index/index&#x27;,</span><br><span class="line">							animationType: &#x27;slide-in-right&#x27;</span><br><span class="line">						&#125;)</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">	* &#123;</span><br><span class="line">		--hei: 40px;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	.main &#123;</span><br><span class="line">		width: 100vw;</span><br><span class="line">		height: 100vh;</span><br><span class="line">		display: flex;</span><br><span class="line">		align-items: center;</span><br><span class="line">		justify-content: center;</span><br><span class="line">		flex-direction: column;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	.form &#123;</span><br><span class="line">		width: 70%;</span><br><span class="line">		height: 300px;</span><br><span class="line">		border-radius: 10px;</span><br><span class="line">		border: 4px solid orange;</span><br><span class="line">		display: flex;</span><br><span class="line">		align-items: center;</span><br><span class="line">		justify-content: center;</span><br><span class="line">		flex-direction: column;</span><br><span class="line">		padding: 30px;</span><br><span class="line">		box-shadow: 0px 3px 10px 2px #fff;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	button &#123;</span><br><span class="line">		color: white;</span><br><span class="line">		width: 100%;</span><br><span class="line">		height: var(--hei);</span><br><span class="line">		line-height: var(--hei);</span><br><span class="line">		margin: 10px 0;</span><br><span class="line">		background-color: orange;</span><br><span class="line">		border: none;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	button:active &#123;</span><br><span class="line">		color: white;</span><br><span class="line">		background-color: rgba(255, 165, 0, .4);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	input &#123;</span><br><span class="line">		width: 100%;</span><br><span class="line">		font-size: 14px;</span><br><span class="line">		height: var(--hei);</span><br><span class="line">		margin: 10px 0;</span><br><span class="line">		border: 2px solid orange;</span><br><span class="line">		padding: 0 10px;</span><br><span class="line">		border-radius: 6px;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	.dots &#123;</span><br><span class="line">		width: 40%;</span><br><span class="line">		height: 20px;</span><br><span class="line">		display: flex;</span><br><span class="line">		flex-direction: row;</span><br><span class="line">		align-items: center;</span><br><span class="line">		justify-content: space-between;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	.dot &#123;</span><br><span class="line">		width: 20px;</span><br><span class="line">		height: 20px;</span><br><span class="line">		background-color: orange;</span><br><span class="line">		border-radius: 50%;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Gsap</tag>
      </tags>
  </entry>
  <entry>
    <title>H5实现Web ECharts教程：轻松创建动态数据图表</title>
    <url>/blog/2024/03/24/H5%E5%AE%9E%E7%8E%B0Web-ECharts%E6%95%99%E7%A8%8B%EF%BC%9A%E8%BD%BB%E6%9D%BE%E5%88%9B%E5%BB%BA%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E5%9B%BE%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="H5实现Web-ECharts教程：轻松创建动态数据图表"><a href="#H5实现Web-ECharts教程：轻松创建动态数据图表" class="headerlink" title="H5实现Web ECharts教程：轻松创建动态数据图表"></a>H5实现Web ECharts教程：轻松创建动态数据图表</h1><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><blockquote>
<p>资源地址：</p>
<p><a href="https://download.csdn.net/download/interest_ing_/89020922?spm=1001.2014.3001.5503">数据可视化之旅：探索ECharts在H5中的丰富示例与应用</a></p>
</blockquote>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>ECharts是一款由百度前端团队开发的开源可视化库，它提供了丰富的图表类型和灵活的配置选项，使得开发者能够轻松地在Web页面上创建交互式的图表。无论是简单的柱状图、折线图，还是复杂的关系图、地图，ECharts都能够提供强大的支持。</p>
<h2 id="ECharts概述"><a href="#ECharts概述" class="headerlink" title="ECharts概述"></a>ECharts概述</h2><p>ECharts的核心理念是“让数据可视化变得简单”，它不仅支持多种数据格式，还提供了丰富的API接口和详细的配置项，使得开发者可以根据需求定制图表。ECharts的另一个亮点是其优秀的交互性能，包括数据缩放、拖拽、值域漫游等，为用户提供了丰富的交互体验。</p>
<h2 id="ECharts官网与资源下载"><a href="#ECharts官网与资源下载" class="headerlink" title="ECharts官网与资源下载"></a>ECharts官网与资源下载</h2><p>ECharts的官方网站是 <a href="https://github.com/apache/echarts">ECharts GitHub</a>，你可以在这里找到最新的开发文档、示例代码以及源代码。ECharts的使用非常简单，你可以直接通过CDN引入，或者下载源文件进行本地部署。</p>
<h3 id="CDN引入"><a href="#CDN引入" class="headerlink" title="CDN引入"></a>CDN引入</h3><p>通过CDN是引入ECharts最快捷的方式，只需在HTML文件的<code>&lt;head&gt;</code>标签中添加以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/echarts@5.3.3/dist/echarts.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="源文件下载"><a href="#源文件下载" class="headerlink" title="源文件下载"></a>源文件下载</h3><p>如果你需要对ECharts进行更深入的定制或者贡献代码，可以在ECharts的GitHub仓库中下载最新的源文件。</p>
<h2 id="创建第一个ECharts图表"><a href="#创建第一个ECharts图表" class="headerlink" title="创建第一个ECharts图表"></a>创建第一个ECharts图表</h2><p>以下是一个简单的ECharts图表示例，展示了如何在H5页面中创建一个基本的柱状图。</p>
<ol>
<li><strong>创建HTML结构</strong>：</li>
</ol>
<p>首先，我们需要创建一个具有确定宽高的<code>&lt;div&gt;</code>元素，用于放置ECharts图表。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px;height:400px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>引入ECharts库</strong>：</li>
</ol>
<p>在页面中通过<code>&lt;script&gt;</code>标签引入ECharts库。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;echarts.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>初始化ECharts实例</strong>：</li>
</ol>
<p>在<code>&lt;script&gt;</code>标签内，通过<code>echarts.init</code>方法初始化一个ECharts实例，并将其绑定到我们之前创建的<code>&lt;div&gt;</code>元素上。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;main&#x27;</span>));</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>配置图表选项</strong>：</li>
</ol>
<p>定义一个<code>option</code>对象，包含图表的类型、标题、轴、提示框等配置信息。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">  <span class="attr">title</span>: &#123;</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&#x27;ECharts 入门示例&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">tooltip</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">legend</span>: &#123;</span><br><span class="line">    <span class="attr">data</span>: [<span class="string">&#x27;销量&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">xAxis</span>: &#123;</span><br><span class="line">    <span class="attr">data</span>: [<span class="string">&#x27;衬衫&#x27;</span>, <span class="string">&#x27;羊毛衫&#x27;</span>, <span class="string">&#x27;雪纺衫&#x27;</span>, <span class="string">&#x27;裤子&#x27;</span>, <span class="string">&#x27;高跟鞋&#x27;</span>, <span class="string">&#x27;袜子&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">yAxis</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">series</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;销量&#x27;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><strong>渲染图表</strong>：</li>
</ol>
<p>使用<code>setOption</code>方法将配置项应用到ECharts实例上，渲染图表。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myChart.<span class="title function_">setOption</span>(option);</span><br></pre></td></tr></table></figure>

<h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ECharts<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入刚刚下载的 ECharts 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;echarts.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- cdn引入 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src=&quot;https://cdn.jsdelivr.net/npm/echarts@5.3.3/dist/echarts.js&quot;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 为 ECharts 准备一个定义了宽高的 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px;height:400px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 基于准备好的dom，初始化echarts实例</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;main&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 指定图表的配置项和数据</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> option = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//标题</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">title</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">text</span>: <span class="string">&#x27;ECharts 入门示例&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//提示框</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">tooltip</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//柱状元素名字</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">legend</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">data</span>: [<span class="string">&#x27;销量&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//X轴</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">xAxis</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">data</span>: [<span class="string">&#x27;衬衫&#x27;</span>, <span class="string">&#x27;羊毛衫&#x27;</span>, <span class="string">&#x27;雪纺衫&#x27;</span>, <span class="string">&#x27;裤子&#x27;</span>, <span class="string">&#x27;高跟鞋&#x27;</span>, <span class="string">&#x27;袜子&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//Y轴</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">yAxis</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">series</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;销量&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>]</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 使用刚指定的配置项和数据显示图表。</span></span></span><br><span class="line"><span class="language-javascript">      myChart.<span class="title function_">setOption</span>(option);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过上述步骤，我们成功地在H5页面中创建了一个简单的柱状图。ECharts的强大功能和灵活性使得数据可视化变得简单而高效。无论是数据分析师、前端开发者还是普通用户，都可以利用ECharts快速地将数据转化为直观、美观的图表，从而更好地理解和传达信息。</p>
<p><strong>如果对你有帮助，点赞👍、收藏💖、关注🔔是我更新的动力！👋🌟🚀</strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>ECharts</tag>
      </tags>
  </entry>
  <entry>
    <title>快速上手：使用Hexo搭建个人博客</title>
    <url>/blog/2022/02/09/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="快速上手：使用Hexo搭建并自定义个人博客"><a href="#快速上手：使用Hexo搭建并自定义个人博客" class="headerlink" title="快速上手：使用Hexo搭建并自定义个人博客"></a>快速上手：使用Hexo搭建并自定义个人博客</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>Hexo 是一个轻量级、简洁的静态博客框架，它允许你使用 Markdown 语法编写文章，并通过简单的命令生成静态网页。本文将指导你如何从零开始搭建一个基于 Hexo 的个人博客，选择并安装一个新主题，以及如何部署到 Gitee 上。</p>
<h2 id="1-安装-Hexo"><a href="#1-安装-Hexo" class="headerlink" title="1. 安装 Hexo"></a>1. 安装 Hexo</h2><p>首先，确保你的计算机上安装了 Node.js 和 npm。然后，通过 npm 安装 Hexo 命令行工具。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 Hexo CLI</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化一个新的 Hexo 博客项目</span></span><br><span class="line">hexo init blog</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入博客项目目录</span></span><br><span class="line">cd blog</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装依赖</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h2 id="2-启动本地服务器"><a href="#2-启动本地服务器" class="headerlink" title="2. 启动本地服务器"></a>2. 启动本地服务器</h2><p>在 Hexo 项目目录中，启动本地服务器以实时预览你的博客。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动本地服务器</span></span><br><span class="line">hexo server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者使用简写</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<h2 id="3-创建你的文章"><a href="#3-创建你的文章" class="headerlink" title="3. 创建你的文章"></a>3. 创建你的文章</h2><p>使用 Hexo 创建新文章。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一篇新文章</span></span><br><span class="line">hexo new &quot;第一篇文章&quot;</span><br></pre></td></tr></table></figure>

<h2 id="4-安装并应用新主题"><a href="#4-安装并应用新主题" class="headerlink" title="4. 安装并应用新主题"></a>4. 安装并应用新主题</h2><p>选择一个 Hexo 主题，例如 Ayer。安装并应用到你的 Hexo 博客。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 Ayer 主题</span></span><br><span class="line">npm install hexo-theme-ayer --save</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者对于 Hexo 版本低于 5.0</span></span><br><span class="line">git clone https://gitee.com/mirrors/ayer.git themes/ayer</span><br></pre></td></tr></table></figure>

<h2 id="5-配置主题"><a href="#5-配置主题" class="headerlink" title="5. 配置主题"></a>5. 配置主题</h2><p>在 Hexo 的配置文件 <code>_config.yml</code> 中设置主题。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 _config.yml 中设置主题</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">ayer</span></span><br></pre></td></tr></table></figure>

<h2 id="6-自定义主题"><a href="#6-自定义主题" class="headerlink" title="6. 自定义主题"></a>6. 自定义主题</h2><p>根据你选择的主题，编辑主题的配置文件来自定义你的博客。例如，Ayer 主题的配置文件通常位于 <code>themes/ayer/_config.yml</code>。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开主题配置文件进行自定义</span></span><br><span class="line"><span class="comment"># themes/ayer/_config.yml</span></span><br></pre></td></tr></table></figure>

<p>具体配置可以参考我的。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 侧边栏菜单</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span></span><br><span class="line">  <span class="string">归档:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags</span></span><br><span class="line">  <span class="string">旅行:</span> <span class="string">/tags/旅行/</span></span><br><span class="line">  <span class="string">壁纸:</span> <span class="string">https://wallpaper.seenav.cn/</span></span><br><span class="line">  <span class="string">友链:</span> <span class="string">/friends</span></span><br><span class="line">  <span class="string">关于我:</span> <span class="string">/2022/01/01/关于我/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 站点次标题和打字动效</span></span><br><span class="line"><span class="comment"># https://github.com/mattboldt/typed.js</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否开启动效</span></span><br><span class="line">  <span class="attr">text:</span> <span class="string">面朝大海，春暖花开</span> <span class="comment"># 显示的文字</span></span><br><span class="line">  <span class="attr">text2:</span> <span class="string">一生努力，一生被爱</span> <span class="comment"># 滚动播放，如果不需要可以留空</span></span><br><span class="line">  <span class="attr">text3:</span> <span class="string">想要的都拥有，得不到的都释怀</span> <span class="comment"># 最多支持三段文字</span></span><br><span class="line">  <span class="attr">startDelay:</span> <span class="number">0</span> <span class="comment"># 延迟时间</span></span><br><span class="line">  <span class="attr">typeSpeed:</span> <span class="number">200</span> <span class="comment"># 打字速度</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="literal">true</span> <span class="comment"># 是否循环</span></span><br><span class="line">  <span class="attr">backSpeed:</span> <span class="number">100</span> <span class="comment"># 回退速度</span></span><br><span class="line">  <span class="attr">showCursor:</span> <span class="literal">true</span> <span class="comment"># 是否显示光标</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站图标和侧边栏logo</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/blog/favicon.ico</span></span><br><span class="line"><span class="attr">logo:</span> <span class="string">/blog/images/ayer.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 封面配置</span></span><br><span class="line"><span class="comment"># enable-是否启用封面；path-封面背景图；logo-封面logo</span></span><br><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/blog/images/cover1.jpg</span> <span class="comment"># /source/images目录下附送多张美图，可更换</span></span><br><span class="line">  <span class="attr">logo:</span> <span class="literal">false</span> <span class="comment">#/images/ayer.svg，如果不要直接设置成false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 页面顶部进度条</span></span><br><span class="line"><span class="attr">progressBar:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 告示板模块</span></span><br><span class="line"><span class="attr">broadcast:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># true开启，false关闭</span></span><br><span class="line">  <span class="attr">type:</span> <span class="number">2</span> <span class="comment"># 1：自定义输入，2：一言api(https://hitokoto.cn/)</span></span><br><span class="line">  <span class="attr">text:</span> <span class="string">一个安静优雅的hexo主题，快速且响应式。</span> <span class="comment"># type为1时有效</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章配置</span></span><br><span class="line"><span class="comment"># 文章太长，截断按钮文字(在需要截断的行增加此标记：&lt;!--more--&gt;)</span></span><br><span class="line"><span class="attr">excerpt_link:</span> <span class="string">阅读更多...</span></span><br><span class="line"><span class="comment"># 如果你嫌每篇文章手动加more标记比较麻烦，又不想在首页全文显示，可以把excerpt_all设置成true，这样首页只会显示文章归档</span></span><br><span class="line"><span class="attr">excerpt_all:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启代码复制按钮</span></span><br><span class="line"><span class="attr">copy_btn:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 是否开启文章分享按钮</span></span><br><span class="line"><span class="attr">share_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 国内的社交平台(If you are not in China, maybe you prefer to set:false)</span></span><br><span class="line"><span class="attr">share_china:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 文章分享文字</span></span><br><span class="line"><span class="attr">share_text:</span> <span class="string">分享</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页文字</span></span><br><span class="line"><span class="attr">nav_text:</span></span><br><span class="line">  <span class="attr">page_prev:</span> <span class="string">上一页</span></span><br><span class="line">  <span class="attr">page_next:</span> <span class="string">下一页</span></span><br><span class="line">  <span class="attr">post_prev:</span> <span class="string">上一篇</span></span><br><span class="line">  <span class="attr">post_next:</span> <span class="string">下一篇</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章页是否显示目录</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章中的图片是否支持点击放大</span></span><br><span class="line"><span class="attr">image_viewer:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://github.com/willin/hexo-wordcount</span></span><br><span class="line"><span class="comment"># 是否开启字数统计(关闭请设置enable为false)</span></span><br><span class="line"><span class="comment"># 也可以单独在md文件里Front-matter设置`no_word_count: true`属性，来自定义关闭字数统计</span></span><br><span class="line"><span class="attr">word_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 只在文章详情显示(不在首页显示)</span></span><br><span class="line">  <span class="attr">only_article_visit:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打赏</span></span><br><span class="line"><span class="comment"># 打赏type设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏</span></span><br><span class="line"><span class="attr">reward_type:</span> <span class="number">2</span></span><br><span class="line"><span class="comment"># 打赏wording</span></span><br><span class="line"><span class="attr">reward_wording:</span> <span class="string">&quot;请我喝杯奶茶吧~&quot;</span></span><br><span class="line"><span class="comment"># 支付宝二维码图片地址，跟你设置logo的方式一样。比如：/images/alipay.jpg</span></span><br><span class="line"><span class="attr">alipay:</span> <span class="string">/images/alipay.jpg</span></span><br><span class="line"><span class="comment"># 微信二维码图片地址</span></span><br><span class="line"><span class="attr">weixin:</span> <span class="string">/images/wechat.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 版权声明</span></span><br><span class="line"><span class="comment"># 版权声明type设定：0-关闭版权声明； 1-文章对应的md文件里有copyright: true属性，才有版权声明； 2-所有文章均有版权声明</span></span><br><span class="line"><span class="attr">copyright_type:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否启用搜索</span></span><br><span class="line"><span class="comment"># 需要安装hexo-generator-searchdb(https://github.com/theme-next/hexo-generator-searchdb)</span></span><br><span class="line"><span class="attr">search:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RSS订阅(先安装hexo-generator-feed插件，再去博客根目录config进行配置)</span></span><br><span class="line"><span class="comment"># 不想显示可以直接留空</span></span><br><span class="line"><span class="attr">rss:</span> <span class="string">/atom.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否启用黑夜模式开关</span></span><br><span class="line"><span class="attr">darkmode:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态背景效果: 0-关闭，1-动态线条(跟随鼠标)</span></span><br><span class="line"><span class="attr">canvas_bg:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义鼠标样式，直接替换/images/mouse.cur文件</span></span><br><span class="line"><span class="attr">mouse:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/blog/images/mouse.cur</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠标点击效果：0-关闭，1-爱心，2-爆炸烟花，3-粒子烟花</span></span><br><span class="line"><span class="attr">click_effect:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 页面宽度自定义（不建议修改，可能造成布局混乱），article_width文章宽度，sidebar_width侧边栏宽度</span></span><br><span class="line"><span class="attr">layout:</span></span><br><span class="line">  <span class="attr">article_width:</span> <span class="string">80rem</span></span><br><span class="line">  <span class="attr">sidebar_width:</span> <span class="string">8rem</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GitHub Ribbons-封面右上角的forkme，换样式直接在source/images目录下替换forkme图片</span></span><br><span class="line"><span class="attr">github:</span></span><br><span class="line">  <span class="comment"># (关闭请设置为false)</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://gitee.com/bestwishes0203</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网易云音乐插件</span></span><br><span class="line"><span class="attr">music:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 播放器尺寸类型(1：小尺寸、2：大尺寸)</span></span><br><span class="line">  <span class="attr">type:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">id:</span> <span class="number">1497588709</span> <span class="comment"># 网易云分享的音乐ID(更换音乐请更改此配置项)</span></span><br><span class="line">  <span class="attr">autoPlay:</span> <span class="literal">false</span> <span class="comment"># 是否开启自动播放</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问量统计(不蒜子)</span></span><br><span class="line"><span class="attr">busuanzi:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 友盟cnzz统计(url填js代码src链接)</span></span><br><span class="line"><span class="attr">cnzz:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://s9.cnzz.com/z_stat.php?id=1278069914&amp;web_id=1278069914</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Google Analytics</span></span><br><span class="line"><span class="attr">google_analytics:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 百度统计</span></span><br><span class="line"><span class="attr">baidu_analytics:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mathjax数学公式</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Katex数学公式(allpost设置为false时只有头部设置math:true的文章才开启)</span></span><br><span class="line"><span class="comment"># 需要更换hexo渲染器，npm un hexo-renderer-marked -S &amp;&amp; npm i hexo-renderer-markdown-it-katex -S</span></span><br><span class="line"><span class="attr">katex:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># true</span></span><br><span class="line">  <span class="attr">allpost:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">copy_tex:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mermaid流程图 三个选项缺一不可(https://mermaid-js.github.io/mermaid/)</span></span><br><span class="line"><span class="attr">mermaid:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">cdn:</span> <span class="string">https://cdn.staticfile.org/mermaid/8.14.0/mermaid.min.js</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">forest</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站成立年份(默认为 2019，若填入年份小于当前年份，则显示为 2018-2019 类似的格式)</span></span><br><span class="line"><span class="attr">since:</span> <span class="number">2022</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ICP备案信息尾部显示</span></span><br><span class="line"><span class="attr">icp:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">&quot;https://beian.miit.gov.cn/&quot;</span> <span class="comment"># 备案链接</span></span><br><span class="line">  <span class="attr">text:</span> <span class="string">&quot;浙ICP备88888888&quot;</span> <span class="comment"># 备案信息</span></span><br><span class="line"><span class="comment"># 公安备案信息尾部显示</span></span><br><span class="line"><span class="attr">gongan:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">/images/beian.png</span> <span class="comment">#公安备案图片</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">&quot;http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=01234567890123&quot;</span> <span class="comment">#公安备案链接</span></span><br><span class="line">  <span class="attr">text:</span> <span class="string">&quot;浙公网安备01234567890123号&quot;</span> <span class="comment">#公安备案信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 友情链接</span></span><br><span class="line"><span class="attr">friends_link:</span></span><br><span class="line">  <span class="comment"># Ayer主题: #网站名称</span></span><br><span class="line">  <span class="comment">#   #网站地址</span></span><br><span class="line">  <span class="comment">#   url: https://github.com/Shen-Yu/hexo-theme-ayer</span></span><br><span class="line">  <span class="comment">#   #网站图片(可忽略不写)</span></span><br><span class="line">  <span class="comment">#   img: /images/ayer.png</span></span><br><span class="line">  <span class="string">Hexo官网:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://hexo.io</span></span><br><span class="line">    <span class="attr">img:</span> <span class="string">/images/hexo.png</span></span><br><span class="line">  <span class="string">Hexo图表插件:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://github.com/Shen-Yu/hexo-tag-chart</span></span><br><span class="line">    <span class="attr">img:</span> <span class="string">/images/hexo-tag-chart.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 评论：1、Valine(推荐)；2、Gitalk；3、Twikoo;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、Valine[一款快速、简洁且高效的无后端评论系统](https://github.com/xCss/Valine)</span></span><br><span class="line"><span class="comment"># 启用Valine必须先创建leancloud应用， 获取 id|key 填入即可</span></span><br><span class="line"><span class="attr">leancloud:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">app_id:</span> <span class="comment">#</span></span><br><span class="line">  <span class="attr">app_key:</span> <span class="comment">#</span></span><br><span class="line"><span class="comment"># Valine配置</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># 是否启用</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">monsterid</span> <span class="comment"># 头像样式(https://valine.js.org/avatar.html)</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">给我的文章加点评论吧~</span> <span class="comment"># placeholder</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、Gitalk(https://github.com/gitalk/gitalk)</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># true</span></span><br><span class="line">  <span class="attr">clientID:</span> <span class="comment"># GitHub Application Client ID</span></span><br><span class="line">  <span class="attr">clientSecret:</span> <span class="comment"># Client Secret</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="comment"># Repository name</span></span><br><span class="line">  <span class="attr">owner:</span> <span class="comment"># GitHub ID</span></span><br><span class="line">  <span class="attr">admin:</span> <span class="comment"># GitHub ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、Twikoo(https://github.com/imaegoo/twikoo)</span></span><br><span class="line"><span class="attr">twikoo:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">envId:</span> <span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首页广告配置</span></span><br><span class="line"><span class="comment"># 可以根据需要自行增加ad_3，ad_4...，留空则不显示，建议图片和url不要带ad等关键词，否则可能会被adblock等插件屏蔽</span></span><br><span class="line"><span class="comment"># ads:</span></span><br><span class="line"><span class="comment">#   ad_1:</span></span><br><span class="line"><span class="comment">#     title: 云服务器限时秒杀</span></span><br><span class="line"><span class="comment">#     img: https://pic.imgdb.cn/item/62174b452ab3f51d912a5ccc.jpg</span></span><br><span class="line"><span class="comment">#     url: https://curl.qcloud.com/kvO7hb43</span></span><br><span class="line"><span class="comment">#     width: 300</span></span><br><span class="line"><span class="comment">#   ad_2:</span></span><br><span class="line"><span class="comment">#     title: vultr优惠vps</span></span><br><span class="line"><span class="comment">#     img: https://pic.imgdb.cn/item/62174b452ab3f51d912a5cd7.png</span></span><br><span class="line"><span class="comment">#     url: https://www.vultr.com/?ref=8630075</span></span><br><span class="line"><span class="comment">#     width: 300</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站开启加密访问，密码可设置任何字符</span></span><br><span class="line"><span class="attr">lock:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里还可以替换博客<code>themes</code>文件夹下的静态文件来美化自己的博客。</p>
<h2 id="7-关联博客到-Gitee"><a href="#7-关联博客到-Gitee" class="headerlink" title="7. 关联博客到 Gitee"></a>7. 关联博客到 Gitee</h2><p>在 <code>_config.yml</code> 文件中配置 Gitee 仓库信息，并部署博客。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置 Git 用户名和邮箱</span></span><br><span class="line">git config --global user.name &quot;your-gitee-username&quot;</span><br><span class="line">git config --global user.email &quot;your-email@example.com&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成 SSH 密钥</span></span><br><span class="line">ssh-keygen -t ed25519 -C &quot;Gitee SSH Key&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加 SSH 公钥到 Gitee 账户</span></span><br><span class="line">cat ~/.ssh/id_ed25519.pub</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试 SSH 连接</span></span><br><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure>

<p>如何生成 SSH 密钥： <a href="https://help.gitee.com/base/account/SSH%E5%85%AC%E9%92%A5%E8%AE%BE%E7%BD%AE">生成 SSH 密钥</a></p>
<p>确保将 <code>your-gitee-username</code> 和 <code>your-repo</code> 替换为你在 Gitee 上的用户名和仓库名。</p>
<h2 id="8-预览和部署"><a href="#8-预览和部署" class="headerlink" title="8. 预览和部署"></a>8. 预览和部署</h2><p>确保一切设置正确，<code>进入本地博客文件夹&gt;右键&gt;在终端打开</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动本地服务器预览博客</span></span><br><span class="line">hexo server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">简写</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>如果满意，部署博客到 Gitee。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清理缓存</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成博客内容</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动本地服务器预览博客（可选）</span></span><br><span class="line">hexo server</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">简写</span></span><br><span class="line">hexo s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 Hexo 部署插件（安装一次即可）</span></span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">部署博客</span></span><br><span class="line">hexo deploy</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">简写</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>如果部署不上去可能是博客跟目录下的 <code>_congif.yml</code> 中<code>deploy&gt;repo</code>没有修改为自己的地址。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">洛可可白的个人博客</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;执着于理想，纯粹于当下&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;有事者,事竟成;破釜沉舟,百二秦关终归楚;苦心人,天不负;卧薪尝胆,三千越甲可吞吴。&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">&quot;生活，旅行，思考，代码&quot;</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">洛可可白</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://bestwishes0203.gitee.io/blog</span></span><br><span class="line"><span class="comment"># root: /</span></span><br><span class="line"><span class="comment"># permalink_style: pretty</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># Apply to the whole site</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Metadata elements</span></span><br><span class="line"><span class="comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br><span class="line"><span class="attr">meta_generator:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="comment">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span></span><br><span class="line"><span class="attr">updated_option:</span> <span class="string">&#x27;mtime&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include / Exclude file(s)</span></span><br><span class="line"><span class="comment">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span></span><br><span class="line"><span class="attr">include:</span></span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line"><span class="attr">ignore:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="comment"># theme: landscape</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">ayer</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@gitee.com:bestwishes0203/blog.git</span></span><br></pre></td></tr></table></figure>

<p>最后,在Gitee仓库中开启 <code>Gitee Pages</code> 服务并且更新内容。</p>
<p><img src="https://img-blog.csdnimg.cn/direct/1320faa54c0f439494217ad6c4b96396.png#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/direct/e16c9f421bf04143834af6e331c7b68c.png#pic_center" alt="在这里插入图片描述"><br>添加或修改博客内容之后，重复 <code>步骤8</code> 即可更新到线上。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>通过以上步骤，你已经成功地搭建了一个基于 Hexo 的个人博客，选择了一个新主题，并将其部署到了 Gitee。现在，你可以开始编写文章，分享你的知识和见解了。</p>
<p>感谢你的访问，期待与你在技术的道路上相遇！👋🌟🚀</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Java日期格式化：掌握时间的艺术</title>
    <url>/blog/2024/04/05/Java%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96%EF%BC%9A%E6%8E%8C%E6%8F%A1%E6%97%B6%E9%97%B4%E7%9A%84%E8%89%BA%E6%9C%AF/</url>
    <content><![CDATA[<h1 id="Java日期格式化：掌握时间的艺术"><a href="#Java日期格式化：掌握时间的艺术" class="headerlink" title="Java日期格式化：掌握时间的艺术"></a>Java日期格式化：掌握时间的艺术</h1><h2 id="Java中的new-Date"><a href="#Java中的new-Date" class="headerlink" title="Java中的new Date()"></a>Java中的new Date()</h2><p>当你创建一个新的Date对象时，它默认不会以任何特定的格式显示。如果你直接打印一个Date对象，会得到类似下面的输出，这是一个由java.lang.Long对象提供的字符串表示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">System.out.println(date); </span><br><span class="line"><span class="comment">// 输出类似于：Fri Mar 28 14:30:00 UTC 2024</span></span><br></pre></td></tr></table></figure>

<p>这个输出是一个简单的文本表示，显示了日期和时间的大致信息，包括星期几、月份、日期、小时、分钟和秒，以及时区信息。但这不是格式化后的日期，而是一个Date对象的toString()方法的默认输出。</p>
<h2 id="Java日期格式化"><a href="#Java日期格式化" class="headerlink" title="Java日期格式化"></a>Java日期格式化</h2><p>在Java编程中，日期和时间的处理是一项基本而重要的任务。Java提供了<code>java.text.SimpleDateFormat</code>类和Java 8引入的<code>java.time.format.DateTimeFormatter</code>类来格式化日期和时间。本文将介绍如何在Java中格式化日期，并提供相应的代码示例。</p>
<h3 id="使用SimpleDateFormat格式化日期"><a href="#使用SimpleDateFormat格式化日期" class="headerlink" title="使用SimpleDateFormat格式化日期"></a>使用<code>SimpleDateFormat</code>格式化日期</h3><p><code>SimpleDateFormat</code>是Java日期格式化的传统方法。它使用模式字符串来定义日期和时间的格式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateFormatExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">formatter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">formattedDate</span> <span class="operator">=</span> formatter.format(date);</span><br><span class="line">        System.out.println(<span class="string">&quot;Formatted date: &quot;</span> + formattedDate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>SimpleDateFormat</code>对象使用<code>&quot;yyyy-MM-dd HH:mm:ss&quot;</code>模式来格式化当前日期和时间。<code>yyyy</code>代表年，<code>MM</code>代表月，<code>dd</code>代表日，<code>HH</code>代表24小时制的小时，<code>mm</code>代表分钟，<code>ss</code>代表秒。</p>
<h3 id="使用DateTimeFormatter格式化日期"><a href="#使用DateTimeFormatter格式化日期" class="headerlink" title="使用DateTimeFormatter格式化日期"></a>使用<code>DateTimeFormatter</code>格式化日期</h3><p>Java 8引入了新的日期和时间API，其中<code>DateTimeFormatter</code>类提供了更强大的日期格式化功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateTimeFormatterExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">dateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">formatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">formattedDateTime</span> <span class="operator">=</span> dateTime.format(formatter);</span><br><span class="line">        System.out.println(<span class="string">&quot;Formatted date and time: &quot;</span> + formattedDateTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，我们首先获取当前的日期和时间作为一个<code>LocalDateTime</code>对象，然后使用<code>DateTimeFormatter</code>来格式化它。<code>ofPattern</code>方法接受一个模式字符串，与<code>SimpleDateFormat</code>的用法类似。</p>
<h2 id="常见日期格式"><a href="#常见日期格式" class="headerlink" title="常见日期格式"></a>常见日期格式</h2><ul>
<li><code>&quot;yyyy-MM-dd&quot;</code>：年-月-日，例如 <code>2024-03-28</code></li>
<li><code>&quot;HH:mm:ss&quot;</code>：24小时制的小时:分钟:秒，例如 <code>14:30:00</code></li>
<li><code>&quot;yyyy-MM-dd HH:mm:ss&quot;</code>：年-月-日 时:分:秒，例如 <code>2024-03-28 14:30:00</code></li>
<li><code>&quot;EEE, MMM d, &#39;&#39;yy&quot;</code>：星期几, 月份缩写 d, 年的后两位，例如 <code>Fri, Mar 28, &#39;24</code></li>
</ul>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>日期格式化是Java中处理日期和时间的基础。无论是使用<code>SimpleDateFormat</code>还是<code>DateTimeFormatter</code>，都能够满足大多数格式化需求。了解和掌握这些工具，将帮助你在Java程序中有效地处理和展示日期和时间信息。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript日期格式化：从原始值到用户友好的字符串</title>
    <url>/blog/2024/04/02/JavaScript%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96%EF%BC%9A%E4%BB%8E%E5%8E%9F%E5%A7%8B%E5%80%BC%E5%88%B0%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="JavaScript日期格式化：从原始值到用户友好的字符串"><a href="#JavaScript日期格式化：从原始值到用户友好的字符串" class="headerlink" title="JavaScript日期格式化：从原始值到用户友好的字符串"></a>JavaScript日期格式化：从原始值到用户友好的字符串</h1><p>在JavaScript中，日期和时间的处理是开发中常见的需求之一。为了在用户界面上显示日期和时间，或者在日志记录中保持一致的格式，我们需要将JavaScript的日期对象格式化为可读的字符串。本文将介绍JavaScript中的日期处理，特别是<code>Date</code>对象的使用，以及如何编写一个函数来格式化日期。</p>
<h2 id="JavaScript中的Date对象"><a href="#JavaScript中的Date对象" class="headerlink" title="JavaScript中的Date对象"></a>JavaScript中的Date对象</h2><p>JavaScript的<code>Date</code>对象是一个内置对象，用于表示特定的日期和时间。它提供了多种方法来获取和设置日期和时间的各个部分，如年、月、日、小时、分钟和秒。</p>
<h3 id="创建Date对象"><a href="#创建Date对象" class="headerlink" title="创建Date对象"></a>创建Date对象</h3><p>你可以通过多种方式创建一个<code>Date</code>对象：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用当前日期和时间创建Date对象</span></span><br><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用指定的年、月、日、时、分、秒创建Date对象</span></span><br><span class="line"><span class="keyword">let</span> specificDate = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2024</span>, <span class="number">3</span>, <span class="number">28</span>, <span class="number">14</span>, <span class="number">30</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h3 id="获取日期和时间的组成部分"><a href="#获取日期和时间的组成部分" class="headerlink" title="获取日期和时间的组成部分"></a>获取日期和时间的组成部分</h3><p><code>Date</code>对象提供了如下方法来获取日期的各个部分：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getFullYear</span>()); <span class="comment">// 获取年份</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getMonth</span>() + <span class="number">1</span>); <span class="comment">// 获取月份（注意月份从0开始）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getDate</span>()); <span class="comment">// 获取日</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getHours</span>()); <span class="comment">// 获取小时</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getMinutes</span>()); <span class="comment">// 获取分钟</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getSeconds</span>()); <span class="comment">// 获取秒</span></span><br></pre></td></tr></table></figure>

<h2 id="格式化日期"><a href="#格式化日期" class="headerlink" title="格式化日期"></a>格式化日期</h2><p>在实际应用中，我们通常需要将<code>Date</code>对象格式化为特定的字符串格式。下面是一个<code>formatDateTime</code>函数的示例，它接受一个日期字符串或<code>Date</code>对象，并返回格式化后的日期字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">formatDateTime</span> = (<span class="params">date</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (date === <span class="string">&quot;&quot;</span> || !date) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>(date);</span><br><span class="line">    <span class="keyword">var</span> y = d.<span class="title function_">getFullYear</span>();</span><br><span class="line">    <span class="keyword">var</span> m = d.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> d = d.<span class="title function_">getDate</span>();</span><br><span class="line">    <span class="keyword">var</span> h = d.<span class="title function_">getHours</span>();</span><br><span class="line">    <span class="keyword">var</span> minute = d.<span class="title function_">getMinutes</span>();</span><br><span class="line">    <span class="keyword">var</span> second = d.<span class="title function_">getSeconds</span>();</span><br><span class="line"></span><br><span class="line">    m = m &lt; <span class="number">10</span> ? (<span class="string">&#x27;0&#x27;</span> + m) : m;</span><br><span class="line">    d = d &lt; <span class="number">10</span> ? (<span class="string">&#x27;0&#x27;</span> + d) : d;</span><br><span class="line">    h = h &lt; <span class="number">10</span> ? (<span class="string">&#x27;0&#x27;</span> + h) : h;</span><br><span class="line">    minute = minute &lt; <span class="number">10</span> ? (<span class="string">&#x27;0&#x27;</span> + minute) : minute;</span><br><span class="line">    second = second &lt; <span class="number">10</span> ? (<span class="string">&#x27;0&#x27;</span> + second) : second;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y + <span class="string">&#x27;-&#x27;</span> + m + <span class="string">&#x27;-&#x27;</span> + d + <span class="string">&#x27; &#x27;</span> + h + <span class="string">&#x27;:&#x27;</span> + minute + <span class="string">&#x27;:&#x27;</span> + second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>假设我们有一个<code>Date</code>对象，我们想要将其格式化为<code>YYYY-MM-DD HH:MM:SS</code>的格式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">formatDateTime</span>(now)); <span class="comment">// 输出：2024-03-28 14:30:00</span></span><br></pre></td></tr></table></figure>

<p>或者我们有一个日期字符串：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> dateString = <span class="string">&quot;2024-03-28T14:30:00.000Z&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">formatDateTime</span>(dateString)); <span class="comment">// 输出：2024-03-28 14:30:00</span></span><br></pre></td></tr></table></figure>

<p>通过上述<code>formatDateTime</code>函数，我们可以轻松地将JavaScript的日期对象转换为用户友好的格式化字符串。这在开发Web应用程序时非常有用，尤其是在需要显示日期和时间信息的场合。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Mockjs基本语法</title>
    <url>/blog/2024/02/14/Mockjs%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Mock-js-基本语法与应用笔记"><a href="#Mock-js-基本语法与应用笔记" class="headerlink" title="Mock.js 基本语法与应用笔记"></a>Mock.js 基本语法与应用笔记</h1><p>Mock.js 是一个基于 JavaScript 的模拟数据生成库，它可以帮助开发者在前端开发过程中模拟后端API，提供测试数据。Mock.js 的主要功能是生成各种类型的模拟数据，包括文本、数字、日期、数组等，同时也支持拦截请求和响应，使得前端可以在不依赖后端API的情况下进行开发和测试。</p>
<h2 id="1-Mock-基本语法"><a href="#1-Mock-基本语法" class="headerlink" title="1. Mock 基本语法"></a>1. Mock 基本语法</h2><h3 id="生成指定字符"><a href="#生成指定字符" class="headerlink" title="生成指定字符"></a>生成指定字符</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Mock</span> <span class="keyword">from</span> <span class="string">&#x27;mockjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;</span><br><span class="line">    <span class="attr">str</span>: <span class="string">&#x27;🤣&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br></pre></td></tr></table></figure>

<p>指定字符和具体个数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;</span><br><span class="line">    <span class="string">&#x27;str|3&#x27;</span>: <span class="string">&#x27;🤣&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>指定字符和区间</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;</span><br><span class="line">    <span class="string">&#x27;str|3-5&#x27;</span>: <span class="string">&#x27;🤣&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="生成随机字符"><a href="#生成随机字符" class="headerlink" title="生成随机字符"></a>生成随机字符</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;</span><br><span class="line">    <span class="comment">// 一串字母</span></span><br><span class="line">    <span class="attr">str</span>: <span class="string">&#x27;@word&#x27;</span></span><br><span class="line">    <span class="comment">// 一个汉字</span></span><br><span class="line">    <span class="comment">// str: &#x27;@cword&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>指定个数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;</span><br><span class="line">    <span class="comment">// 3 个中文汉字</span></span><br><span class="line">    <span class="string">&#x27;str|3&#x27;</span>: <span class="string">&#x27;@cword&#x27;</span></span><br><span class="line">    <span class="comment">// str: &#x27;@cword(3)&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>指定区间</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;</span><br><span class="line">    <span class="comment">// 3 到 5 个中文字符</span></span><br><span class="line">    <span class="string">&#x27;str|3-5&#x27;</span>: <span class="string">&#x27;@cword&#x27;</span></span><br><span class="line">    <span class="comment">// str: &#x27;@cword(3, 5)&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="生成标题和句子"><a href="#生成标题和句子" class="headerlink" title="生成标题和句子"></a>生成标题和句子</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;@ctitle&#x27;</span>,</span><br><span class="line">    <span class="attr">sentence</span>: <span class="string">&#x27;@csentence&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>可以指定标题和句子的汉字长度和范围</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 长度</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;@ctitle(3)&#x27;</span>,</span><br><span class="line">    <span class="attr">sentence</span>: <span class="string">&#x27;@csentence(10)&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 范围</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;@ctitle(3, 5)&#x27;</span>,</span><br><span class="line">    <span class="attr">sentence</span>: <span class="string">&#x27;@csentence(10, 15)&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="生成段落"><a href="#生成段落" class="headerlink" title="生成段落"></a>生成段落</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;@cparagraph&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>指定段落的个数和范围</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意这里 3 代表的是 3 个段落，而不是 3 个中文字符</span></span><br><span class="line"><span class="comment">// 1 个句号是 1 段</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;@cparagraph(3)&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="生成数字"><a href="#生成数字" class="headerlink" title="生成数字"></a>生成数字</h3><p>生成指定数字</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;</span><br><span class="line">    <span class="comment">// number: 20,</span></span><br><span class="line">    <span class="comment">// 如果是数值型的 value 将失去意义，最终都表示竖线右边的 20，一般写个 1</span></span><br><span class="line">    <span class="string">&#x27;number|20&#x27;</span>: <span class="number">1</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>生成数字区间</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;</span><br><span class="line">    <span class="string">&#x27;number|1-10&#x27;</span>: <span class="number">1</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="生成增量-ID"><a href="#生成增量-ID" class="headerlink" title="生成增量 ID"></a>生成增量 ID</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;</span><br><span class="line">        <span class="comment">// 默认 1，每次增加 1</span></span><br><span class="line">        <span class="comment">// id: &#x27;@increment&#x27;</span></span><br><span class="line">        <span class="comment">// 每次增加 10</span></span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;@increment(10)&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="身份证号、姓名、地址"><a href="#身份证号、姓名、地址" class="headerlink" title="身份证号、姓名、地址"></a>身份证号、姓名、地址</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;@id&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;@cname&#x27;</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="string">&#x27;@city(true)&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="生成图片"><a href="#生成图片" class="headerlink" title="生成图片"></a>生成图片</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;</span><br><span class="line">    <span class="comment">// 大小、背景色、前景色、格式、文字</span></span><br><span class="line">    <span class="comment">// 注意：颜色要是十六进制，不支持关键字，例如 red</span></span><br><span class="line">    <span class="attr">image</span>: <span class="string">&quot;@image(&#x27;200x200&#x27;, &#x27;#f00&#x27;, &#x27;#fff&#x27;, &#x27;jpg&#x27;, &#x27;H&#x27;)&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="生成时间"><a href="#生成时间" class="headerlink" title="生成时间"></a>生成时间</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;</span><br><span class="line">    <span class="attr">time1</span>: <span class="string">&#x27;@date&#x27;</span>, <span class="comment">// 年-月-日</span></span><br><span class="line">    <span class="attr">time2</span>: <span class="string">&#x27;@date(&quot;yyyy-MM-dd HH:mm:ss&quot;)&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="指定数组返回的长度和范围"><a href="#指定数组返回的长度和范围" class="headerlink" title="指定数组返回的长度和范围"></a>指定数组返回的长度和范围</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;</span><br><span class="line">    <span class="string">&#x27;list|1-3&#x27;</span>: [&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;@cname&#x27;</span>,</span><br><span class="line">        <span class="attr">address</span>: <span class="string">&#x27;@city(true)&#x27;</span>,</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;@increment(1)&#x27;</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="2-Mock-拦截请求"><a href="#2-Mock-拦截请求" class="headerlink" title="2. Mock 拦截请求"></a>2. Mock 拦截请求</h2><p>增</p>
<p>POST &#x3D;&gt; <code>/api/users</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="regexp">/^\/api\/users/</span>, <span class="string">&#x27;post&#x27;</span>, <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(options.<span class="property">body</span>);</span><br><span class="line">    user.<span class="property">id</span> = data.<span class="property">list</span>.<span class="property">length</span> ? data.<span class="property">list</span>[data.<span class="property">list</span>.<span class="property">length</span> - <span class="number">1</span>].<span class="property">id</span> + <span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    data.<span class="property">list</span>.<span class="title function_">push</span>(user);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">200</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>删</p>
<p>DELETE &#x3D;&gt; <code>/api/users/:id</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="regexp">/^\/api\/user\/.+/</span>, <span class="string">&#x27;delete&#x27;</span>, <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> id = options.<span class="property">url</span>.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">pop</span>();</span><br><span class="line">    <span class="comment">// !注意 id 变成了字符串</span></span><br><span class="line">    <span class="keyword">const</span> idx = data.<span class="property">list</span>.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> === +id);</span><br><span class="line">    data.<span class="property">list</span>.<span class="title function_">splice</span>(idx, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">200</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>改</p>
<p>PUT &#x3D;&gt; <code>/api/users/:id</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="regexp">/^\/api\/users\/.+/</span>, <span class="string">&#x27;put&#x27;</span>, <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(options.<span class="property">body</span>);</span><br><span class="line">    <span class="keyword">const</span> idx = data.<span class="property">list</span>.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> === +user.<span class="property">id</span>);</span><br><span class="line">    data.<span class="property">list</span>[idx] = user;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">200</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>查</p>
<p>GET &#x3D;&gt; <code>/api/users</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="regexp">/^\/api\/user/</span>, <span class="string">&#x27;get&#x27;</span>, <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">        pagenum,</span><br><span class="line">        pagesize,</span><br><span class="line">        query,</span><br><span class="line">        id</span><br><span class="line">    &#125; = qs.<span class="title function_">parse</span>(options.<span class="property">url</span>.<span class="title function_">split</span>(<span class="string">&#x27;?&#x27;</span>)[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (id) &#123;</span><br><span class="line">        <span class="keyword">const</span> user = data.<span class="property">list</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> === +id);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">            user</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 1 10   0 ~ 10</span></span><br><span class="line">    <span class="comment">// 2 10   10 ~ 20</span></span><br><span class="line">    <span class="keyword">const</span> start = (pagenum - <span class="number">1</span>) * pagesize;</span><br><span class="line">    <span class="keyword">const</span> end = pagenum * pagesize;</span><br><span class="line">    <span class="keyword">const</span> total = data.<span class="property">list</span>.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> totalPage = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(data.<span class="property">list</span>.<span class="property">length</span> / pagesize);</span><br><span class="line">    <span class="keyword">let</span> list = [];</span><br><span class="line">    <span class="keyword">if</span> (pagenum &gt; totalPage) &#123;</span><br><span class="line">        list = [];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        list = data.<span class="property">list</span>.<span class="title function_">slice</span>(start, end);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">        list,</span><br><span class="line">        total</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>GET &#x3D;&gt; <code>/api/users/:id</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="regexp">/^\/api\/users\/.+/</span>, <span class="string">&#x27;get&#x27;</span>, <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> id = options.<span class="property">url</span>.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">pop</span>();</span><br><span class="line">    <span class="keyword">const</span> user = data.<span class="property">list</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> === +id);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">        user</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="3-Vue-中测试"><a href="#3-Vue-中测试" class="headerlink" title="3. Vue 中测试"></a>3. Vue 中测试</h2><p><code>User.vue</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;users&quot;&gt;</span><br><span class="line">        &lt;el-card class=&quot;box-card&quot;&gt;</span><br><span class="line">            &lt;el-table :data=&quot;tableData&quot; style=&quot;width: 100%&quot;&gt;</span><br><span class="line">                &lt;el-table-column prop=&quot;date&quot; label=&quot;日期&quot; width=&quot;180&quot; /&gt;</span><br><span class="line">                &lt;el-table-column prop=&quot;name&quot; label=&quot;姓名&quot; width=&quot;130&quot; /&gt;</span><br><span class="line">                &lt;el-table-column prop=&quot;address&quot; label=&quot;地址&quot; width=&quot;180&quot; /&gt;</span><br><span class="line">                &lt;el-table-column</span><br><span class="line">                    fixed=&quot;right&quot;</span><br><span class="line">                    label=&quot;操作&quot;</span><br><span class="line">                    width=&quot;80&quot;</span><br><span class="line">                    align=&quot;right&quot;</span><br><span class="line">                &gt;</span><br><span class="line">                    &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">                        &lt;el-button</span><br><span class="line">                            @click=&quot;deleteRow(scope.row)&quot;</span><br><span class="line">                            type=&quot;text&quot;</span><br><span class="line">                            size=&quot;small&quot;</span><br><span class="line">                        &gt;</span><br><span class="line">                            删除</span><br><span class="line">                        &lt;/el-button&gt;</span><br><span class="line">                    &lt;/template&gt;</span><br><span class="line">                &lt;/el-table-column&gt;</span><br><span class="line">            &lt;/el-table&gt;</span><br><span class="line">            &lt;el-pagination</span><br><span class="line">                @size-change=&quot;handleSizeChange&quot;</span><br><span class="line">                @current-change=&quot;handleCurrentChange&quot;</span><br><span class="line">                :current-page=&quot;q.pagenum&quot;</span><br><span class="line">                :page-sizes=&quot;[5, 10, 15, 20]&quot;</span><br><span class="line">                :page-size=&quot;q.pagesize&quot;</span><br><span class="line">                layout=&quot;total, sizes, prev, pager, next, jumper&quot;</span><br><span class="line">                :total=&quot;total&quot;</span><br><span class="line">            &gt;</span><br><span class="line">            &lt;/el-pagination&gt;</span><br><span class="line">        &lt;/el-card&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            tableData: [],</span><br><span class="line">            q: &#123;</span><br><span class="line">                pagenum: 1,</span><br><span class="line">                pagesize: 5,</span><br><span class="line">                query: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            total: 0</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">        this.getUsers();</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        async getUsers() &#123;</span><br><span class="line">            const &#123;</span><br><span class="line">                data: &#123; list, total &#125;</span><br><span class="line">            &#125; = await axios.get(&#x27;/api/users&#x27;, &#123;</span><br><span class="line">                params: this.q</span><br><span class="line">            &#125;);</span><br><span class="line">            this.tableData = list;</span><br><span class="line">            this.total = total;</span><br><span class="line">        &#125;,</span><br><span class="line">        handleSizeChange(pagesize) &#123;</span><br><span class="line">            this.q.pagesize = pagesize;</span><br><span class="line">            this.getUsers();</span><br><span class="line">        &#125;,</span><br><span class="line">        handleCurrentChange(pagenum) &#123;</span><br><span class="line">            this.q.pagenum = pagenum;</span><br><span class="line">            this.getUsers();</span><br><span class="line">        &#125;,</span><br><span class="line">        async deleteRow(&#123; id &#125;) &#123;</span><br><span class="line">            const &#123; data &#125; = await axios.delete(`/api/user/$&#123;id&#125;`)</span><br><span class="line">            if (data.status === 200) &#123;</span><br><span class="line">                this.getUsers();</span><br><span class="line">                this.$message.success(&#x27;删除成功&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.box-card &#123;</span><br><span class="line">    margin: 40px auto 0;</span><br><span class="line">    width: 630px;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix:before,</span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">    display: table;</span><br><span class="line">    content: &#x27;&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">    clear: both;</span><br><span class="line">&#125;</span><br><span class="line">.el-pagination &#123;</span><br><span class="line">    margin-top: 15px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="4-另一种使用方式"><a href="#4-另一种使用方式" class="headerlink" title="4. 另一种使用方式"></a>4. 另一种使用方式</h2><p><code>vue.config.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Mock</span> = <span class="built_in">require</span>(<span class="string">&#x27;mockjs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> data = <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;</span><br><span class="line">    <span class="string">&#x27;list|27&#x27;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="string">&#x27;@increment(1)&#x27;</span>,</span><br><span class="line">            <span class="attr">date</span>: <span class="string">&#x27;@date(yyyy-MM-dd hh:mm:ss)&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;@cname&#x27;</span>,</span><br><span class="line">            <span class="attr">address</span>: <span class="string">&#x27;@city(true)&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="title function_">before</span>(<span class="params">app</span>) &#123;</span><br><span class="line">            app.<span class="title function_">get</span>(<span class="string">&#x27;/api/users&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> &#123; pagenum, pagesize, query &#125; = qs.<span class="title function_">parse</span>(</span><br><span class="line">                    req.<span class="property">url</span>.<span class="title function_">split</span>(<span class="string">&#x27;?&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">                );</span><br><span class="line">                <span class="keyword">const</span> start = (pagenum - <span class="number">1</span>) * pagesize;</span><br><span class="line">                <span class="keyword">const</span> end = pagenum * pagesize;</span><br><span class="line">                <span class="keyword">const</span> total = data.<span class="property">list</span>.<span class="property">length</span>;</span><br><span class="line">                <span class="keyword">const</span> totalPage = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(data.<span class="property">list</span>.<span class="property">length</span> / pagesize);</span><br><span class="line">                <span class="keyword">let</span> list = [];</span><br><span class="line">                <span class="keyword">if</span> (pagenum &gt; totalPage) &#123;</span><br><span class="line">                    list = [];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    list = data.<span class="property">list</span>.<span class="title function_">slice</span>(start, end);</span><br><span class="line">                &#125;</span><br><span class="line">                res.<span class="title function_">send</span>(&#123;</span><br><span class="line">                    <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">                    list,</span><br><span class="line">                    total</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">            app.<span class="title function_">delete</span>(<span class="string">&#x27;/api/users/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> idx = data.<span class="property">list</span>.<span class="title function_">findIndex</span>(</span><br><span class="line">                    <span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> === +req.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">                );</span><br><span class="line">                data.<span class="property">list</span>.<span class="title function_">splice</span>(idx, <span class="number">1</span>);</span><br><span class="line">                res.<span class="title function_">send</span>(&#123;</span><br><span class="line">                    <span class="attr">status</span>: <span class="number">200</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="5-vite-项目"><a href="#5-vite-项目" class="headerlink" title="5. vite 项目"></a>5. vite 项目</h2><p><code>vite.config.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&quot;@vitejs/plugin-vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; viteMockServe &#125; <span class="keyword">from</span> <span class="string">&quot;vite-plugin-mock&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(),</span><br><span class="line">    <span class="title function_">viteMockServe</span>(&#123;</span><br><span class="line">      <span class="attr">mockPath</span>: <span class="string">&quot;mock&quot;</span>,</span><br><span class="line">      <span class="attr">localEnabled</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>mock/index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Mock</span> <span class="keyword">from</span> <span class="string">&#x27;mockjs&#x27;</span></span><br><span class="line"><span class="comment">// 内存模拟数据</span></span><br><span class="line"><span class="keyword">const</span> arr = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  arr.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="string">&#x27;@guid&#x27;</span>),</span><br><span class="line">    <span class="attr">name</span>: <span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="string">&#x27;@cname&#x27;</span>),</span><br><span class="line">    <span class="attr">place</span>: <span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="string">&#x27;@county(true)&#x27;</span>),</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/list&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">response</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/del&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line">    <span class="attr">response</span>: <span class="function">(<span class="params">&#123;query&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> index = arr.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> === query.<span class="property">id</span>)</span><br><span class="line">      arr.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">success</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-Plus分页接口实现教程：Spring Boot中如何编写分页查询</title>
    <url>/blog/2024/03/27/MyBatis-Plus%E5%88%86%E9%A1%B5%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E6%95%99%E7%A8%8B%EF%BC%9ASpring-Boot%E4%B8%AD%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h1 id="MyBatis-Plus分页接口实现教程：Spring-Boot中如何编写分页查询"><a href="#MyBatis-Plus分页接口实现教程：Spring-Boot中如何编写分页查询" class="headerlink" title="MyBatis-Plus分页接口实现教程：Spring Boot中如何编写分页查询"></a>MyBatis-Plus分页接口实现教程：Spring Boot中如何编写分页查询</h1><p>MyBatis-Plus 是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。它提供了强大的分页插件，可以轻松实现分页查询的功能。在 Spring Boot 项目中使用 MyBatis-Plus 可以大大简化分页逻辑的编写。本文将介绍如何在 Spring Boot 项目中使用 MyBatis-Plus 实现分页接口。</p>
<h2 id="MyBatis-Plus-简介"><a href="#MyBatis-Plus-简介" class="headerlink" title="MyBatis-Plus 简介"></a>MyBatis-Plus 简介</h2><p>MyBatis-Plus（简称 MP）是 MyBatis 的一个增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。它提供了代码生成器、分页插件、性能分析插件、全局通用操作、MetaObject 等一系列功能，使得 MyBatis 变得更加易用。</p>
<h2 id="Spring-Boot-简介"><a href="#Spring-Boot-简介" class="headerlink" title="Spring Boot 简介"></a>Spring Boot 简介</h2><p>Spring Boot 是 Spring 的一个模块，用于简化新 Spring 应用的初始搭建以及开发过程。Spring Boot 旨在简化配置，通过约定大于配置的原则，提供了大量的默认配置，使得开发者能够快速启动和部署 Spring 应用。</p>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="1-添加-MyBatis-Plus-依赖"><a href="#1-添加-MyBatis-Plus-依赖" class="headerlink" title="1. 添加 MyBatis-Plus 依赖"></a>1. 添加 MyBatis-Plus 依赖</h3><p>在 <code>pom.xml</code> 文件中添加 MyBatis-Plus 的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><img src="C:\Users\21096\AppData\Roaming\Typora\typora-user-images\image-20240327015151458.png" alt="image-20240327015151458"></p>
<p>Springboot只能使用3.1.5及以下版本！！！</p>
</blockquote>
<h3 id="2-配置分页插件"><a href="#2-配置分页插件" class="headerlink" title="2. 配置分页插件"></a>2. 配置分页插件</h3><p>在 Spring Boot 的配置类中添加分页插件的配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@MapperScan(&quot;com.example.demo.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增分页拦截器，并设置数据库类型为mysql</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-创建服务层接口"><a href="#3-创建服务层接口" class="headerlink" title="3. 创建服务层接口"></a>3. 创建服务层接口</h3><p>创建一个服务层接口，用于定义分页查询的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">listPageUser</span><span class="params">(<span class="meta">@RequestParam</span> Integer page, <span class="meta">@RequestParam</span> Integer pageSize)</span> &#123;</span><br><span class="line">        <span class="comment">//分页参数</span></span><br><span class="line">        Page&lt;UserEntity&gt; rowPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">        <span class="comment">//queryWrapper组装查询where条件</span></span><br><span class="line">        LambdaQueryWrapper&lt;UserEntity&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        rowPage = userMapper.selectPage(rowPage, queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;数据列表&quot;</span>, rowPage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-创建控制器"><a href="#4-创建控制器" class="headerlink" title="4. 创建控制器"></a>4. 创建控制器</h3><p>创建一个控制器，用于处理 HTTP 请求并调用服务层的分页查询方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userServiceImpl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/listPage&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;列表分页&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">listPageUser</span><span class="params">(<span class="meta">@RequestParam</span> Integer page, <span class="meta">@RequestParam</span> Integer pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userServiceImpl.listPageUser(page, pageSize);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-运行应用并测试"><a href="#5-运行应用并测试" class="headerlink" title="5. 运行应用并测试"></a>5. 运行应用并测试</h3><p>启动 Spring Boot 应用，并通过 Postman 或其他 API 测试工具发送 POST 请求到 <code>/user/listPage</code> 端点，传递 <code>page</code> 和 <code>pageSize</code> 参数，即可测试分页查询功能。</p>
<h3 id="6-全部代码"><a href="#6-全部代码" class="headerlink" title="6.全部代码"></a>6.全部代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.excel.EasyExcel;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> com.example.common.req.IdParam;</span><br><span class="line"><span class="keyword">import</span> com.example.common.resp.Result;</span><br><span class="line"><span class="keyword">import</span> com.example.system.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> com.example.system.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.system.resp.LoginResp;</span><br><span class="line"><span class="keyword">import</span> com.example.system.service.UserService;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.Operation;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.tags.Tag;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 用户表 前端控制器</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> he</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2024-03-23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Tag(name = &quot;用户&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/userEntity&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> <span class="string">&quot;User_id&quot;</span>;</span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;列表&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">listUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;数据列表&quot;</span>, userService.list());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;存在&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/exist&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">existUser</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> IdParam param)</span> &#123;</span><br><span class="line">        QueryWrapper&lt;UserEntity&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(id.toLowerCase(Locale.ROOT), param.getId());</span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> userService.count(wrapper);</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) <span class="keyword">return</span> Result.success(<span class="string">&quot;ID不存在&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;ID已存在&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;保存&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/insert&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">insertUser</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> UserEntity param)</span> &#123;</span><br><span class="line">        QueryWrapper&lt;UserEntity&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(id.toLowerCase(Locale.ROOT), param.getId());</span><br><span class="line">        <span class="keyword">if</span> (userService.count(wrapper) != <span class="number">0</span>) <span class="keyword">return</span> Result.failure(<span class="string">&quot;ID已存在&quot;</span>, sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        <span class="keyword">if</span> (userService.save(param)) <span class="keyword">return</span> Result.success(<span class="string">&quot;保存成功&quot;</span>, sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        <span class="keyword">return</span> Result.failure(<span class="string">&quot;保存失败&quot;</span>, sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;删除&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">deleteUser</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> IdParam param)</span> &#123;</span><br><span class="line">        QueryWrapper&lt;UserEntity&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(id.toLowerCase(Locale.ROOT), param.getId());</span><br><span class="line">        <span class="keyword">if</span> (userService.count(wrapper) == <span class="number">0</span>) <span class="keyword">return</span> Result.failure(<span class="string">&quot;ID不存在&quot;</span>, param.getId());</span><br><span class="line">        <span class="keyword">if</span> (userService.remove(wrapper)) <span class="keyword">return</span> Result.success(<span class="string">&quot;删除成功&quot;</span>, param.getId());</span><br><span class="line">        <span class="keyword">return</span> Result.failure(<span class="string">&quot;删除失败&quot;</span>, param.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;修改&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">updateUser</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> UserEntity param)</span> &#123;</span><br><span class="line">        QueryWrapper&lt;UserEntity&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(id.toLowerCase(Locale.ROOT), param.getId());</span><br><span class="line">        <span class="keyword">if</span> (userService.count(wrapper) == <span class="number">0</span>) <span class="keyword">return</span> Result.failure(<span class="string">&quot;ID不存在&quot;</span>, sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        <span class="keyword">if</span> (userService.updateById(param)) <span class="keyword">return</span> Result.success(<span class="string">&quot;修改成功&quot;</span>, sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        <span class="keyword">return</span> Result.failure(<span class="string">&quot;修改失败&quot;</span>, sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;查询&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/select&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">selectUser</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> IdParam param)</span> &#123;</span><br><span class="line">        QueryWrapper&lt;UserEntity&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(id.toLowerCase(Locale.ROOT), param.getId());</span><br><span class="line">        <span class="keyword">if</span> (userService.count(wrapper) == <span class="number">0</span>) <span class="keyword">return</span> Result.failure(<span class="string">&quot;ID不存在&quot;</span>, param.getId());</span><br><span class="line">        <span class="keyword">return</span> Result.success(userService.getOne(wrapper));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;查询byAcc&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/selectByAcc/&#123;param&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">selectUserByAcc</span><span class="params">(<span class="meta">@PathVariable</span> <span class="meta">@Validated</span> String param)</span> &#123;</span><br><span class="line">        QueryWrapper&lt;UserEntity&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">acc</span> <span class="operator">=</span> <span class="string">&quot;User_acc&quot;</span>;</span><br><span class="line">        wrapper.eq(acc.toLowerCase(Locale.ROOT), param);</span><br><span class="line">        <span class="keyword">if</span> (userService.count(wrapper) == <span class="number">0</span>) <span class="keyword">return</span> Result.failure(<span class="string">&quot;账号不存在&quot;</span>, sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        <span class="keyword">return</span> Result.success(userService.getOne(wrapper));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;列表分页&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/listPage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">listPageUser</span><span class="params">(<span class="meta">@RequestParam</span> Integer page, <span class="meta">@RequestParam</span> Integer pageSize)</span> &#123;</span><br><span class="line">        <span class="comment">//分页参数</span></span><br><span class="line">        Page&lt;UserEntity&gt; rowPage = <span class="keyword">new</span> <span class="title class_">Page</span>(page, pageSize);</span><br><span class="line">        <span class="comment">//queryWrapper组装查询where条件</span></span><br><span class="line">        LambdaQueryWrapper&lt;UserEntity&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        rowPage = userMapper.selectPage(rowPage, queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;数据列表&quot;</span>, rowPage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;导出数据&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;exportExcel&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exportExcelUser</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;轮播图&quot;</span>, StandardCharsets.UTF_8).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        List&lt;UserEntity&gt; list = userService.list();</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename*=&quot;</span> + fileName + <span class="string">&quot;.xlsx&quot;</span>);</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), UserEntity.class).sheet(<span class="string">&quot;轮播图&quot;</span>).doWrite(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;导入数据&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/importExcel&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">importExcelUser</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取文件的输入流</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line">            List&lt;UserEntity&gt; list = EasyExcel.read(inputStream) <span class="comment">//调用read方法</span></span><br><span class="line">                    <span class="comment">//注册自定义监听器，字段校验可以在监听器内实现</span></span><br><span class="line">                    <span class="comment">//.registerReadListener(new UserListener())</span></span><br><span class="line">                    .head(UserEntity.class) <span class="comment">//对应导入的实体类</span></span><br><span class="line">                    .sheet(<span class="number">0</span>) <span class="comment">//导入数据的sheet页编号，0代表第一个sheet页，如果不填，则会导入所有sheet页的数据</span></span><br><span class="line">                    .headRowNumber(<span class="number">1</span>) <span class="comment">//列表头行数，1代表列表头有1行，第二行开始为数据行</span></span><br><span class="line">                    .doReadSync();<span class="comment">//开始读Excel，返回一个List&lt;T&gt;集合，继续后续入库操作</span></span><br><span class="line">            <span class="comment">//模拟导入数据库操作</span></span><br><span class="line">            <span class="keyword">for</span> (UserEntity entity : list) &#123;</span><br><span class="line">                userService.saveOrUpdate(entity);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Result.success(<span class="string">&quot;导入成功&quot;</span>, sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException exception) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(exception);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过上述步骤，我们在 Spring Boot 项目中使用 MyBatis-Plus 实现了一个分页查询接口。MyBatis-Plus 提供的分页插件极大地简化了分页逻辑的编写，使得开发者能够更专注于业务逻辑的实现。通过学习和实践，你可以更深入地理解 MyBatis-Plus 和 Spring Boot 的强大功能，以及如何将它们应用到实际的开发工作中。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>MyBatis-Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基本使用</title>
    <url>/blog/2024/02/09/MySQL%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="MySQL基本使用"><a href="#MySQL基本使用" class="headerlink" title="MySQL基本使用"></a>MySQL基本使用</h1><p>1.安装类型：</p>
<p>​	developer default（开发者默认）：安装mysql开发所需的所有产品<br>​	server only（服务器）：只安装mysql服务器产品<br>​	client only（客户端）：只安装没有服务器的mysql客户端产品<br>​	full（完全）：安装所有包含的mysql产品和功能</p>
<p>cd D:\Program\mysql-8.0.30-winx64\bin</p>
<p>查看用户信息<br>mysqld –initialize –comsole</p>
<p>下载<br>mysqld –install</p>
<p>开启服务<br>net start mysql<br>关闭服务<br>net stop mysql</p>
<p>修改密码<br>ALTER USER ‘root‘@’localhost’ IDENTIFIED BY ‘123456’;</p>
<p>登录<br>mysql -uroot -p</p>
<p>登录<br>mysql -h localhost -u root -p</p>
<p>查看版本信息<br>status</p>
<p>–DDL 数据定义语言 定义数据对象</p>
<p>–数据库操作；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"><span class="keyword">create</span> database  casedb;</span><br><span class="line"><span class="keyword">create</span> database [if <span class="keyword">not</span> <span class="keyword">exists</span>] casedb;</span><br><span class="line">use casedb;</span><br><span class="line"><span class="keyword">select</span> database();</span><br><span class="line"><span class="keyword">drop</span> database casedb;</span><br><span class="line"><span class="keyword">alter</span> database casedb <span class="type">character</span> <span class="keyword">set</span> utf<span class="number">-8</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>–表操作；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> stu;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> emp;</span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> emp;</span><br><span class="line"><span class="keyword">desc</span> stu;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> stu;</span><br></pre></td></tr></table></figure>

<p>–关键字<br>    –add<br>    –modify change<br>    –drop<br>    –rename …</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">add</span> nickname <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;昵称&#x27;</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu change nickname username <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;用户名&#x27;</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">drop</span> username;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emop rename <span class="keyword">to</span> employee;</span><br></pre></td></tr></table></figure>



<p>–*******************************************************************************************<br>–DML 数据操作语言</p>
<p>–关键字<br>    –insert 增<br>    –delete 删<br>    –update 改 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu(title,auther,data) <span class="keyword">values</span> (&quot;t&quot;,&quot;a&quot;,&quot;d&quot;);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu <span class="keyword">values</span> (&quot;t&quot;,&quot;a&quot;,&quot;d&quot;...);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu <span class="keyword">values</span> (&quot;t&quot;,&quot;a&quot;,&quot;d&quot;),(&quot;t1&quot;,&quot;a1&quot;,&quot;d1&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp ;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> gender <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tableName <span class="keyword">where</span> tableId<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tableName [<span class="keyword">where</span> clause];</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> tableName <span class="keyword">set</span> title<span class="operator">=</span><span class="string">&#x27;studrc&#x27;</span> <span class="keyword">where</span> tableId<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> name<span class="operator">=</span><span class="string">&#x27;itheima&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> name<span class="operator">=</span><span class="string">&#x27;hfh&#x27;</span>, gender <span class="operator">=</span><span class="string">&#x27;2&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> worktime<span class="operator">=</span><span class="string">&#x27;2008-01-01&#x27;</span>;</span><br></pre></td></tr></table></figure>


<p>–*******************************************************************************************<br>–DQL 数据查询语言</p>
<p>– 编写顺序<br>    –select 字段列表<br>    –from 表名列表<br>    –where 条件列表<br>    –group by 分组字段查询<br>    –having 分组后条件列表<br>    –order by 排序字段列表<br>    –limit 分页参数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> workadddress <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> workadddress <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> id,name,workno,score,gender,age <span class="keyword">from</span> emp;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>–聚合函数<br>    –count 统计数量<br>    –max 最大值<br>    –min 最小值<br>    –avg 平均数<br>    –sum 求和</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(idcard) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(age) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(age) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(age) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(age) <span class="keyword">from</span> emp <span class="keyword">where</span> workaddress <span class="operator">=</span> <span class="string">&#x27;西安&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>–条件查询 where<br>    –&gt; &gt;&#x3D; &lt; &lt;&#x3D; &#x3D; &lt;&gt; !&#x3D;<br>    –between and<br>    –in()<br>    –like ‘_ _’<br>    –is null<br>    –and &amp;&amp; or || not !</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">80</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">80</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> idcard <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> idcard <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">!=</span> <span class="number">80</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&lt;&gt;</span> <span class="number">80</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&lt;=</span> <span class="number">80</span> <span class="operator">&amp;&amp;</span> age <span class="operator">&gt;=</span> <span class="number">18</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">between</span> <span class="number">15</span> <span class="keyword">and</span> <span class="number">80</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> gender<span class="operator">=</span><span class="string">&#x27;女&#x27;</span>  <span class="keyword">and</span> age <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">15</span> <span class="keyword">or</span> age <span class="operator">=</span> <span class="number">18</span> <span class="keyword">or</span> age <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="keyword">in</span>(<span class="number">15</span>,<span class="number">18</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;_ _&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> idcard <span class="keyword">like</span> <span class="string">&#x27;%x&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> idcard <span class="keyword">like</span> <span class="string">&#x27;_________________x&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>–分组查询 group by<br>    –执行顺序：where&gt;聚合函数&gt; having</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件 <span class="keyword">group</span> <span class="keyword">by</span> 分组字段 <span class="keyword">having</span> 分组后过滤条件;</span><br><span class="line"><span class="keyword">select</span> gender, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"><span class="keyword">select</span> gender, <span class="built_in">avg</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"><span class="keyword">select</span> workaddress, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp <span class="keyword">where</span> age<span class="operator">&lt;</span><span class="number">30</span> <span class="keyword">group</span> <span class="keyword">by</span> workaddress <span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">select</span> workaddress, <span class="built_in">count</span>(<span class="operator">*</span>) address_count <span class="keyword">from</span> emp <span class="keyword">where</span> age<span class="operator">&lt;</span><span class="number">30</span> <span class="keyword">group</span> <span class="keyword">by</span> workaddress <span class="keyword">having</span> address_count <span class="operator">&gt;=</span> <span class="number">3</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>–排序查询 order by<br>    –asc 升序<br>    –desc 降序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 <span class="keyword">order</span> <span class="keyword">by</span> 字段<span class="number">1</span> 排序方式<span class="number">1</span>,字段<span class="number">2</span> 排序方式<span class="number">2</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> enterdate <span class="keyword">desc</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>, enterdate <span class="keyword">desc</span> ;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>–分页查询 limit<br>    –起始索引&#x3D;（查询页码-1）* 每页的记录数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 limit 起始索引, 查询记录数;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp limit <span class="number">0</span>,<span class="number">10</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp limit <span class="number">10</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp limit <span class="number">10</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>–案例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> gender <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">and</span> age <span class="keyword">in</span> (<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> gender <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">and</span> (age <span class="keyword">between</span> <span class="number">10</span> <span class="keyword">and</span> <span class="number">20</span>) <span class="keyword">and</span> name <span class="keyword">like</span> <span class="string">&#x27;_ _ _&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> gender, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp <span class="keyword">where</span> age<span class="operator">&lt;</span><span class="number">20</span> <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"><span class="keyword">select</span> name, age <span class="keyword">from</span> emp <span class="keyword">where</span> age<span class="operator">&lt;=</span><span class="number">20</span> <span class="keyword">group</span> <span class="keyword">by</span> age <span class="keyword">asc</span>, entrydate <span class="keyword">desc</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> gender <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">and</span> age <span class="keyword">between</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">40</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span> , entrydate <span class="keyword">asc</span> limit <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--执行顺序验证</span></span><br><span class="line">    <span class="comment">--form</span></span><br><span class="line">    <span class="comment">--where</span></span><br><span class="line">    <span class="comment">--group by</span></span><br><span class="line">    <span class="comment">--select</span></span><br><span class="line">    <span class="comment">--order by &amp;&amp; having</span></span><br><span class="line">    <span class="comment">--limit</span></span><br><span class="line"><span class="keyword">select</span> name, age <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&gt;</span><span class="number">15</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br><span class="line"><span class="keyword">select</span> name, age <span class="keyword">from</span> emp e <span class="keyword">where</span> e.age <span class="operator">&gt;</span><span class="number">15</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br><span class="line"><span class="keyword">select</span> e.name, age <span class="keyword">from</span> emp e <span class="keyword">where</span> e.age <span class="operator">&gt;</span><span class="number">15</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br><span class="line"><span class="keyword">select</span> e.name ename , age <span class="keyword">from</span> emp e <span class="keyword">where</span> e.age <span class="operator">&gt;</span><span class="number">15</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br><span class="line"><span class="keyword">select</span> e.name ename , age <span class="keyword">from</span> emp e <span class="keyword">where</span> e.age <span class="operator">&gt;</span><span class="number">15</span> <span class="keyword">order</span> <span class="keyword">by</span> eage <span class="keyword">asc</span>; (X)</span><br><span class="line"><span class="keyword">select</span> e.name ename , age eage <span class="keyword">from</span> emp e <span class="keyword">where</span> e.age <span class="operator">&gt;</span><span class="number">15</span> <span class="keyword">order</span> <span class="keyword">by</span> eage <span class="keyword">asc</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--*******************************************************************************************</span></span><br><span class="line"><span class="comment">--DCL 数据控制语言：管理用户&amp;&amp;权限控制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--管理用户</span></span><br><span class="line">    <span class="comment">--	查询用户</span></span><br><span class="line">    <span class="comment">--	创建用户</span></span><br><span class="line">    <span class="comment">--	修改用户密码</span></span><br><span class="line">    <span class="comment">--	删除用户</span></span><br><span class="line">use mysql;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建用户 itcast , 只能够在当前主机localhost访问, 密码123456;</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;itcast&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建用户 heima , 可以在任意主机访问该数据库, 密码123456 ;</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;heima&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span> @ <span class="string">&#x27;主机名&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;密码&#x27;</span>；</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;itcast&#x27;</span> @ <span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>；</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;itcast&#x27;</span> @ <span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改用户 heima 的访问密码为 1234 ;</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;heima&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;1234&#x27;</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span> @ <span class="string">&#x27;主机名&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;新密码&#x27;</span>；</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;itcast&#x27;</span> @ <span class="string">&#x27;%&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;1234&#x27;</span>；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除itcast@localhost用户</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;itcast&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span> @ <span class="string">&#x27;主机名&#x27;</span>；</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;itcast&#x27;</span> @ <span class="string">&#x27;localhost&#x27;</span>；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--权限控制</span></span><br><span class="line">    <span class="comment">--all,all peivileges 所有权限</span></span><br><span class="line">    <span class="comment">--select 查询数据</span></span><br><span class="line">    <span class="comment">--insert 插入数据</span></span><br><span class="line">    <span class="comment">--update 修改数据</span></span><br><span class="line">    <span class="comment">--delete 删除数据</span></span><br><span class="line">    <span class="comment">--alter 修改表</span></span><br><span class="line">    <span class="comment">--drop 删除数据库/表/视图</span></span><br><span class="line">    <span class="comment">--create 创建数据库/表</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">--查询权限show</span></span><br><span class="line">    <span class="comment">--授予权限grant</span></span><br><span class="line">    <span class="comment">--撤销权限revoke</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询权限</span></span><br><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">&#x27;heima&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="comment">-- 授予权限</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> itcast.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;heima&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="comment">-- 撤销权限</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">all</span> <span class="keyword">on</span> itcast.<span class="operator">*</span> <span class="keyword">from</span> <span class="string">&#x27;heima&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line"><span class="keyword">grant</span> 权限列表 <span class="keyword">on</span> 数据库名.表名 <span class="keyword">to</span> <span class="string">&#x27;用户名&#x27;</span>@‘主机名’;</span><br><span class="line"><span class="keyword">grant</span> 权限列表 <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;itcast&#x27;</span>@‘localhost’;</span><br><span class="line"><span class="keyword">revoke</span> 权限列表 <span class="keyword">on</span> 数据库名.表名 <span class="keyword">from</span> <span class="string">&#x27;用户名&#x27;</span>@‘主机名’;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--*******************************************************************************************</span></span><br><span class="line"><span class="comment">--函数</span></span><br><span class="line">    <span class="comment">--字符串函数</span></span><br><span class="line">    <span class="comment">--数值函数</span></span><br><span class="line">    <span class="comment">--日期函数</span></span><br><span class="line">    <span class="comment">--流程函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--字符串函数</span></span><br><span class="line">    <span class="comment">--CONCAT(s1,s2,s3...) 字符串拼接</span></span><br><span class="line">    <span class="comment">--LOWER(str) 字符串全部转为小写</span></span><br><span class="line">    <span class="comment">--UPPER(str) 字符串全部转为大写</span></span><br><span class="line">    <span class="comment">--LPAD(str,n,pad) 左填充 用字符串PAD对str左边进行填充 达到n个字符串长度</span></span><br><span class="line">    <span class="comment">--RPAD(str,n,pad) 右填充 </span></span><br><span class="line">    <span class="comment">--TRIM(str) 去掉字符串头部和尾部的空格</span></span><br><span class="line">    <span class="comment">--SUBSTRING(str,start,len) 返回从字符串str从start位置起的len个长度的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> concat (<span class="string">&#x27;hello&#x27;</span> ,<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">lower</span> (<span class="string">&#x27;HELLP&#x27;</span> ,<span class="string">&#x27;MYSQL&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">upper</span> (<span class="string">&#x27;hello&#x27;</span> ,<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> lpad (<span class="string">&#x27;01&#x27;</span> ,<span class="number">5</span>，<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> rpad (<span class="string">&#x27;01&#x27;</span> ,<span class="number">5</span>,<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">trim</span> (<span class="string">&#x27;     hello mysql      &#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">substring</span> (<span class="string">&#x27;hello mysql&#x27;</span> ,<span class="number">1</span> , <span class="number">5</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> workno <span class="operator">=</span> lpad (workno ,<span class="number">5</span> , <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--数值函数</span></span><br><span class="line">    <span class="comment">--CELT(x)  向上取整</span></span><br><span class="line">    <span class="comment">--FLOOR(x)  向下取整</span></span><br><span class="line">    <span class="comment">--MOD(x,y)  返回x/y的模</span></span><br><span class="line">    <span class="comment">--RANG()  返回0~1内的随机数</span></span><br><span class="line">    <span class="comment">--ROUND(x,y)  求参数x的四舍五入的值，保留y的小数位</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">ceil</span>(<span class="number">1.1</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">floor</span>(<span class="number">1.1</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">mod</span>(<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">select</span> rand();</span><br><span class="line"><span class="keyword">select</span> round(<span class="number">2.34555</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--生成随机六位验证码</span></span><br><span class="line"><span class="keyword">select</span> round(rand()<span class="operator">*</span><span class="number">1000000</span> , <span class="number">0</span>);</span><br><span class="line"><span class="keyword">select</span> lpad(round(rand()<span class="operator">*</span><span class="number">1000000</span> , <span class="number">0</span>) ,<span class="number">6</span> , <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--日期函数</span></span><br><span class="line">    <span class="comment">--curdate()  返回当前日期</span></span><br><span class="line">    <span class="comment">--curtime()  返回当前时间</span></span><br><span class="line">    <span class="comment">--now()  返回当前日期和时间</span></span><br><span class="line">    <span class="comment">--year(date)  获取指定date的年份</span></span><br><span class="line">    <span class="comment">--month(date)  获取指定date的月份</span></span><br><span class="line">    <span class="comment">--day(date)  获取指定date的日期</span></span><br><span class="line">    <span class="comment">--date_add(date, interval expr type)  返回一个日期/时间值加上一个时间间隔expr后的时间值</span></span><br><span class="line">    <span class="comment">--datediff(date1, date2)  返回起始时间date1和结束时间date2之间的天数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> curdate();</span><br><span class="line"><span class="keyword">select</span> curtime();</span><br><span class="line"><span class="keyword">select</span> now();</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">year</span>(now());</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">month</span>(now());</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">day</span>(now());</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> date_add(now(), <span class="type">interval</span> <span class="number">70</span> days);</span><br><span class="line"><span class="keyword">select</span> date_add(now(), <span class="type">interval</span> <span class="number">70</span> <span class="keyword">month</span>);</span><br><span class="line"><span class="keyword">select</span> date_add(now(), <span class="type">interval</span> <span class="number">70</span> <span class="keyword">year</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> datediff(<span class="string">&#x27;2021-12-01&#x27;</span>, <span class="string">&#x27;2021-10-01&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> name,datediff(curdate(), entryfate ) <span class="keyword">from</span> emp ;</span><br><span class="line"><span class="keyword">select</span> name,datediff(curdate(), entryfate )<span class="keyword">as</span> <span class="string">&#x27;entrydays&#x27;</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> entrydays <span class="keyword">desc</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--流程控制</span></span><br><span class="line">if(<span class="keyword">value</span>, t, f );  如果<span class="keyword">value</span>为<span class="literal">true</span>，则返回t，否则返回f；</span><br><span class="line">ifnull(value1, value2);  如果<span class="keyword">value</span>不为空，返回value1，否则返回value2；</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">when</span>[val1] <span class="keyword">then</span> [res1] ...<span class="keyword">else</span> [<span class="keyword">default</span>] <span class="keyword">end</span>;  如果<span class="keyword">value</span>为<span class="literal">true</span>，...否则返回<span class="keyword">default</span>默认值；</span><br><span class="line"><span class="keyword">case</span> [expr] <span class="keyword">when</span> [val1] <span class="keyword">then</span> [res1] ...<span class="keyword">else</span> [<span class="keyword">default</span>] <span class="keyword">end</span>;  如果expr的值等于val1，返回res1，...否则返回<span class="keyword">default</span>默认值；</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> if (<span class="literal">false</span> ,<span class="string">&#x27;ok&#x27;</span>, <span class="string">&#x27;err&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> ifnull(<span class="string">&#x27;ok&#x27;</span>, <span class="string">&#x27;default&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> ifnull(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;default&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> ifnull (<span class="keyword">null</span>, <span class="string">&#x27;default&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--case when then else end</span></span><br><span class="line"><span class="keyword">select</span> name,(<span class="keyword">case</span> workadress <span class="keyword">when</span> <span class="string">&#x27;北京&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;上海&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;一线城市&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;二线城市&#x27;</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">&#x27;工作地址&#x27;</span> <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> score(</span><br><span class="line">	id <span class="type">int</span> comment <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;NAME&#x27;</span>，</span><br><span class="line">	math <span class="type">int</span> comment <span class="string">&#x27;MATH&#x27;</span>,</span><br><span class="line">	english <span class="type">int</span> comment <span class="string">&#x27;ENGLISH&#x27;</span>,</span><br><span class="line">	chinese <span class="type">int</span> comment <span class="string">&#x27;CHINESE&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;SCORE&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> score (id, name, math, english, chinses) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span> ,<span class="number">79</span>,<span class="number">88</span>,<span class="number">99</span>), (<span class="number">2</span>,<span class="string">&#x27;ROSE&#x27;</span> ,<span class="number">79</span>,<span class="number">88</span>,<span class="number">99</span>), (<span class="number">3</span>,<span class="string">&#x27;JACK&#x27;</span> ,<span class="number">79</span>,<span class="number">88</span>,<span class="number">99</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> id,name,</span><br><span class="line">       (<span class="keyword">case</span> <span class="keyword">when</span> math<span class="operator">&gt;=</span><span class="number">85</span> <span class="keyword">then</span> <span class="string">&#x27;great&#x27;</span> <span class="keyword">when</span> math<span class="operator">&gt;=</span><span class="number">60</span> <span class="keyword">then</span> <span class="string">&#x27;good&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;bad&#x27;</span> <span class="keyword">end</span> )<span class="string">&#x27;math&#x27;</span>,</span><br><span class="line">       (<span class="keyword">case</span> <span class="keyword">when</span> math<span class="operator">&gt;=</span><span class="number">85</span> <span class="keyword">then</span> <span class="string">&#x27;great&#x27;</span> <span class="keyword">when</span> math<span class="operator">&gt;=</span><span class="number">60</span> <span class="keyword">then</span> <span class="string">&#x27;good&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;bad&#x27;</span> <span class="keyword">end</span> )<span class="string">&#x27;math&#x27;</span>,</span><br><span class="line">       (<span class="keyword">case</span> <span class="keyword">when</span> math<span class="operator">&gt;=</span><span class="number">85</span> <span class="keyword">then</span> <span class="string">&#x27;great&#x27;</span> <span class="keyword">when</span> math<span class="operator">&gt;=</span><span class="number">60</span> <span class="keyword">then</span> <span class="string">&#x27;good&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;bad&#x27;</span> <span class="keyword">end</span> )<span class="string">&#x27;math&#x27;</span> </span><br><span class="line"><span class="keyword">from</span> score;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--*******************************************************************************************</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--约束</span></span><br><span class="line">	<span class="comment">--not null        非空约束 限制该字段的数据不能为null</span></span><br><span class="line">	<span class="comment">--unique          唯一约束 保证该字段的所有数据都是唯一的</span></span><br><span class="line">	<span class="comment">--primary key   主键约束 主键是一行数据的唯一的标识符要求非空且唯一</span></span><br><span class="line">	<span class="comment">--default          默认约 束 保存数据时如果未指定该字段则采用默认值</span></span><br><span class="line">	<span class="comment">--check            检查约束 保存字段值满足某一要求</span></span><br><span class="line">	<span class="comment">--foreign key    外键约束 用来让两张表之间建立链接保证数据的一致性和完整性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="type">int</span> <span class="keyword">check</span> (age<span class="operator">&gt;</span><span class="number">0</span><span class="operator">&amp;&amp;</span>user.age<span class="operator">&lt;=</span><span class="number">120</span> ) comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    status <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;1&#x27;</span> comment <span class="string">&#x27;状态&#x27;</span>,</span><br><span class="line">    gender <span class="type">char</span>(<span class="number">1</span>) comment <span class="string">&#x27;性别&#x27;</span></span><br><span class="line">)comment <span class="string">&#x27;用户表&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (name, age, status, gender) vakues (<span class="string">&#x27;jack&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;男&#x27;</span>)，(<span class="string">&#x27;tom&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--外键约束 foreign key</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>s <span class="keyword">user</span>(</span><br><span class="line">	字段名  数据类型，</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">constraint</span> 外键名称 <span class="keyword">foreign</span> key(外键字段名) <span class="keyword">references</span> 主表(主表列名)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">constraint</span> 外键名称 <span class="keyword">foreign</span> key(外键字段名)  <span class="keyword">references</span> 主表(主表列名)；</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">constraint</span> fk_emp_dept_id <span class="keyword">foreign</span> key(dept_id)  <span class="keyword">references</span> dept(id)；</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> <span class="keyword">foreign</span> key fk_emp_dept_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">--外键约束    删除更新行为</span></span><br><span class="line"><span class="keyword">no</span> action     当在父表中删除<span class="operator">/</span>更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除<span class="operator">/</span>更新。（与 RESTRICT 一致)</span><br><span class="line">restrict      当在父表中删除<span class="operator">/</span>更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除<span class="operator">/</span>更新。(与 NOACTION 一致)</span><br><span class="line">cascade       当在父表中删除<span class="operator">/</span>更新对应记录时，首先检查该记录是否有对应外键，如果有，则也删除<span class="operator">/</span>更新外键在子表中的记录。</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">null</span>      当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为<span class="keyword">null</span>(这就要求该外键允许取<span class="keyword">null</span>)。</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">default</span>   父表有变更时，子表将外键列设置成一个默认的值(Innodb不支持)</span><br><span class="line">			  </span><br><span class="line">cascade</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">constraint</span> fk_emp_dept_id <span class="keyword">foreign</span> key(dept_id)  <span class="keyword">references</span> dept(id) <span class="keyword">on</span> <span class="keyword">update</span> cascade <span class="keyword">on</span> <span class="keyword">delete</span> cascade;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">null</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">constraint</span> fk_emp_dept_id <span class="keyword">foreign</span> key(dept_id)  <span class="keyword">references</span> dept(id) <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">set</span> <span class="keyword">null</span> <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">set</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">--**********************************************************************************************</span></span><br><span class="line"><span class="comment">--多表查询</span></span><br><span class="line">·多表关系</span><br><span class="line">·多表查询概述</span><br><span class="line">·内连接</span><br><span class="line">·外连接</span><br><span class="line">·自连接</span><br><span class="line">·子查询</span><br><span class="line">·多表查询案例</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">多表关系</span><br><span class="line">概述</span><br><span class="line">项目开发中，在进行数据库表结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结构，由于业务之间相互关联，所</span><br><span class="line">以各个表结构之间也存在着各种联系，基本上分为三种：</span><br><span class="line"><span class="operator">&gt;</span><span class="number">1.</span>—对多(多对一)</span><br><span class="line"><span class="operator">&gt;</span><span class="number">2.</span>多对多</span><br><span class="line"><span class="operator">&gt;</span><span class="number">3.</span> 一对一</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>一对多（多对一）</span><br><span class="line">	<span class="operator">&gt;</span>案例:部门 与员工的关系</span><br><span class="line">	<span class="operator">&gt;</span>关系：一个部门对应多个员工，一个员工对应一个部门</span><br><span class="line">	<span class="operator">&gt;</span>实现：在多的一方建立外键，指向一的一方的主键</span><br><span class="line">	</span><br><span class="line"><span class="number">2.</span>多对多</span><br><span class="line">	案例：学生 与 课程的关系</span><br><span class="line">	<span class="operator">&gt;</span>关系：一个学生可以选修多门课程，一门课程也可以供多个学生选择</span><br><span class="line">	<span class="operator">&gt;</span>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</span><br><span class="line">	</span><br><span class="line"><span class="number">3.</span>一对一</span><br><span class="line">	<span class="operator">&gt;</span>案例：用户 与 用户详情的关系</span><br><span class="line">	<span class="operator">&gt;</span> 关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率</span><br><span class="line">	<span class="operator">&gt;</span> 实现: 在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的(<span class="keyword">UNIQUE</span>)</span><br><span class="line">	</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp,dept;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.dept_id <span class="operator">=</span> dept.id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--多表查询的分类</span></span><br><span class="line"><span class="number">1.</span>连接查询：</span><br><span class="line">        内连接：相当于查询A、B交集部分数据</span><br><span class="line">        外连接：</span><br><span class="line">        	左外连接：查询左表所有数据，以及两张表交集部分数据</span><br><span class="line">        	右外连接：查询右表所有数据，以及两张表交集部分数据</span><br><span class="line">        自连接：当前表与自身的连接查询，自连接必须使用表别名</span><br><span class="line"><span class="number">2.</span>子查询；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--内连接</span></span><br><span class="line">    隐式内连接</span><br><span class="line">    <span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span>,表<span class="number">2</span> <span class="keyword">where</span> 条件...(emp.dept_id <span class="operator">=</span> dept.id);</span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.dept_id <span class="operator">=</span> dept.id;</span><br><span class="line">    <span class="keyword">select</span> emp.name , dept.name <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.dept_id <span class="operator">=</span> dept.id;</span><br><span class="line">    <span class="keyword">select</span> e.name , d.name <span class="keyword">from</span> emp e,dept d <span class="keyword">where</span> e.dept_id <span class="operator">=</span> d.id;</span><br><span class="line">    </span><br><span class="line">    显式内连接</span><br><span class="line">    <span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">inner</span> <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 连接条件...;</span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp e <span class="keyword">inner</span> <span class="keyword">join</span>  dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id;</span><br><span class="line">    <span class="keyword">select</span> emp.name , dept.name <span class="keyword">from</span> emp e <span class="keyword">inner</span> <span class="keyword">join</span>  dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id;</span><br><span class="line"><span class="comment">--外连接</span></span><br><span class="line">	左外连接  相当于查询左表的全部数据，包括表<span class="number">1</span>和表<span class="number">2</span>交集的数据</span><br><span class="line">	<span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 连接条件...;</span><br><span class="line">	<span class="keyword">select</span> e.<span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id<span class="operator">=</span>d.id;</span><br><span class="line">	<span class="keyword">select</span> e.<span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">left</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id<span class="operator">=</span>d.id;</span><br><span class="line">	右外连接  相当于查询右表的全部数据，包括表<span class="number">1</span>和表<span class="number">2</span>交集的数据</span><br><span class="line">	<span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 连接条件...;</span><br><span class="line">	<span class="keyword">select</span> d.<span class="operator">*</span>,e.<span class="operator">*</span> <span class="keyword">from</span> emp e <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id<span class="operator">=</span>d.id;</span><br><span class="line">	<span class="keyword">select</span> d.<span class="operator">*</span>,e.<span class="operator">*</span> <span class="keyword">from</span> emp e <span class="keyword">right</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id<span class="operator">=</span>d.id;</span><br><span class="line">	<span class="operator">=</span></span><br><span class="line">	<span class="keyword">select</span> d.<span class="operator">*</span>,e.<span class="operator">*</span> <span class="keyword">from</span> dept d <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> emp e <span class="keyword">on</span> e.dept_id<span class="operator">=</span>d.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">--自连接</span></span><br><span class="line">	不要看成一张表看成两张表</span><br><span class="line">	<span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> 别名<span class="number">1</span> <span class="keyword">join</span> 表<span class="number">1</span> 别名<span class="number">2</span> <span class="keyword">on</span> 条件...;</span><br><span class="line">	<span class="keyword">select</span> a.name , b.name <span class="keyword">from</span> emp a, emp b <span class="keyword">where</span> a, managerid <span class="operator">=</span> b.id;</span><br><span class="line">	<span class="keyword">select</span> a.name <span class="string">&#x27;员工&#x27;</span> ， b.name <span class="string">&#x27;领导&#x27;</span> <span class="keyword">from</span> emp a lef <span class="keyword">outer</span> <span class="keyword">join</span> emp b <span class="keyword">on</span> a.managerid <span class="operator">=</span>b.id;</span><br><span class="line"></span><br><span class="line">联合查询： <span class="keyword">union</span> <span class="keyword">union</span> <span class="keyword">all</span>  查询字段需一致(列数）</span><br><span class="line">	<span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1.</span>..</span><br><span class="line">	<span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">	<span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">2.</span>..;</span><br><span class="line">	</span><br><span class="line">	查询结果合并</span><br><span class="line">	<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&lt;</span> <span class="number">5000</span></span><br><span class="line">	<span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">	<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp age <span class="operator">&gt;</span> <span class="number">50</span>;</span><br><span class="line">	</span><br><span class="line">	查询结果合并去重</span><br><span class="line">	<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&lt;</span> <span class="number">5000</span></span><br><span class="line">	<span class="keyword">union</span></span><br><span class="line">	<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp age <span class="operator">&gt;</span> <span class="number">50</span>;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"><span class="comment">--子查询 嵌套查询</span></span><br><span class="line">概念：<span class="keyword">SQL</span>语句中嵌套<span class="keyword">SELECT</span>语句，称为嵌套查询，又称子查询。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> column1<span class="operator">=</span>(<span class="keyword">SELECT</span> column1 <span class="keyword">FROM</span> t2);</span><br><span class="line"></span><br><span class="line">子查询外部的语句可以是<span class="keyword">INSERT</span><span class="operator">/</span><span class="keyword">UPDATE</span><span class="operator">/</span> <span class="keyword">DELETE</span><span class="operator">/</span> <span class="keyword">SELECT</span>的任何一个。</span><br><span class="line">根据子查询结果不同，分为：</span><br><span class="line"><span class="operator">&gt;</span>标量子查询（子查询结果为单个值）</span><br><span class="line"><span class="operator">&gt;</span>列子查询（子查询结果为一列</span><br><span class="line"><span class="operator">&gt;</span>行子查询（子查询结果为一行)</span><br><span class="line">表子查询（子查询结果为多行多列)</span><br><span class="line">根据子查询位置，分为：<span class="keyword">WHERE</span>之后、<span class="keyword">FROM</span>之后、<span class="keyword">SELECT</span>之后。</span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span>标量子查询（子查询结果为单个值）</span><br><span class="line">子查询结果为单个值，数字，字符串，日期，最简单的形式</span><br><span class="line">常用操作符: <span class="operator">=</span> <span class="operator">&lt;&gt;</span> <span class="operator">&gt;</span> <span class="operator">&gt;=</span> <span class="operator">&lt;</span> <span class="operator">&lt;=</span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span><span class="string">&#x27;销售部&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span><span class="number">4</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span>(<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span><span class="string">&#x27;销售部&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> entrydate <span class="keyword">from</span> emp <span class="keyword">where</span>  name <span class="operator">=</span> <span class="string">&#x27;Aminn&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>  emp entrydate <span class="operator">&gt;</span><span class="string">&#x27;2009-02-10&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>  emp entrydate <span class="operator">&gt;</span>(<span class="keyword">select</span> entrydate <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;Aminn&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span>列子查询（子查询结果为一列</span><br><span class="line">常用操作符:<span class="keyword">IN</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> <span class="keyword">AND</span> <span class="keyword">SOME</span> <span class="keyword">ALL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">IN</span>		在指定的集合范围之内，多选一</span><br><span class="line"><span class="keyword">NOT</span> <span class="keyword">IN</span>	不在指定的集合范围之内</span><br><span class="line"><span class="keyword">ANY</span>		子查询返回列表中，有任意一个满足即可</span><br><span class="line"><span class="keyword">SOME</span>	与<span class="keyword">ANY</span>等同，使用<span class="keyword">SOME</span>的地方都可以使用<span class="keyword">ANY</span></span><br><span class="line"><span class="keyword">ALL</span>		子查询返回列表的所有值都必须满足</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span><span class="string">&#x27;销售部&#x27;</span> <span class="keyword">or</span> name <span class="operator">=</span><span class="string">&#x27;市场部&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="keyword">in</span> (<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span><span class="string">&#x27;销售部&#x27;</span> <span class="keyword">or</span> name <span class="operator">=</span><span class="string">&#x27;市场部&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span><span class="string">&#x27;销售部&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span><span class="string">&#x27;销售部&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&gt;</span> <span class="keyword">all</span>(<span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span><span class="string">&#x27;销售部&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span><span class="string">&#x27;销售部&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span><span class="string">&#x27;销售部&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&gt;</span> <span class="keyword">any</span>(<span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span><span class="string">&#x27;销售部&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span>行子查询（子查询结果为一行)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">事务:</span><br><span class="line">事务简介</span><br><span class="line">事务操作</span><br><span class="line">事务四大特性</span><br><span class="line">并发事务问题</span><br><span class="line">事务隔离级别</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">事务简介</span><br><span class="line">事务 是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作</span><br><span class="line">请求，即这些操作要么同时成功，要么同时失败。</span><br><span class="line"></span><br><span class="line">默认MySQL的事务是自动提交的，也就是说，当执行一条DML语句，MySQL会立即隐式的提交事务。</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account <span class="keyword">where</span> name <span class="operator">=</span><span class="string">&#x27;zs&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span><span class="string">&#x27;zs&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span><span class="string">&#x27;ls&#x27;</span>;</span><br><span class="line"></span><br><span class="line">事务操作</span><br><span class="line">	查看<span class="operator">/</span>设置事务提交方式 </span><br><span class="line">	<span class="keyword">SELECT</span>@<span class="variable">@autocommit</span>；</span><br><span class="line">	<span class="number">0</span>：手动提交</span><br><span class="line">	<span class="number">1</span>：自动提交</span><br><span class="line">	<span class="keyword">SET</span>@<span class="variable">@autocommit</span><span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">	提交事务</span><br><span class="line">	<span class="keyword">COMMIT</span>;</span><br><span class="line">	回滚事务</span><br><span class="line">	<span class="keyword">ROLLBACK</span>；</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account <span class="keyword">where</span> name <span class="operator">=</span><span class="string">&#x27;zs&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span><span class="string">&#x27;zs&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span><span class="string">&#x27;ls&#x27;</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line">开启事务</span><br><span class="line">	<span class="keyword">START</span> TRANSACTION 或<span class="keyword">BEGIN</span>&#125;</span><br><span class="line">	提交事务</span><br><span class="line">	<span class="keyword">COMMIT</span>;</span><br><span class="line">	回滚事务</span><br><span class="line">	<span class="keyword">ROLLBACK</span>；</span><br><span class="line"></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account <span class="keyword">where</span> name <span class="operator">=</span><span class="string">&#x27;zs&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span><span class="string">&#x27;zs&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span><span class="string">&#x27;ls&#x27;</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">rollback</span>;</span><br><span class="line"></span><br><span class="line">事务四大特性 ACID</span><br><span class="line">原子性（Atomicity)：	事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</span><br><span class="line">一致性（<span class="operator">&amp;</span>onsistency）：	事务完成时，必须使所有的数据都保持一致状态。</span><br><span class="line">隔离性（Isolation）：	数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</span><br><span class="line">持久性（Durability)：	事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</span><br><span class="line"></span><br><span class="line">并发事务问题</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">事务隔离级别</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-plus增删改查</title>
    <url>/blog/2024/02/20/Mybatis-plus%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
    <content><![CDATA[<h1 id="Mybatis-plus增删改查"><a href="#Mybatis-plus增删改查" class="headerlink" title="Mybatis-plus增删改查"></a>Mybatis-plus增删改查</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserMapper commonMapper;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserService commonService;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> <span class="string">&quot;User_id&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Operation(summary = &quot;列表&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">listUser</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;数据列表&quot;</span>, commonService.list());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Operation(summary = &quot;存在&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/exist&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">existUser</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> IdParam param)</span> &#123;</span><br><span class="line">    QueryWrapper&lt;UserEntity&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(id.toLowerCase(Locale.ROOT), param.getId());</span><br><span class="line">    <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> commonService.count(wrapper);</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>) <span class="keyword">return</span> Result.success(<span class="string">&quot;ID不存在&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;ID已存在&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Operation(summary = &quot;保存&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/insert&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">insertUser</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> UserEntity param)</span> &#123;</span><br><span class="line">    QueryWrapper&lt;UserEntity&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(id.toLowerCase(Locale.ROOT), param.getUserId());</span><br><span class="line">    <span class="keyword">if</span> (commonService.count(wrapper) != <span class="number">0</span>) <span class="keyword">return</span> Result.failure(<span class="string">&quot;ID已存在&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="keyword">if</span> (commonService.save(param)) <span class="keyword">return</span> Result.success(<span class="string">&quot;保存成功&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="keyword">return</span> Result.failure(<span class="string">&quot;保存失败&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Operation(summary = &quot;删除&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/delete&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">deleteUser</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> IdParam param)</span> &#123;</span><br><span class="line">    QueryWrapper&lt;UserEntity&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(id.toLowerCase(Locale.ROOT), param.getId());</span><br><span class="line">    <span class="keyword">if</span> (commonService.count(wrapper) == <span class="number">0</span>) <span class="keyword">return</span> Result.failure(<span class="string">&quot;ID不存在&quot;</span>, param.getId());</span><br><span class="line">    <span class="keyword">if</span> (commonService.remove(wrapper)) <span class="keyword">return</span> Result.success(<span class="string">&quot;删除成功&quot;</span>, param.getId());</span><br><span class="line">    <span class="keyword">return</span> Result.failure(<span class="string">&quot;删除失败&quot;</span>, param.getId());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Operation(summary = &quot;修改&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/update&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">updateUser</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> UserEntity param)</span> &#123;</span><br><span class="line">    QueryWrapper&lt;UserEntity&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(id.toLowerCase(Locale.ROOT), param.getUserId());</span><br><span class="line">    <span class="keyword">if</span> (commonService.count(wrapper) == <span class="number">0</span>) <span class="keyword">return</span> Result.failure(<span class="string">&quot;ID不存在&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="keyword">if</span> (commonService.updateById(param)) <span class="keyword">return</span> Result.success(<span class="string">&quot;修改成功&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="keyword">return</span> Result.failure(<span class="string">&quot;修改失败&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Operation(summary = &quot;查询&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/select&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">selectUser</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> IdParam param)</span> &#123;</span><br><span class="line">    QueryWrapper&lt;UserEntity&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(id.toLowerCase(Locale.ROOT), param.getId());</span><br><span class="line">    <span class="keyword">if</span> (commonService.count(wrapper) == <span class="number">0</span>) <span class="keyword">return</span> Result.failure(<span class="string">&quot;ID不存在&quot;</span>, param.getId());</span><br><span class="line">    <span class="keyword">return</span> Result.success(commonService.getOne(wrapper));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Operation(summary = &quot;查询byAcc&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/selectByAcc/&#123;param&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">selectUserByAcc</span><span class="params">(<span class="meta">@PathVariable</span> <span class="meta">@Validated</span> String param)</span> &#123;</span><br><span class="line">    QueryWrapper&lt;UserEntity&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;user_acc&quot;</span>, param);</span><br><span class="line">    <span class="keyword">if</span> (commonService.count(wrapper) == <span class="number">0</span>) <span class="keyword">return</span> Result.failure(<span class="string">&quot;ID不存在&quot;</span>, param);</span><br><span class="line">    <span class="keyword">return</span> Result.success(commonService.getOne(wrapper));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Operation(summary = &quot;列表分页&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/listPage&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">listPageUser</span><span class="params">(<span class="meta">@RequestParam</span> Integer page, <span class="meta">@RequestParam</span> Integer pageSize)</span> &#123;</span><br><span class="line">    <span class="comment">//分页参数</span></span><br><span class="line">    Page&lt;UserEntity&gt; rowPage = <span class="keyword">new</span> <span class="title class_">Page</span>(page, pageSize);</span><br><span class="line">    <span class="comment">//queryWrapper组装查询where条件</span></span><br><span class="line">    LambdaQueryWrapper&lt;UserEntity&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    rowPage = commonMapper.selectPage(rowPage, queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;数据列表&quot;</span>, rowPage);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Operation(summary = &quot;导出数据&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;exportExcel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exportExcelUser</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    response.setContentType(<span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>);</span><br><span class="line">    response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;轮播图&quot;</span>, StandardCharsets.UTF_8).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">    List&lt;UserEntity&gt; list = commonService.list();</span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename*=&quot;</span> + fileName + <span class="string">&quot;.xlsx&quot;</span>);</span><br><span class="line">    EasyExcel.write(response.getOutputStream(), UserEntity.class).sheet(<span class="string">&quot;轮播图&quot;</span>).doWrite(list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Operation(summary = &quot;导入数据&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/importExcel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">importExcelUser</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//获取文件的输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line">        List&lt;UserEntity&gt; list = EasyExcel.read(inputStream) <span class="comment">//调用read方法</span></span><br><span class="line">                <span class="comment">//注册自定义监听器，字段校验可以在监听器内实现</span></span><br><span class="line">                <span class="comment">//.registerReadListener(new UserListener())</span></span><br><span class="line">                .head(UserEntity.class) <span class="comment">//对应导入的实体类</span></span><br><span class="line">                .sheet(<span class="number">0</span>) <span class="comment">//导入数据的sheet页编号，0代表第一个sheet页，如果不填，则会导入所有sheet页的数据</span></span><br><span class="line">                .headRowNumber(<span class="number">1</span>) <span class="comment">//列表头行数，1代表列表头有1行，第二行开始为数据行</span></span><br><span class="line">                .doReadSync();<span class="comment">//开始读Excel，返回一个List&lt;T&gt;集合，继续后续入库操作</span></span><br><span class="line">        <span class="comment">//模拟导入数据库操作</span></span><br><span class="line">        <span class="keyword">for</span> (UserEntity entity : list) &#123;</span><br><span class="line">            commonService.saveOrUpdate(entity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;导入成功&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException exception) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(exception);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js核心命令与工具：提升开发效率的实用指南</title>
    <url>/blog/2024/03/22/Node-js%E6%A0%B8%E5%BF%83%E5%91%BD%E4%BB%A4%E4%B8%8E%E5%B7%A5%E5%85%B7%EF%BC%9A%E6%8F%90%E5%8D%87%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E7%9A%84%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="Node-js核心命令与工具：提升开发效率的实用指南"><a href="#Node-js核心命令与工具：提升开发效率的实用指南" class="headerlink" title="Node.js核心命令与工具：提升开发效率的实用指南"></a>Node.js核心命令与工具：提升开发效率的实用指南</h1><p>Node.js是一个基于Chrome V8引擎的开源服务器端JavaScript运行环境，它允许开发者使用JavaScript编写服务器端代码，实现高效的I&#x2F;O操作和网络通信。Node.js的异步、事件驱动的特性使其非常适合构建可扩展的网络应用。除了内置模块，Node.js的强大之处在于其丰富的生态系统，通过npm（Node Package Manager）可以轻松安装和管理成千上万的第三方模块。</p>
<p>Node.js 提供了一系列的命令行工具和内置模块，使得开发者能够轻松地执行各种任务。以下是一些常用的 Node.js 命令和功能：</p>
<h3 id="1-node-命令"><a href="#1-node-命令" class="headerlink" title="1. node 命令"></a>1. <code>node</code> 命令</h3><p>这是启动 Node.js 应用程序的基本命令。它后面通常跟随要执行的 JavaScript 文件名。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure>

<h3 id="2-npm-命令"><a href="#2-npm-命令" class="headerlink" title="2. npm 命令"></a>2. <code>npm</code> 命令</h3><p>Node Package Manager（npm）是 Node.js 的包管理器，用于安装和管理 Node.js 模块。</p>
<ul>
<li><p>安装全局模块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g &lt;package-name&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装项目依赖：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install &lt;package-name&gt; --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新项目依赖：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm update</span><br></pre></td></tr></table></figure>
</li>
<li><p>卸载模块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall &lt;package-name&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化 npm 项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-npx-命令"><a href="#3-npx-命令" class="headerlink" title="3. npx 命令"></a>3. <code>npx</code> 命令</h3><p><code>npx</code> 是 npm 的一个工具，用于执行 Node 包的二进制文件。它允许你运行 Node.js 包的脚本，而无需全局安装它们。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-app</span><br></pre></td></tr></table></figure>

<h3 id="4-nodemon-命令"><a href="#4-nodemon-命令" class="headerlink" title="4. nodemon 命令"></a>4. <code>nodemon</code> 命令</h3><p><code>nodemon</code> 是一个工具，用于在文件更改时自动重启 Node.js 应用程序。它通常用于开发过程中，以便快速看到更改的效果。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nodemon app.js</span><br></pre></td></tr></table></figure>

<h3 id="5-forever-命令"><a href="#5-forever-命令" class="headerlink" title="5. forever 命令"></a>5. <code>forever</code> 命令</h3><p><code>forever</code> 是一个 Node.js 模块，用于确保应用程序持续运行。如果应用程序崩溃，它会自动重启。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">forever start -l /var/log/forever -p 3000 app.js</span><br></pre></td></tr></table></figure>

<h3 id="6-pm2-命令"><a href="#6-pm2-命令" class="headerlink" title="6. pm2 命令"></a>6. <code>pm2</code> 命令</h3><p><code>pm2</code> 是一个进程管理器，用于保持应用程序的持续运行、负载均衡和日志记录。</p>
<ul>
<li><p>安装 pm2：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动应用程序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 start app.js</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看应用程序状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 status</span><br></pre></td></tr></table></figure>
</li>
<li><p>停止应用程序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 stop app.js</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7-eslint-命令"><a href="#7-eslint-命令" class="headerlink" title="7. eslint 命令"></a>7. <code>eslint</code> 命令</h3><p><code>eslint</code> 是一个 JavaScript 代码质量工具，用于检测代码中的错误和不一致。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">eslint app.js</span><br></pre></td></tr></table></figure>

<h3 id="8-node-inspector-命令"><a href="#8-node-inspector-命令" class="headerlink" title="8. node-inspector 命令"></a>8. <code>node-inspector</code> 命令</h3><p><code>node-inspector</code> 是一个调试工具，提供了一个图形界面，用于调试 Node.js 应用程序。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node-inspector</span><br></pre></td></tr></table></figure>

<h3 id="9-mocha-命令"><a href="#9-mocha-命令" class="headerlink" title="9. mocha 命令"></a>9. <code>mocha</code> 命令</h3><p><code>mocha</code> 是一个流行的 JavaScript 测试框架，用于编写和运行测试。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mocha test.js</span><br></pre></td></tr></table></figure>

<h3 id="10-webpack-命令"><a href="#10-webpack-命令" class="headerlink" title="10. webpack 命令"></a>10. <code>webpack</code> 命令</h3><p><code>webpack</code> 是一个模块打包器，用于将多个模块和资源打包成少数几个文件，通常用于前端资源的打包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">webpack --watch</span><br></pre></td></tr></table></figure>

<p>这些命令和工具是 Node.js 开发中常用的一部分，它们帮助开发者更高效地进行代码管理、项目构建、调试和测试。</p>
<p><strong>如果对你有帮助，点赞、收藏、关注是我更新的动力！👋🌟🚀</strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js快速入门：搭建基础Web服务器与实现CRUD及登录功能</title>
    <url>/blog/2024/03/22/Node-js%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%EF%BC%9A%E6%90%AD%E5%BB%BA%E5%9F%BA%E7%A1%80Web%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8E%E5%AE%9E%E7%8E%B0CRUD%E5%8F%8A%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h2 id="Node-js快速入门：搭建基础Web服务器与实现CRUD及登录功能"><a href="#Node-js快速入门：搭建基础Web服务器与实现CRUD及登录功能" class="headerlink" title="Node.js快速入门：搭建基础Web服务器与实现CRUD及登录功能"></a>Node.js快速入门：搭建基础Web服务器与实现CRUD及登录功能</h2><p>在Node.js中，创建一个功能完备的Web服务器如同搭积木般简单。借助Node.js的<code>http</code>模块和一些强大的第三方库，我们可以快速搭建起一个响应灵敏的服务器。本教程将详细介绍如何使用Node.js进行数据库操作和用户认证，包括创建数据库、实现CRUD操作和登录验证等关键步骤。</p>
<h2 id="技术栈介绍"><a href="#技术栈介绍" class="headerlink" title="技术栈介绍"></a>技术栈介绍</h2><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>Node.js是一个跨平台的运行时环境，它允许您在服务器上运行JavaScript代码。它基于事件驱动和非阻塞I&#x2F;O模型，这使得Node.js非常适合处理大量并发连接。</p>
<h3 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h3><p>Express是一个灵活的Node.js Web应用框架，提供了一系列强大的功能，用于构建单页、多页以及混合Web应用。它简化了路由、中间件管理和错误处理等常见Web开发任务。</p>
<h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><p>mysql是一个Node.js的客户端库，用于与MySQL数据库进行交互。它提供了一个简单易用的API，用于执行SQL查询和接收数据库响应。</p>
<h3 id="body-parser"><a href="#body-parser" class="headerlink" title="body-parser"></a>body-parser</h3><p>body-parser是Express的一个中间件，用于解析请求体中的JSON和URL编码的数据。它使得处理POST请求和解析复杂数据变得更加容易。</p>
<h3 id="cors"><a href="#cors" class="headerlink" title="cors"></a>cors</h3><p>cors（Cross-Origin Resource Sharing）是一个Node.js的中间件，用于实现跨源资源共享。它允许您指定哪些域名可以访问您的资源，从而避免了跨域请求问题。</p>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>首先，确保您的计算机上安装了Node.js和npm（Node Package Manager），这是Node.js开发的基础工具集。</p>
<h3 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h3><p>在您的工作目录中，创建一个新的文件夹用于存放项目文件，并在该目录下运行<code>npm init</code>命令来初始化一个新的Node.js项目。</p>
<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>通过运行<code>npm install express mysql body-parser cors</code>命令，安装项目所需的第三方库：Express用于Web框架，<code>mysql</code>用于数据库操作，body-parser用于解析请求体，<code>cors</code>用于处理跨域请求。</p>
<h3 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h3><p>首先，我们需要设置一个名为<code>crud_demo</code>的数据库，其中包含一个<code>user</code>表，字段包括<code>id</code>、<code>name</code>、<code>sex</code>和<code>age</code>。</p>
<h3 id="编写服务器代码"><a href="#编写服务器代码" class="headerlink" title="编写服务器代码"></a>编写服务器代码</h3><p>在项目目录中，创建一个JavaScript文件，例如<code>server.js</code>，并开始编写服务器代码。使用<code>const express = require(&#39;express&#39;)</code>引入Express模块，并实例化一个Express应用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用mysql依赖</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;mysql&quot;</span>);</span><br><span class="line"><span class="comment">//引用express依赖</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="comment">//引用body-parser 解析post传参</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>);</span><br><span class="line"><span class="comment">//express实例化</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//引用 cors</span></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&quot;cors&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; json &#125; = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>);</span><br><span class="line"><span class="comment">//关闭Form表单传值</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"><span class="comment">//使用Json传值</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br><span class="line"><span class="comment">//使用cors 解决跨域问题</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>());</span><br></pre></td></tr></table></figure>



<h3 id="配置数据库连接"><a href="#配置数据库连接" class="headerlink" title="配置数据库连接"></a>配置数据库连接</h3><p>使用<code>mysql</code>模块创建一个连接到MySQL数据库的客户端实例，并提供必要的连接信息。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&quot;password&quot;</span>,<span class="comment">//修改成自己的密码</span></span><br><span class="line">  <span class="attr">database</span>: <span class="string">&quot;crud_demo&quot;</span>,<span class="comment">//修改成自己的数据库名</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 建立数据库连接</span></span><br><span class="line">connection.<span class="title function_">connect</span>();</span><br></pre></td></tr></table></figure>



<h3 id="解析请求体"><a href="#解析请求体" class="headerlink" title="解析请求体"></a>解析请求体</h3><p>使用<code>body-parser</code>中间件来解析传入的JSON和URL编码的数据。</p>
<h3 id="处理跨域请求"><a href="#处理跨域请求" class="headerlink" title="处理跨域请求"></a>处理跨域请求</h3><p>通过<code>cors</code>中间件配置，允许跨域请求访问您的服务器。</p>
<h3 id="实现CRUD操作"><a href="#实现CRUD操作" class="headerlink" title="实现CRUD操作"></a>实现CRUD操作</h3><p>为Express应用定义路由，实现对数据库的增删改查操作。</p>
<h4 id="Select操作"><a href="#Select操作" class="headerlink" title="Select操作"></a>Select操作</h4><p>创建一个GET路由，用于从数据库中检索并返回用户数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * select</span></span><br><span class="line"><span class="comment"> * http://127.0.0.1:3000/api</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/api&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> sql = <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">  connection.<span class="title function_">query</span>(sql, <span class="keyword">function</span> (<span class="params">error, results, fields</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">    <span class="comment">// return results;</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(results);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="Delete操作"><a href="#Delete操作" class="headerlink" title="Delete操作"></a>Delete操作</h4><p>创建一个GET路由，接受用户ID作为参数，并从数据库中删除对应记录。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * delete</span></span><br><span class="line"><span class="comment"> * http://127.0.0.1:3000/api/delete/4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/api/delete/:id&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">let</span> delSql = <span class="string">`DELETE FROM user where id= <span class="subst">$&#123;<span class="built_in">parseInt</span>(req.params.id)&#125;</span>`</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(delSql);</span><br><span class="line">  connection.<span class="title function_">query</span>(delSql, <span class="keyword">function</span> (<span class="params">error, results</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">    <span class="comment">// return results;</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(results);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="Insert操作"><a href="#Insert操作" class="headerlink" title="Insert操作"></a>Insert操作</h4><p>创建一个GET路由，接受用户信息作为查询参数，并将其插入数据库。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * insert</span></span><br><span class="line"><span class="comment"> * http://localhost:3000/api/insert?id=4&amp;name=xiaohe&amp;sex=%E7%94%B7&amp;age=19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/api/insert&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">let</span> insertSql = <span class="string">`insert into user VALUES(?,?,?,?)`</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(insertSql);</span><br><span class="line">  <span class="keyword">let</span> data = [req.<span class="property">query</span>.<span class="property">id</span>, req.<span class="property">query</span>.<span class="property">name</span>, req.<span class="property">query</span>.<span class="property">sex</span>, req.<span class="property">query</span>.<span class="property">age</span>];</span><br><span class="line">  connection.<span class="title function_">query</span>(insertSql, data, <span class="keyword">function</span> (<span class="params">error, results</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">    <span class="comment">// return results;</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(results);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="Update操作"><a href="#Update操作" class="headerlink" title="Update操作"></a>Update操作</h4><p>创建一个GET路由，接受用户ID和更新信息作为查询参数，并更新数据库中的记录。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * update</span></span><br><span class="line"><span class="comment"> * http://localhost:3000/api/update?id=4&amp;name=%E7%99%BE%E5%BA%A6&amp;sex=%E7%94%B7&amp;age=999</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/api/update&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">let</span> updateSql = <span class="string">`update user set name = ?, sex = ?, age = ? where id = ?`</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(updateSql);</span><br><span class="line">  <span class="keyword">let</span> data = [req.<span class="property">query</span>.<span class="property">name</span>, req.<span class="property">query</span>.<span class="property">sex</span>, req.<span class="property">query</span>.<span class="property">age</span>, req.<span class="property">query</span>.<span class="property">id</span>];</span><br><span class="line">  connection.<span class="title function_">query</span>(updateSql, data, <span class="keyword">function</span> (<span class="params">error, results</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">    <span class="comment">// return results;</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(results);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="实现登录功能"><a href="#实现登录功能" class="headerlink" title="实现登录功能"></a>实现登录功能</h4><p>创建一个GET路由，用于接收登录请求，验证用户凭据，并返回登录结果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * login</span></span><br><span class="line"><span class="comment"> * http://127.0.0.1:3000/api/login?name=&quot;1234567890&quot;&amp;pwd=&quot;123456&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/api/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> loginSql = <span class="string">`select * from user where name = ? and pwd = ?`</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(loginSql);</span><br><span class="line">  <span class="keyword">let</span> data = [req.<span class="property">query</span>.<span class="property">name</span>, req.<span class="property">query</span>.<span class="property">pwd</span>];</span><br><span class="line">  connection.<span class="title function_">query</span>(loginSql, data, <span class="keyword">function</span> (<span class="params">error, results, fields</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">    <span class="comment">// return results;</span></span><br><span class="line">    <span class="keyword">if</span> (results.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;账号不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(results);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h2 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h2><p>使用<code>app.listen()</code>方法启动Express服务器，并指定端口号，例如3000。</p>
<h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用mysql依赖</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;mysql&quot;</span>);</span><br><span class="line"><span class="comment">//引用express依赖</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="comment">//引用body-parser 解析post传参</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>);</span><br><span class="line"><span class="comment">//express实例化</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//引用 cors</span></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&quot;cors&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; json &#125; = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>);</span><br><span class="line"><span class="comment">//关闭Form表单传值</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"><span class="comment">//使用Json传值</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br><span class="line"><span class="comment">//使用cors 解决跨域问题</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&quot;password&quot;</span>,<span class="comment">//修改成自己的密码</span></span><br><span class="line">  <span class="attr">database</span>: <span class="string">&quot;crud_demo&quot;</span>,<span class="comment">//修改成自己的数据库名</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 建立数据库连接</span></span><br><span class="line">connection.<span class="title function_">connect</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * select</span></span><br><span class="line"><span class="comment"> * http://127.0.0.1:3000/api</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/api&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> sql = <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">  connection.<span class="title function_">query</span>(sql, <span class="keyword">function</span> (<span class="params">error, results, fields</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">    <span class="comment">// return results;</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(results);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * delete</span></span><br><span class="line"><span class="comment"> * http://127.0.0.1:3000/api/delete/4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/api/delete/:id&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">let</span> delSql = <span class="string">`DELETE FROM user where id= <span class="subst">$&#123;<span class="built_in">parseInt</span>(req.params.id)&#125;</span>`</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(delSql);</span><br><span class="line">  connection.<span class="title function_">query</span>(delSql, <span class="keyword">function</span> (<span class="params">error, results</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">    <span class="comment">// return results;</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(results);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * insert</span></span><br><span class="line"><span class="comment"> * http://localhost:3000/api/insert?id=4&amp;name=xiaohe&amp;sex=%E7%94%B7&amp;age=19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/api/insert&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">let</span> insertSql = <span class="string">`insert into user VALUES(?,?,?,?)`</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(insertSql);</span><br><span class="line">  <span class="keyword">let</span> data = [req.<span class="property">query</span>.<span class="property">id</span>, req.<span class="property">query</span>.<span class="property">name</span>, req.<span class="property">query</span>.<span class="property">sex</span>, req.<span class="property">query</span>.<span class="property">age</span>];</span><br><span class="line">  connection.<span class="title function_">query</span>(insertSql, data, <span class="keyword">function</span> (<span class="params">error, results</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">    <span class="comment">// return results;</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(results);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * update</span></span><br><span class="line"><span class="comment"> * http://localhost:3000/api/update?id=4&amp;name=%E7%99%BE%E5%BA%A6&amp;sex=%E7%94%B7&amp;age=999</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/api/update&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">let</span> updateSql = <span class="string">`update user set name = ?, sex = ?, age = ? where id = ?`</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(updateSql);</span><br><span class="line">  <span class="keyword">let</span> data = [req.<span class="property">query</span>.<span class="property">name</span>, req.<span class="property">query</span>.<span class="property">sex</span>, req.<span class="property">query</span>.<span class="property">age</span>, req.<span class="property">query</span>.<span class="property">id</span>];</span><br><span class="line">  connection.<span class="title function_">query</span>(updateSql, data, <span class="keyword">function</span> (<span class="params">error, results</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">    <span class="comment">// return results;</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(results);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * login</span></span><br><span class="line"><span class="comment"> * http://127.0.0.1:3000/api/login?name=&quot;1234567890&quot;&amp;pwd=&quot;123456&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/api/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> loginSql = <span class="string">`select * from user where name = ? and pwd = ?`</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(loginSql);</span><br><span class="line">  <span class="keyword">let</span> data = [req.<span class="property">query</span>.<span class="property">name</span>, req.<span class="property">query</span>.<span class="property">pwd</span>];</span><br><span class="line">  connection.<span class="title function_">query</span>(loginSql, data, <span class="keyword">function</span> (<span class="params">error, results, fields</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">    <span class="comment">// return results;</span></span><br><span class="line">    <span class="keyword">if</span> (results.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;账号不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(results);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器启动成功...&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>使用Web浏览器或API测试工具（如Postman）访问服务器的路由，验证CRUD和登录功能是否按预期工作。</p>
<p><strong>如果对你有帮助，点赞、收藏、关注是我更新的动力！👋🌟🚀</strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>解决前端项目中Node.js版本不一致导致的依赖安装错误</title>
    <url>/blog/2024/02/09/Node%E7%89%88%E6%9C%AC%E4%B8%8D%E4%B8%80%E8%87%B4%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<h1 id="解决前端项目中Node-js版本不一致导致的依赖安装错误"><a href="#解决前端项目中Node-js版本不一致导致的依赖安装错误" class="headerlink" title="解决前端项目中Node.js版本不一致导致的依赖安装错误"></a>解决前端项目中Node.js版本不一致导致的依赖安装错误</h1><p>在前端开发中，我们经常会遇到Node.js版本不一致导致的问题，尤其是在团队协作或者在不同的环境中部署应用时。本文将详细介绍如何诊断和解决由于Node.js版本不一致导致的依赖安装错误。</p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>当您在项目中运行<code>npm install</code>时，可能会遇到以下错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm ERR! code ENOPEERINVALID</span><br><span class="line">npm ERR! peer invalid! Failed to install xxx@yyy. Please install the companion package zzz.</span><br></pre></td></tr></table></figure>

<p>这个错误通常意味着您尝试安装的某个包与当前项目中的其他包存在版本冲突。这可能是因为您的项目依赖了不同版本的同一个包，或者您的Node.js版本与某些包不兼容。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="1-确认Node-js版本"><a href="#1-确认Node-js版本" class="headerlink" title="1. 确认Node.js版本"></a>1. 确认Node.js版本</h3><p>首先，确认您的Node.js版本。在命令行中运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<p>记下当前的版本号，然后检查您的项目是否指定了Node.js版本。在项目的<code>package.json</code>文件中，查看是否有<code>engines</code>字段，它定义了项目兼容的Node.js版本范围。</p>
<h3 id="2-使用-legacy-peer-deps选项"><a href="#2-使用-legacy-peer-deps选项" class="headerlink" title="2. 使用--legacy-peer-deps选项"></a>2. 使用<code>--legacy-peer-deps</code>选项</h3><p>如果您确定Node.js版本不是问题的根本原因，那么您可以尝试使用<code>--legacy-peer-deps</code>选项来忽略peer依赖的版本冲突。这个选项在npm 7及以上版本中可用。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --legacy-peer-deps</span><br></pre></td></tr></table></figure>

<p>这将允许您安装依赖，即使它们之间存在版本冲突。但是，请注意，这可能会导致运行时错误，因为某些包可能不兼容。</p>
<h3 id="3-手动解决依赖冲突"><a href="#3-手动解决依赖冲突" class="headerlink" title="3. 手动解决依赖冲突"></a>3. 手动解决依赖冲突</h3><p>如果<code>--legacy-peer-deps</code>选项无法解决问题，您可能需要手动检查和解决依赖冲突。这通常涉及到以下步骤：</p>
<ol>
<li>查看<code>package.json</code>和<code>package-lock.json</code>文件，找出存在冲突的包。</li>
<li>在npm的<a href="https://www.npmjs.com/">官网</a>上查找这些包的版本历史和兼容性信息。</li>
<li>更新<code>package.json</code>中的依赖版本，以解决冲突。您可能需要与团队成员协商，以确保所有环境都使用兼容的版本。</li>
<li>重新运行<code>npm install</code>。</li>
</ol>
<h3 id="4-使用nvm管理Node-js版本"><a href="#4-使用nvm管理Node-js版本" class="headerlink" title="4. 使用nvm管理Node.js版本"></a>4. 使用nvm管理Node.js版本</h3><p>为了避免版本不一致的问题，您可以使用<a href="https://github.com/nvm-sh/nvm">nvm</a>（Node Version Manager）来管理不同项目的Node.js版本。这样，您可以为每个项目设置特定的Node.js版本。</p>
<p>安装nvm后，您可以使用以下命令切换Node.js版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm use &lt;version&gt;</span><br></pre></td></tr></table></figure>

<p>在项目目录中运行此命令，然后再次尝试安装依赖。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>React基本使用</title>
    <url>/blog/2024/02/16/React%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="React基本使用"><a href="#React基本使用" class="headerlink" title="React基本使用"></a>React基本使用</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><p>1.网页下载</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">npm i react react-dom</span><br></pre></td></tr></table></figure>

<p>2.全局安装脚手架</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">npm i -g create-react-app</span><br></pre></td></tr></table></figure>


<h2 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2.创建项目"></a>2.创建项目</h2><p>1.直接创建项目</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-app</span><br></pre></td></tr></table></figure>

<p>2.npm创建项目</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-app --use-npm</span><br></pre></td></tr></table></figure>

<p>3.脚手架创建项目</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">create-react-app my-app</span><br></pre></td></tr></table></figure>

<h2 id="3-运行、构建、测试、打包、"><a href="#3-运行、构建、测试、打包、" class="headerlink" title="3.运行、构建、测试、打包、"></a>3.运行、构建、测试、打包、</h2><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">start</span></span><br><span class="line"></span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line">npm test</span><br><span class="line"></span><br><span class="line">npm run eject</span><br></pre></td></tr></table></figure>

<h2 id="4-快速开始"><a href="#4-快速开始" class="headerlink" title="4.快速开始"></a>4.快速开始</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDom</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="5-安装antd，创建项目"><a href="#5-安装antd，创建项目" class="headerlink" title="5. 安装antd，创建项目"></a>5. 安装antd，创建项目</h2><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.全局</span><br><span class="line">npm install antd-init -g</span><br><span class="line"></span><br><span class="line">antd-init</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.项目</span><br><span class="line">npm install antd --save</span><br></pre></td></tr></table></figure>

<h2 id="6-安装react-router-dom"><a href="#6-安装react-router-dom" class="headerlink" title="6. 安装react-router-dom"></a>6. 安装react-router-dom</h2><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">npm install react-router-dom</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span>;</span><br><span class="line"><span class="comment">//router/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;../App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">List</span> <span class="keyword">from</span> <span class="string">&quot;../pages/List/List.jsx&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Edit</span> <span class="keyword">from</span> <span class="string">&quot;../pages/Edit/Edit.jsx&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Means</span> <span class="keyword">from</span> <span class="string">&quot;../pages/Means/Means.jsx&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&quot;../pages/Login/Login.jsx&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Register</span> <span class="keyword">from</span> <span class="string">&quot;../pages/Register/Register.jsx&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">BaseRouter</span>, <span class="title class_">Routes</span>, <span class="title class_">Route</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Router</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">BaseRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">App</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/list&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">List</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/edit&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Edit</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/means&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Means</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Login</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/register&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Register</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">BaseRouter</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Router</span></span><br></pre></td></tr></table></figure>

<h2 id="7-暴露webpack"><a href="#7-暴露webpack" class="headerlink" title="7. 暴露webpack"></a>7. 暴露webpack</h2><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -m &#x27;解包前&#x27;</span><br><span class="line"></span><br><span class="line">npm run eject</span><br></pre></td></tr></table></figure>

<h2 id="8-配置less"><a href="#8-配置less" class="headerlink" title="8. 配置less"></a>8. 配置less</h2><p>webpack.config.js<br>查找sasaModuleRegex</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">test</span>:<span class="regexp">/\.less$/</span>,</span><br><span class="line">	<span class="attr">use</span>:<span class="title function_">getStyleLoaders</span>(</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//暂不配置</span></span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="string">&#x27;less-loader&#x27;</span></span><br><span class="line">	),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">npm install less-loader</span><br></pre></td></tr></table></figure>

<h2 id="9-使用antd组件"><a href="#9-使用antd组件" class="headerlink" title="9.使用antd组件"></a>9.使用antd组件</h2><p><a href="https://ant.design/components/button-cn">https://ant.design/components/button-cn</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise技术学这篇就够了</title>
    <url>/blog/2024/03/11/Promise%E6%8A%80%E6%9C%AF%E5%AD%A6%E8%BF%99%E7%AF%87%E5%B0%B1%E5%A4%9F%E4%BA%86/</url>
    <content><![CDATA[<h1 id="Promise技术学这篇就够了"><a href="#Promise技术学这篇就够了" class="headerlink" title="Promise技术学这篇就够了"></a>Promise技术学这篇就够了</h1><h2 id="一-Promise是什么？"><a href="#一-Promise是什么？" class="headerlink" title="一. Promise是什么？"></a>一. Promise是什么？</h2><blockquote>
<p>Promise 是异步编程的一种解决方案，比传统的解决方案回调函数,  更合理和更强大。ES6 将其写进了语言标准，统一了用法，原生提供了Promise对象 。</p>
</blockquote>
<ul>
<li><p>指定回调函数方式更灵活易懂。</p>
</li>
<li><p>解决异步 <strong>回调地狱</strong> 的问题。</p>
</li>
</ul>
<h3 id="1-回调地狱"><a href="#1-回调地狱" class="headerlink" title="1. 回调地狱"></a>1. 回调地狱</h3><ul>
<li><p>当一个回调函数嵌套一个回调函数的时候</p>
</li>
<li><p>就会出现一个嵌套结构</p>
</li>
<li><p>当嵌套的多了就会出现回调地狱的情况</p>
</li>
<li><p>比如我们发送三个 ajax 请求</p>
<ul>
<li>第一个正常发送</li>
<li>第二个请求需要第一个请求的结果中的某一个值作为参数</li>
<li>第三个请求需要第二个请求的结果中的某一个值作为参数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;我是第一个请求&#x27;</span>,</span><br><span class="line">  success (res) &#123;</span><br><span class="line">    <span class="comment">// 现在发送第二个请求</span></span><br><span class="line">    <span class="title function_">ajax</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;我是第二个请求&#x27;</span>，</span><br><span class="line">      <span class="attr">data</span>: &#123; <span class="attr">a</span>: res.<span class="property">a</span>, <span class="attr">b</span>: res.<span class="property">b</span> &#125;,</span><br><span class="line">      success (res2) &#123;</span><br><span class="line">        <span class="comment">// 进行第三个请求</span></span><br><span class="line">        <span class="title function_">ajax</span>(&#123;</span><br><span class="line">          <span class="attr">url</span>: <span class="string">&#x27;我是第三个请求&#x27;</span>,</span><br><span class="line">          <span class="attr">data</span>: &#123; <span class="attr">a</span>: res2.<span class="property">a</span>, <span class="attr">b</span>: res2.<span class="property">b</span> &#125;,</span><br><span class="line">  				success (res3) &#123; </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res3) </span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>回调地狱，其实就是回调函数嵌套过多导致的</strong></p>
</li>
<li><p>当代码成为这个结构以后，已经没有维护的可能了</p>
</li>
</ul>
<h2 id="二-Promise使用"><a href="#二-Promise使用" class="headerlink" title="二. Promise使用"></a>二. Promise使用</h2><ul>
<li><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">// resolve 表示成功的回调</span></span><br><span class="line">  <span class="comment">// reject 表示失败的回调</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">  <span class="comment">// 成功的函数</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="comment">// 失败的函数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="三-Promise-对象的状态"><a href="#三-Promise-对象的状态" class="headerlink" title="三. Promise 对象的状态"></a>三. Promise 对象的状态</h2><p>Promise 对象通过自身的状态，来控制异步操作。Promise 实例具有三种状态。</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">异步操作未完成（pending）</span><br><span class="line">异步操作成功（fulfilled）</span><br><span class="line">异步操作失败（rejected）</span><br></pre></td></tr></table></figure>

<p>这三种的状态的变化途径只有两种。</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">从“未完成”到“成功”</span><br><span class="line">从“未完成”到“失败”</span><br></pre></td></tr></table></figure>

<p>一旦状态发生变化，就凝固了，不会再有新的状态变化。这也是 Promise 这个名字的由来，它的英语意思是“承诺”，一旦承诺成效，就不得再改变了。这也意味着，Promise 实例的状态变化只可能发生一次。</p>
<p>因此，Promise 的最终结果只有两种。</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">异步操作成功，Promise 实例传回一个值（value），状态变为fulfilled。</span><br><span class="line">异步操作失败，Promise 实例抛出一个错误（error），状态变为rejected。</span><br></pre></td></tr></table></figure>

<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Nyb6AdTk-1680683483530)(%E7%AC%94%E8%AE%B0.assets&#x2F;image-20220902141409899.png)]</p>
<h2 id="四-Promise对象方法"><a href="#四-Promise对象方法" class="headerlink" title="四.Promise对象方法"></a>四.Promise对象方法</h2><blockquote>
<p>Promise 是一个对象，也是一个构造函数。</p>
</blockquote>
<h3 id="1-Promise-resolve"><a href="#1-Promise-resolve" class="headerlink" title="1.Promise.resolve"></a>1.Promise.resolve</h3><p>将现有对象转为 Promise 对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;kerwin&#x27;</span>)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;kerwin&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="2-Promise-reject"><a href="#2-Promise-reject" class="headerlink" title="2.Promise.reject"></a>2.Promise.reject</h3><p><code>Promise.reject(reason)</code>方法也会返回一个新的 Promise 实例，该实例的状态为<code>rejected</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="3-Promise-all"><a href="#3-Promise-all" class="headerlink" title="3.Promise.all"></a>3.Promise.all</h3><p><code>Promise.all()</code>方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2, p3]);</span><br></pre></td></tr></table></figure>

<p>p的状态由p1,p2,p3 决定，分成两种情况。</p>
<p>（1）只有<code>p1</code>、<code>p2</code>、<code>p3</code>的状态都变成<code>fulfilled</code>，<code>p</code>的状态才会变成<code>fulfilled</code>，此时<code>p1</code>、<code>p2</code>、<code>p3</code>的返回值组成一个数组，传递给<code>p</code>的回调函数。</p>
<p>（2）只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个被<code>rejected</code>，<code>p</code>的状态就变成<code>rejected</code>，此时第一个被<code>reject</code>的实例的返回值，会传递给<code>p</code>的回调函数。</p>
<h3 id="4-Promise-race"><a href="#4-Promise-race" class="headerlink" title="4.Promise.race"></a>4.Promise.race</h3><p><code>Promise.race()</code>方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2, p3]);</span><br></pre></td></tr></table></figure>

<p>上面代码中，只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个实例率先改变状态，<code>p</code>的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给<code>p</code>的回调函数。</p>
<h3 id="5-Promise-allSettled"><a href="#5-Promise-allSettled" class="headerlink" title="5.Promise.allSettled"></a>5.Promise.allSettled</h3><p><code>Promise.allSettled()</code>方法，用来确定一组异步操作是否都结束了（不管成功或失败）。所以，它的名字叫做”Settled“，包含了”fulfilled“和”rejected“两种情况。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promises = [ <span class="title function_">ajax</span>(<span class="string">&#x27;/200接口&#x27;</span>), <span class="title function_">ajax</span>(<span class="string">&#x27;/401接口&#x27;</span>) ];</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">allSettled</span>(promises).<span class="title function_">then</span>(<span class="function"><span class="params">results</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 过滤出成功的请求</span></span><br><span class="line">    results.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span>item.<span class="property">status</span> === <span class="string">&#x27;fulfilled&#x27;</span>);</span><br><span class="line">    过滤出失败的请求</span><br><span class="line">    results.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span>=&gt;</span> item.<span class="property">status</span> === <span class="string">&#x27;rejected&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-Promise-any"><a href="#6-Promise-any" class="headerlink" title="6.Promise.any"></a>6.Promise.any</h3><p>只要参数实例有一个变成<code>fulfilled</code>状态，包装实例就会变成<code>fulfilled</code>状态；如果所有参数实例都变成<code>rejected</code>状态，包装实例就会变成<code>rejected</code>状态。</p>
<blockquote>
<p><code>Promise.any()</code>跟<code>Promise.race()</code>方法很像，只有一点不同，就是<code>Promise.any()</code>不会因为某个 Promise 变成<code>rejected</code>状态而结束，必须等到所有参数 Promise 变成<code>rejected</code>状态才会结束。</p>
</blockquote>
<h2 id="五-手写Promise"><a href="#五-手写Promise" class="headerlink" title="五.手写Promise"></a>五.手写Promise</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">KerwinPromise</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&quot;pending&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">result</span> = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cb</span> = []</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_this.<span class="property">status</span> !== <span class="string">&quot;pending&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// console.log(_this)</span></span><br><span class="line">        _this.<span class="property">status</span> = <span class="string">&quot;fulfilled&quot;</span></span><br><span class="line">        _this.<span class="property">result</span> = res;</span><br><span class="line"></span><br><span class="line">        _this.<span class="property">cb</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.<span class="property">successCB</span> &amp;&amp; item.<span class="title function_">successCB</span>(_this.<span class="property">result</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_this.<span class="property">status</span> !== <span class="string">&quot;pending&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// console.log(&quot;reject&quot;)</span></span><br><span class="line">        _this.<span class="property">status</span> = <span class="string">&quot;rejected&quot;</span></span><br><span class="line">        _this.<span class="property">result</span> = res;</span><br><span class="line">        _this.<span class="property">cb</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.<span class="property">failCB</span> &amp;&amp; item.<span class="title function_">failCB</span>(_this.<span class="property">result</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">KerwinPromise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">successCB, failCB</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!successCB)&#123;</span><br><span class="line">        successCB = <span class="function"><span class="params">value</span>=&gt;</span>value</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!failCB)&#123;</span><br><span class="line">        failCB = <span class="function"><span class="params">error</span>=&gt;</span>error</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// successCB()</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KerwinPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&quot;fulfilled&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> result = successCB &amp;&amp; <span class="title function_">successCB</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">            <span class="comment">// console.log(result);</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="title class_">KerwinPromise</span>) &#123;</span><br><span class="line">                result.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">// console.log(res)</span></span><br><span class="line">                    <span class="title function_">resolve</span>(res);</span><br><span class="line">                &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">// console.log(err)</span></span><br><span class="line">                    <span class="title function_">reject</span>(err)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&quot;rejected&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> result = failCB &amp;&amp; <span class="title function_">failCB</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="title class_">KerwinPromise</span>) &#123;</span><br><span class="line">                result.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">// console.log(res)</span></span><br><span class="line">                    <span class="title function_">resolve</span>(res);</span><br><span class="line">                &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">// console.log(err)</span></span><br><span class="line">                    <span class="title function_">reject</span>(err)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&quot;pending&quot;</span>) &#123;</span><br><span class="line">            <span class="comment">//收集回调</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">cb</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">successCB</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">var</span> result = successCB &amp;&amp; <span class="title function_">successCB</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="title class_">KerwinPromise</span>) &#123;</span><br><span class="line">                        result.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                            <span class="comment">// console.log(res)</span></span><br><span class="line">                            <span class="title function_">resolve</span>(res);</span><br><span class="line">                        &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                            <span class="comment">// console.log(err)</span></span><br><span class="line">                            <span class="title function_">reject</span>(err)</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="title function_">resolve</span>(result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">failCB</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">var</span> result = failCB &amp;&amp; <span class="title function_">failCB</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">                    <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="title class_">KerwinPromise</span>) &#123;</span><br><span class="line">                        result.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                            <span class="comment">// console.log(res)</span></span><br><span class="line">                            <span class="title function_">resolve</span>(res);</span><br><span class="line">                        &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                            <span class="comment">// console.log(err)</span></span><br><span class="line">                            <span class="title function_">reject</span>(err)</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="title function_">reject</span>(result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">KerwinPromise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">catch</span>= <span class="keyword">function</span>(<span class="params">failCB</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">undefined</span>,failCB)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="六-Async与Await"><a href="#六-Async与Await" class="headerlink" title="六.Async与Await"></a>六.Async与Await</h2><h3 id="1-Async"><a href="#1-Async" class="headerlink" title="1.Async"></a>1.Async</h3><p>async 函数，使得异步操作变得更加方便。</p>
<ul>
<li>更好的语义。</li>
<li>返回值是 Promise。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>()</span><br></pre></td></tr></table></figure>



<h3 id="2-Await"><a href="#2-Await" class="headerlink" title="2.Await"></a>2.Await</h3><p><code>await</code>命令后面是一个 Promise 对象，返回该对象的结果。如果不是 Promise 对象，就直接返回对应的值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> res1 =  <span class="keyword">await</span> <span class="title function_">ajax</span>(<span class="string">&quot;http://localhost:3000/news1&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> res2 =  <span class="keyword">await</span> <span class="title function_">ajax</span>(<span class="string">&quot;http://localhost:3000/news2&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> res2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;返回结果&quot;</span>,res)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;err&quot;</span>,err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="3-错误处理"><a href="#3-错误处理" class="headerlink" title="3.错误处理"></a>3.错误处理</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res1 =  <span class="keyword">await</span> <span class="title function_">ajax</span>(<span class="string">&quot;http://localhost:3000/news1&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> res2 =  <span class="keyword">await</span> <span class="title function_">ajax</span>(<span class="string">&quot;http://localhost:3000/news2&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;err&quot;</span>,err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong><strong>如果对你有帮助，点赞、收藏、关注是我更新的动力！👋🌟🚀</strong></strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>React基本使用第二版</title>
    <url>/blog/2024/02/16/React%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E7%AC%AC%E4%BA%8C%E7%89%88/</url>
    <content><![CDATA[<h1 id="React基本使用第二版"><a href="#React基本使用第二版" class="headerlink" title="React基本使用第二版"></a>React基本使用第二版</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><p>1.网页下载</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">npm i react react-dom</span><br></pre></td></tr></table></figure>

<p>2.全局安装脚手架</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">npm i -g create-react-app</span><br></pre></td></tr></table></figure>


<h2 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2.创建项目"></a>2.创建项目</h2><p>1.直接创建项目</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-app</span><br></pre></td></tr></table></figure>

<p>2.npm创建项目</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-app --use-npm</span><br></pre></td></tr></table></figure>

<p>3.脚手架创建项目</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">create-react-app my-app</span><br></pre></td></tr></table></figure>

<h2 id="3-运行、构建、测试、打包、"><a href="#3-运行、构建、测试、打包、" class="headerlink" title="3.运行、构建、测试、打包、"></a>3.运行、构建、测试、打包、</h2><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">start</span></span><br><span class="line"></span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line">npm test</span><br><span class="line"></span><br><span class="line">npm run eject</span><br></pre></td></tr></table></figure>



<h2 id="4-项目结构"><a href="#4-项目结构" class="headerlink" title="4.项目结构"></a>4.项目结构</h2><p>一、node_modules(依赖目录)</p>
<p>二、public(公共资源目录)</p>
<p>三、src(源文件目录)</p>
<p>​		1.index.js(项目的入口文件)</p>
<p>​		2.app.js(从入口文件出获取到的app实例文件)</p>
<p>​		&#x2F;&#x2F;  需要手动创建</p>
<p>​		3.api目录</p>
<p>​		4.assets目录</p>
<p>​		5.components目录</p>
<p>​		6.config目录</p>
<p>​		7.utils目录</p>
<p>​		8.views目录</p>
<h2 id="5-快捷键"><a href="#5-快捷键" class="headerlink" title="5.快捷键"></a>5.快捷键</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.rfc --- 快速生成页面框架代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Layout</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Layout<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="6-配置eslint"><a href="#6-配置eslint" class="headerlink" title="6.配置eslint"></a>6.配置eslint</h2><p>在package中，可以先把eslint配置的这段代码删掉，以免不必要的报错。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;eslintConfig&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;extends&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;react-app&quot;</span>,</span><br><span class="line">    <span class="string">&quot;react-app/jest&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="7-安装和引入antd"><a href="#7-安装和引入antd" class="headerlink" title="7. 安装和引入antd"></a>7. 安装和引入antd</h2><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.全局</span><br><span class="line">npm install antd-init -g</span><br><span class="line"></span><br><span class="line">antd-init</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.项目</span><br><span class="line">npm install antd --save</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom/client&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;antd/dist/reset.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<h2 id="8-使用antd组件"><a href="#8-使用antd组件" class="headerlink" title="8. 使用antd组件"></a>8. 使用antd组件</h2><p>[antd官网]: <a href="https://ant.design/components/button-cn">https://ant.design/components/button-cn</a>	“antd”</p>
<h2 id="7-安装react-router-dom"><a href="#7-安装react-router-dom" class="headerlink" title="7. 安装react-router-dom"></a>7. 安装react-router-dom</h2><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">npm install react-router-dom</span><br></pre></td></tr></table></figure>



<h2 id="9-配置路由"><a href="#9-配置路由" class="headerlink" title="9.配置路由"></a>9.配置路由</h2><p>react项目的入口文件为index.js，我一般把路由直接写在app.js中，也可以新建一个router文件夹下写。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./App.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span>, <span class="title class_">Routes</span>, <span class="title class_">Route</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Layout</span> <span class="keyword">from</span> <span class="string">&quot;./views/Layout/Layout&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&quot;./views/Login/Login&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Sale</span> <span class="keyword">from</span> <span class="string">&quot;./views/Sale/Sale&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&quot;./views/Detail/Detail&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">User</span> <span class="keyword">from</span> <span class="string">&quot;./views/User/User&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Role</span> <span class="keyword">from</span> <span class="string">&quot;./views/Role/Role&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Room</span> <span class="keyword">from</span> <span class="string">&quot;./views/Room/Room&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Type</span> <span class="keyword">from</span> <span class="string">&quot;./views/Type/Type&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Login</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/layout&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Layout</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;sale&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Sale</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;detail&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Detail</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;role&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Role</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;user&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">User</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;room&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Room</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;type&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Type</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom/client&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;antd/dist/reset.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>



<h2 id="10-二级页面路由和重定向"><a href="#10-二级页面路由和重定向" class="headerlink" title="10.二级页面路由和重定向"></a>10.二级页面路由和重定向</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.在需要跳转的</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Outlet</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.在需要路由的地方写上Outlet标签</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">Outlet</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.使用如下生命周期钩子函数将页面在渲染前跳转到重定向位置</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setCurrent</span>(<span class="string">&quot;1-1&quot;</span>);</span><br><span class="line">    <span class="title function_">navigate</span>(<span class="string">&quot;/layout/sale&quot;</span>);</span><br><span class="line">  &#125;, []);</span><br></pre></td></tr></table></figure>



<h2 id="11-页面跳转"><a href="#11-页面跳转" class="headerlink" title="11.页面跳转"></a>11.页面跳转</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.在需要跳转的页面导入如下，跳转到二级页面时一般配合使用。</span></span><br><span class="line"><span class="keyword">import</span> &#123; useNavigate, <span class="title class_">Outlet</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.对方法进行适当改造，方便使用。</span></span><br><span class="line"><span class="keyword">let</span> navigate = <span class="title function_">useNavigate</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.编写跳转页面的方法，跳转页面。</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clickMenu</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCurrent</span>(e.<span class="property">key</span>);</span><br><span class="line">    <span class="keyword">switch</span> (e.<span class="property">key</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;1-1&quot;</span>:</span><br><span class="line">        <span class="title function_">navigate</span>(<span class="string">&quot;/layout/sale&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;1-2&quot;</span>:</span><br><span class="line">        <span class="title function_">navigate</span>(<span class="string">&quot;/layout/detail&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;2-1&quot;</span>:</span><br><span class="line">        <span class="title function_">navigate</span>(<span class="string">&quot;/layout/role&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;2-2&quot;</span>:</span><br><span class="line">        <span class="title function_">navigate</span>(<span class="string">&quot;/layout/user&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 方法触发位置在这里</span></span><br><span class="line">          <span class="language-xml"><span class="tag">&lt;<span class="name">Menu</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">theme</span>=<span class="string">&quot;dark&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">mode</span>=<span class="string">&quot;inline&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">defaultSelectedKeys</span>=<span class="string">&#123;[</span>&quot;<span class="attr">1-1</span>&quot;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">items</span>=<span class="string">&#123;asideMenu&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;clickMenu&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">selectedKeys</span>=<span class="string">&#123;current&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br></pre></td></tr></table></figure>



<h2 id="12-hooks"><a href="#12-hooks" class="headerlink" title="12.hooks"></a>12.hooks</h2><p>[Hooks]: <a href="https://zh-hans.react.dev/reference/react">https://zh-hans.react.dev/reference/react</a>	“React Hook”</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot+Vue前后端分离项目如何部署到服务器</title>
    <url>/blog/2024/03/13/Spring-Boot-Vue%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E5%A6%82%E4%BD%95%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h1 id="Spring-Boot-Vue前后端分离项目如何部署到服务器"><a href="#Spring-Boot-Vue前后端分离项目如何部署到服务器" class="headerlink" title="Spring Boot+Vue前后端分离项目如何部署到服务器"></a>Spring Boot+Vue前后端分离项目如何部署到服务器</h1><p>部署Spring Boot+Vue前后端分离项目到服务器涉及以下步骤：首先，将Spring Boot后端应用打包成jar或war文件并上传至服务器，通过运行<code>java -jar</code>命令启动后端服务。接着，构建Vue前端项目生成静态文件，同样上传至服务器的Web服务器目录，如Nginx的<code>html</code>目录。最后，配置Nginx作为反向代理，将前端请求代理至Vue应用目录，同时确保后端API的路径正确映射。这样，前后端分离的项目就成功部署在服务器上。<br>部署Spring Boot和Vue项目到服务器之前，需要确保服务器具备以下环境和工具：</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="通用准备："><a href="#通用准备：" class="headerlink" title="通用准备："></a>通用准备：</h3><ol>
<li><p><strong>服务器</strong>：</p>
<ul>
<li>一台具有稳定网络连接的服务器，可以是云服务器或本地服务器。</li>
<li>服务器操作系统，常见的有Linux发行版（如Ubuntu、CentOS）或Windows Server。</li>
</ul>
</li>
<li><p><strong>SSH访问</strong>（对于Linux服务器）：</p>
<ul>
<li>SSH客户端，如xshell。<br><img src="https://img-blog.csdnimg.cn/direct/3e3e91fbf3b14c75bc982f8a8d826a8a.png#pic_center" alt="在这里插入图片描述"></li>
</ul>
</li>
<li><p><strong>文件传输工具</strong>：</p>
<ul>
<li>FTP客户端，如xftp。</li>
<li>或者SCP工具，如WinSCP（Windows）或终端（macOS、Linux）。<br><img src="https://img-blog.csdnimg.cn/direct/e4f3501aa7a74683a442a26251e45da3.png#pic_center" alt="在这里插入图片描述"></li>
</ul>
</li>
</ol>
<h3 id="数据库准备"><a href="#数据库准备" class="headerlink" title="数据库准备"></a>数据库准备</h3><ol>
<li><strong>MySQL环境</strong>：<ul>
<li>安装<code>MySQL5.7</code>或<code>MySQL8.0</code>。</li>
<li>可以通过运行<code>sudo systemctl status mysqld</code>来检查MySQL是否正在运行（MySQL需要配置远程访问）。</li>
</ul>
</li>
</ol>
<blockquote>
<ol start="15">
<li><strong><a href="https://blog.csdn.net/interest_ing_/article/details/136535378">CentOS上安装MySQL 5.7和MySQL 8.0教程</a></strong></li>
</ol>
<ul>
<li>837阅读 · 21点赞 · 13收藏</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/direct/f23e3c9bd17e47fd9deec227ced0dea8.png" alt="在这里插入图片描述"></p>
</blockquote>
<ol start="2">
<li><strong>MySQL远程访问工具</strong>：<ul>
<li>用于构建远程访问<code>MySQL</code>工具，如<code>Navicat</code>。<br><img src="https://img-blog.csdnimg.cn/direct/3e0ea16bd4bd4626bf13d55ef1b568fa.png#pic_center" alt="在这里插入图片描述"></li>
</ul>
</li>
</ol>
<h3 id="Spring-Boot部署环境："><a href="#Spring-Boot部署环境：" class="headerlink" title="Spring Boot部署环境："></a>Spring Boot部署环境：</h3><ol>
<li><p><strong>Java环境</strong>：</p>
<ul>
<li>安装Java Development Kit (JDK)，至少需要1.8版本。</li>
<li>可以通过运行<code>java -version</code>和<code>javac -version</code>来检查Java是否已安装。</li>
</ul>
<blockquote>
<ol start="18">
<li><strong><a href="https://blog.csdn.net/interest_ing_/article/details/136521766">CentOS上安装JDK的详细教程</a></strong></li>
</ol>
<ul>
<li>739阅读 · 12点赞 · 13收藏</li>
</ul>
</blockquote>
</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/direct/323a32a31e05464aaad21f10964f9f07.png" alt="在这里插入图片描述"></p>
<ol start="2">
<li><strong>Maven或Gradle</strong>（如果需要本地构建）：<ul>
<li>用于构建Spring Boot项目的构建工具。</li>
<li>可以通过运行<code>mvn -version</code>或<code>gradle -v</code>来检查是否已安装。</li>
</ul>
</li>
</ol>
<h3 id="Vue-js部署环境："><a href="#Vue-js部署环境：" class="headerlink" title="Vue.js部署环境："></a>Vue.js部署环境：</h3><ol>
<li><p><strong>Node.js和npm</strong>：</p>
<ul>
<li>安装Node.js，它附带npm包管理器。</li>
<li>可以通过运行<code>node -v</code>和<code>npm -v</code>来检查是否已安装。</li>
</ul>
</li>
<li><p><strong>Web服务器</strong>：</p>
<ul>
<li>Nginx或Apache用于提供静态文件服务。</li>
<li>对于Nginx，可以通过运行<code>nginx -v</code>来检查是否已安装。</li>
<li>对于Apache，可以通过运行<code>apache2 -v</code>或<code>httpd -v</code>来检查是否已安装。</li>
</ul>
</li>
</ol>
<blockquote>
<ol start="23">
<li><strong><a href="https://blog.csdn.net/interest_ing_/article/details/136487540">CentOS上安装与配置Nginx</a></strong></li>
</ol>
<ul>
<li>683阅读 · 9点赞 · 6收藏</li>
</ul>
</blockquote>
<blockquote>
<ol start="30">
<li><strong><a href="https://blog.csdn.net/interest_ing_/article/details/129940608">手把手教你CentOS下载Nginx配置使用</a></strong></li>
</ol>
<ul>
<li>464阅读 · 2点赞 · 3收藏</li>
</ul>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/direct/4764b37aae684e44992bb1d84fd62bfc.png" alt="在这里插入图片描述"></p>
<h3 id="可选环境："><a href="#可选环境：" class="headerlink" title="可选环境："></a>可选环境：</h3><ol>
<li><p><strong>数据库</strong>：</p>
<ul>
<li>如果Spring Boot应用需要数据库，需要安装相应的数据库服务器，如MySQL、PostgreSQL等。</li>
<li>确保数据库服务已启动，并且应用有正确的数据库连接配置。</li>
</ul>
</li>
<li><p><strong>反向代理&#x2F;负载均衡</strong>：</p>
<ul>
<li>如果有多个应用实例或需要SSL终端，可能需要配置Nginx或HAProxy作为反向代理或负载均衡器。</li>
</ul>
</li>
<li><p><strong>容器化工具</strong>（如Docker）：</p>
<ul>
<li>如果使用Docker，需要在服务器上安装Docker和Docker Compose。</li>
</ul>
</li>
<li><p><strong>自动化部署工具</strong>（如Jenkins、GitLab CI&#x2F;CD）：</p>
<ul>
<li>如果需要自动化部署流程，可能需要安装和配置CI&#x2F;CD工具。</li>
</ul>
</li>
</ol>
<p>确保在部署之前，服务器上的环境和工具都已经正确安装和配置，这样可以避免在部署过程中遇到不必要的问题。</p>
<h2 id="运行sql文件创建数据库"><a href="#运行sql文件创建数据库" class="headerlink" title="运行sql文件创建数据库"></a>运行sql文件创建数据库</h2><ol>
<li><p><strong>远程连接服务器上的数据库</strong>：使用<code>Navicat</code>连接数据库。</p>
</li>
<li><p><strong>运行项目相关的<code>SQL</code>文件</strong>：运行<code>SQL</code>。</p>
</li>
</ol>
<h2 id="Spring-Boot项目部署到服务器"><a href="#Spring-Boot项目部署到服务器" class="headerlink" title="Spring Boot项目部署到服务器"></a>Spring Boot项目部署到服务器</h2><ol>
<li><p><strong>打包应用</strong>：<br>使用Maven或Gradle将Spring Boot项目打包成可执行的jar或war文件。如果使用Maven，可以在<code>pom.xml</code>中添加<code>spring-boot-maven-plugin</code>插件，并运行<code>mvn clean package</code>命令来打包。<br><img src="https://img-blog.csdnimg.cn/direct/a417ba19d15943798da682bd0b3d0f5e.png" alt="在这里插入图片描述"></p>
</li>
<li><p><strong>上传到服务器</strong>：<br>使用FTP、SCP或其他文件传输方法将打包好的jar或war文件上传到服务器的适当目录中。</p>
</li>
<li><p><strong>运行应用</strong>（如果是jar包）：<br>在服务器上，使用以下命令在后台运行jar文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nohup</span> java -jar yourapp.jar &gt; output.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<p>这将把应用的输出重定向到<code>output.log</code>文件中，并在后台运行。</p>
</li>
<li><p><strong>配置服务</strong>（可选）：<br>为了确保应用可以在系统启动时自动运行，并能在出现问题时自动重启，可以创建一个Systemd服务文件。</p>
</li>
<li><p><strong>开放端口</strong>：<br>确保服务器的防火墙设置允许外部访问Spring Boot应用的端口。</p>
</li>
</ol>
<h2 id="Vue项目部署到服务器"><a href="#Vue项目部署到服务器" class="headerlink" title="Vue项目部署到服务器"></a>Vue项目部署到服务器</h2><ol>
<li><p><strong>构建项目</strong>：<br>在本地环境中运行<code>npm run build</code>命令，这将会在Vue项目的<code>dist/</code>目录下生成构建后的文件。<br><img src="https://img-blog.csdnimg.cn/direct/31c7535e8d48423bacf213346127e80f.png" alt="在这里插入图片描述"></p>
</li>
<li><p><strong>上传文件</strong>：<br>将<code>dist/</code>目录下的所有文件上传到服务器的Web服务器目录中，例如Nginx或Apache的<code>html</code>或<code>public</code>目录。<br><img src="https://img-blog.csdnimg.cn/direct/e1b7456e53764f6ab778b59ff70fa3c3.png" alt="在这里插入图片描述"></p>
</li>
<li><p><strong>配置Web服务器</strong>：<br>配置Web服务器以提供静态文件服务。如果是Nginx，你需要编辑<code>nginx.conf</code>或相应的配置文件，设置正确的根目录，并可能需要配置SSL（如果你使用的是HTTPS）。</p>
</li>
<li><p><strong>重启Web服务器</strong>：<br>为了使配置生效，重启Web服务器。<br>先查询nginx服务运行的进程：<code>ps -ef|grep nginx</code><br>杀死所查询到的nginx服务：<code>kill -9 [ 查到的进程]</code><br>重启服务：<code>cd /nginx安装的sbin目录</code><br><code>./nginx</code></p>
</li>
<li><p><strong>访问应用</strong>：<br>在Web浏览器中输入服务器的IP地址或域名，你应该能够看到你的Vue应用。</p>
</li>
</ol>
<h3 id="综合步骤"><a href="#综合步骤" class="headerlink" title="综合步骤"></a>综合步骤</h3><p>对于同时包含前端Vue项目和后端Spring Boot项目的全栈应用，通常的做法是：</p>
<ul>
<li>将Spring Boot应用打包并部署到服务器，作为后端API服务。</li>
<li>将Vue应用构建并上传到同一服务器的Web服务器目录中，或者配置反向代理（如Nginx）将前端请求代理到Vue应用的服务器。</li>
</ul>
<p>确保在部署过程中，Vue应用的<code>publicPath</code>或<code>base</code>配置正确指向后端API的URL，以确保前后端能够正确地通信。</p>
<p>以上步骤是部署Spring Boot和Vue项目到服务器的基本流程。具体的命令和配置可能会根据你的项目和服务器环境有所不同。</p>
<p><strong><strong>如果对你有帮助，点赞、收藏、关注是我更新的动力！👋🌟🚀</strong></strong></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 多环境配置：YML 文件的三种高效方法</title>
    <url>/blog/2024/04/17/Spring-Boot-%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%EF%BC%9AYML-%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%89%E7%A7%8D%E9%AB%98%E6%95%88%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Spring-Boot-多环境配置：YML-文件的三种高效方法"><a href="#Spring-Boot-多环境配置：YML-文件的三种高效方法" class="headerlink" title="Spring Boot 多环境配置：YML 文件的三种高效方法"></a>Spring Boot 多环境配置：YML 文件的三种高效方法</h1><p>在现代软件开发实践中，维护多个环境（如开发、测试和生产）已经成为标准操作。Spring Boot 通过其灵活的配置机制，使得在不同环境中管理应用设置变得简单。尤其是使用 YAML 文件进行配置，它提供了一种简洁、易读的方式来定义应用的配置。本文将探讨在 Spring Boot 中使用 YAML 文件进行多环境配置的三种方法。</p>
<h2 id="1-使用不同文件名进行环境配置"><a href="#1-使用不同文件名进行环境配置" class="headerlink" title="1. 使用不同文件名进行环境配置"></a>1. 使用不同文件名进行环境配置</h2><p>Spring Boot 允许你为不同的环境创建具有特定名称的配置文件。例如，你可以有 <code>application.yml</code> 用于默认配置，<code>application-dev.yml</code> 用于开发环境，<code>application-test.yml</code> 用于测试环境，以及 <code>application-prod.yml</code> 用于生产环境。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application.yml (默认环境)</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">$&#123;DB_URL:localhost&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># application-dev.yml (开发环境)</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">localhost:3306/db_dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># application-test.yml (测试环境)</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">localhost:3306/db_test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># application-prod.yml (生产环境)</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">localhost:3306/db_prod</span></span><br></pre></td></tr></table></figure>

<p>你可以通过设置 <code>spring.profiles.active</code> 属性来激活特定的环境配置。例如，如果你想使用开发环境配置，可以在启动应用时添加 <code>-Dspring.profiles.active=dev</code> 参数。</p>
<h2 id="2-使用-YAML-文件内的部分进行环境配置"><a href="#2-使用-YAML-文件内的部分进行环境配置" class="headerlink" title="2. 使用 YAML 文件内的部分进行环境配置"></a>2. 使用 YAML 文件内的部分进行环境配置</h2><p>在单个 YAML 文件中，你可以使用“部分”来区分不同环境的配置。这种方法的好处是所有配置都集中在一个文件中，易于管理。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">include:</span> <span class="string">common</span></span><br><span class="line">  <span class="comment"># 公共配置</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 特定环境配置</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">localhost:3306/db_dev</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">dev_user</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">dev_pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">localhost:3306/db_test</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">test_user</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">test_pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">prod</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">localhost:3306/db_prod</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">prod_user</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">prod_pass</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>common</code> 部分包含了所有环境共享的配置。每个 <code>---</code> 分隔的块代表一个特定的环境配置。</p>
<h2 id="3-使用环境变量进行动态配置"><a href="#3-使用环境变量进行动态配置" class="headerlink" title="3. 使用环境变量进行动态配置"></a>3. 使用环境变量进行动态配置</h2><p>Spring Boot 可以读取环境变量来动态设置配置。你可以在系统环境变量或启动参数中设置 <code>SPRING_CONFIG_NAME</code> 和 <code>SPRING_CONFIG_LOCATION</code> 来指定配置文件的名称和位置。</p>
<p>例如，你可以创建一个 <code>application-override.yml</code> 文件来覆盖其他配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application-override.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">override_user</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">override_pass</span></span><br></pre></td></tr></table></figure>

<p>然后，通过设置环境变量 <code>SPRING_CONFIG_NAME=application</code> 和 <code>SPRING_CONFIG_LOCATION=/path/to/config</code>，Spring Boot 会加载 <code>application.yml</code> 和指定路径下的配置文件，并使用 <code>application-override.yml</code> 中的配置覆盖它们。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot单元测试全指南：使用Mockito和AssertJ</title>
    <url>/blog/2024/03/31/Spring-Boot%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%85%A8%E6%8C%87%E5%8D%97%EF%BC%9A%E4%BD%BF%E7%94%A8Mockito%E5%92%8CAssertJ/</url>
    <content><![CDATA[<h1 id="Spring-Boot单元测试全指南：使用Mockito和AssertJ"><a href="#Spring-Boot单元测试全指南：使用Mockito和AssertJ" class="headerlink" title="Spring Boot单元测试全指南：使用Mockito和AssertJ"></a>Spring Boot单元测试全指南：使用Mockito和AssertJ</h1><p>在现代软件开发实践中，单元测试是不可或缺的一环，它帮助我们确保代码的可靠性和稳定性。对于使用Spring Boot构建的应用，编写单元测试不仅可以验证业务逻辑的正确性，还可以确保服务的健壮性。本文将详细介绍如何在Spring Boot项目中进行单元测试，包括使用Mockito进行依赖模拟和使用AssertJ进行断言。</p>
<h2 id="1-添加测试依赖"><a href="#1-添加测试依赖" class="headerlink" title="1. 添加测试依赖"></a>1. 添加测试依赖</h2><p>在开始编写测试之前，我们需要确保项目中包含了Spring Boot的测试依赖。这些依赖包括JUnit（测试框架）、Mockito（模拟框架）和AssertJ（断言库）。以下是Maven的依赖配置示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Boot Test Starter --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- JUnit 5 dependency --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Mockito dependency --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mockito<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mockito-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- AssertJ dependency --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.assertj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>assertj-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-编写服务类"><a href="#2-编写服务类" class="headerlink" title="2. 编写服务类"></a>2. 编写服务类</h2><p>假设我们有一个<code>MyService</code>服务类，它处理一些业务逻辑，并依赖于<code>AnotherService</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AnotherService anotherService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyService</span><span class="params">(AnotherService anotherService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.anotherService = anotherService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doSomething</span><span class="params">(String input)</span> &#123;</span><br><span class="line">        <span class="comment">// 假设这个方法处理输入，并依赖anotherService</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">processedInput</span> <span class="operator">=</span> anotherService.processInput(input);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Result: &quot;</span> + processedInput;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-创建测试类"><a href="#3-创建测试类" class="headerlink" title="3. 创建测试类"></a>3. 创建测试类</h2><p>创建一个名为<code>MyServiceTest</code>的测试类，并使用<code>@SpringBootTest</code>注解来标记这是一个Spring Boot的测试类。这将启动Spring应用上下文，允许我们注入真正的Spring Beans。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.mockito.InjectMocks;</span><br><span class="line"><span class="keyword">import</span> org.mockito.Mock;</span><br><span class="line"><span class="keyword">import</span> org.mockito.MockitoAnnotations;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.when;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.assertj.core.api.Assertions.assertThat;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> AnotherService anotherService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectMocks</span></span><br><span class="line">    <span class="keyword">private</span> MyService myService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDoSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Arrange</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">expectedOutput</span> <span class="operator">=</span> <span class="string">&quot;Result: test processed&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">processedInput</span> <span class="operator">=</span> <span class="string">&quot;test processed&quot;</span>;</span><br><span class="line">        when(anotherService.processInput(input)).thenReturn(processedInput);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Act</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> myService.doSomething(input);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Assert</span></span><br><span class="line">        assertThat(result).isEqualTo(expectedOutput);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化Mockito注解</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        MockitoAnnotations.openMocks(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>MyServiceTest</code>类中，我们使用<code>@Mock</code>注解创建了一个<code>AnotherService</code>的模拟对象，并通过<code>@InjectMocks</code>注解将其注入到<code>MyService</code>中。在<code>testDoSomething</code>测试方法中，我们模拟了<code>processInput</code>方法的返回值，并调用了<code>doSomething</code>方法来验证结果是否符合预期。</p>
<h2 id="4-运行测试"><a href="#4-运行测试" class="headerlink" title="4. 运行测试"></a>4. 运行测试</h2><p>运行测试方法，可以使用IDE的测试运行功能，或者使用Maven&#x2F;Gradle命令行工具。例如，在Maven项目中，你可以使用以下命令来运行测试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<h2 id="5-结语"><a href="#5-结语" class="headerlink" title="5. 结语"></a>5. 结语</h2><p>通过上述步骤，我们可以在Spring Boot项目中编写和运行单元测试。使用Mockito和AssertJ，我们可以方便地模拟依赖和验证结果，确保代码的正确性和稳定性。记住，良好的测试习惯是持续交付高质量软件的关键。通过编写单元测试，我们可以在代码变更时快速发现问题，提高开发效率，同时也为未来的代码维护打下坚实的基础。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud原理详解</title>
    <url>/blog/2024/03/12/Spring-Cloud%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="Spring-Cloud原理详解"><a href="#Spring-Cloud原理详解" class="headerlink" title="Spring Cloud原理详解"></a>Spring Cloud原理详解</h1><h2 id="Spring-Cloud是什么？"><a href="#Spring-Cloud是什么？" class="headerlink" title="Spring Cloud是什么？"></a>Spring Cloud是什么？</h2><p><code>Spring Cloud</code> 是一个基于<code>Spring Boot</code>实现的云应用开发工具，它为基于JVM的云应用开发中涉及的配置管理、服务发现、断路器、智能路由、微代理、事件总线、全局锁、决策竞选、分布式会话等操作提供了一种简单的开发方式。</p>
<p><a href="https://spring.io/projects/spring-cloud">Spring Cloud官网</a><br><img src="https://img-blog.csdnimg.cn/direct/fa8d5d05d5fb4e3897693ed024c4742b.png#pic_center" alt="在这里插入图片描述"></p>
<h2 id="Spring-Boot是什么"><a href="#Spring-Boot是什么" class="headerlink" title="Spring Boot是什么"></a>Spring Boot是什么</h2><p>Spring Boot是一个开源的Java基础框架，旨在简化Spring应用的创建和开发过程。它是基于Spring框架的一个模块，提供了一种快速、便捷的方式来开发基于Spring的应用程序。Spring Boot的主要目标是减少配置和部署的复杂性，使得开发者可以轻松地创建独立的、生产级别的基于Spring的应用程序。</p>
<h3 id="核心特性"><a href="#核心特性" class="headerlink" title="核心特性"></a>核心特性</h3><ol>
<li><p><strong>自动配置</strong>：Spring Boot通过自动配置机制减少了显式配置的需求。它能够根据项目中的jar依赖自动配置Spring和第三方库。</p>
</li>
<li><p><strong>独立运行</strong>：Spring Boot应用程序可以打包成一个独立的JAR文件，这个JAR文件包含了所有必要的依赖项，可以直接运行，无需部署到外部的应用服务器。</p>
</li>
<li><p><strong>内嵌服务器</strong>：Spring Boot内嵌了Tomcat、Jetty或Undertow等Servlet容器，无需额外安装Web服务器即可运行Web应用。</p>
</li>
<li><p><strong>生产就绪</strong>：Spring Boot提供了各种生产级别的特性，如健康检查、度量信息收集、外部化配置等，以便于监控和管理应用程序。</p>
</li>
<li><p><strong>无代码生成和XML配置</strong>：Spring Boot不需要生成大量的样板代码，也不需要复杂的XML配置文件，大多数情况下使用注解和一些属性文件即可完成配置。</p>
</li>
<li><p><strong>微服务支持</strong>：Spring Boot与Spring Cloud紧密集成，支持构建微服务架构的应用，提供了服务发现、配置管理、负载均衡等微服务相关的功能。</p>
</li>
</ol>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul>
<li><strong>快速开发</strong>：Spring Boot的约定优于配置的原则使得开发者可以快速搭建和运行Spring应用程序。</li>
<li><strong>简化部署</strong>：独立的JAR文件使得部署变得简单，可以直接通过Java命令运行，也可以打包为Docker容器。</li>
<li><strong>社区支持</strong>：Spring Boot由一个活跃的社区支持，有大量的文档、教程和第三方库可供选择。</li>
<li><strong>灵活性</strong>：虽然Spring Boot提供了默认配置，但它同样支持高度定制化，满足复杂应用的需求。</li>
</ul>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>Spring Boot适用于各种类型的Java应用程序，包括Web应用、RESTful API、微服务、数据访问应用等。它特别适合于快速原型开发和中小型项目，但也可以用于大型企业级应用的开发。</p>
<h2 id="Spring-Cloud发展历程"><a href="#Spring-Cloud发展历程" class="headerlink" title="Spring Cloud发展历程"></a>Spring Cloud发展历程</h2><p>Spring Cloud的发展史是与Spring框架的演进紧密相连的。</p>
<h3 id="2003年-Spring框架的诞生"><a href="#2003年-Spring框架的诞生" class="headerlink" title="2003年 - Spring框架的诞生"></a>2003年 - Spring框架的诞生</h3><p>Spring框架最初由Rod Johnson创建，并在2003年发布。它旨在简化Java EE开发，通过提供全面的编程和配置模型来解决企业级应用开发的复杂性。</p>
<h3 id="2013年-Spring-Boot的发布"><a href="#2013年-Spring-Boot的发布" class="headerlink" title="2013年 - Spring Boot的发布"></a>2013年 - Spring Boot的发布</h3><p>随着时间的推移，Spring生态系统变得越来越庞大，配置也变得越来越复杂。为了简化Spring应用的创建和部署，Pivotal团队在2013年推出了Spring Boot，它通过提供默认配置来简化Spring应用的开发。</p>
<h3 id="2014年-Spring-Cloud的初步形成"><a href="#2014年-Spring-Cloud的初步形成" class="headerlink" title="2014年 - Spring Cloud的初步形成"></a>2014年 - Spring Cloud的初步形成</h3><p>随着微服务架构的流行，开发者需要一套工具来帮助他们在云环境中构建和管理分布式系统。Spring Cloud在2014年左右开始形成，它提供了一系列框架来支持微服务架构模式。</p>
<h3 id="2015年-Spring-Cloud的稳定发展"><a href="#2015年-Spring-Cloud的稳定发展" class="headerlink" title="2015年 - Spring Cloud的稳定发展"></a>2015年 - Spring Cloud的稳定发展</h3><p>Spring Cloud发布了多个子项目，如Spring Cloud Config、Spring Cloud Netflix Eureka、Spring Cloud Hystrix等，这些项目帮助开发者解决了配置管理、服务发现、断路器等问题。</p>
<h3 id="2016年-Spring-Cloud的成熟"><a href="#2016年-Spring-Cloud的成熟" class="headerlink" title="2016年 - Spring Cloud的成熟"></a>2016年 - Spring Cloud的成熟</h3><p>Spring Cloud继续扩展，引入了更多的项目，如Spring Cloud Stream、Spring Cloud Function等，同时，Spring Cloud Netflix项目也得到了进一步的发展和完善。</p>
<h3 id="2017年-服务网格的探索"><a href="#2017年-服务网格的探索" class="headerlink" title="2017年 - 服务网格的探索"></a>2017年 - 服务网格的探索</h3><p>随着服务网格架构的兴起，Spring Cloud开始探索如何将服务网格技术与Spring Cloud集成，以便更好地支持微服务的监控、安全和流量控制。</p>
<h3 id="2018年-Spring-Cloud的整合与演进"><a href="#2018年-Spring-Cloud的整合与演进" class="headerlink" title="2018年 - Spring Cloud的整合与演进"></a>2018年 - Spring Cloud的整合与演进</h3><p>Spring Cloud发布了Spring Cloud Data Flow，用于简化数据驱动的微服务应用的开发。同时，Spring Cloud也整合了Spring Security，提供了更全面的安全解决方案。</p>
<h3 id="2019年-向Serverless的转变"><a href="#2019年-向Serverless的转变" class="headerlink" title="2019年 - 向Serverless的转变"></a>2019年 - 向Serverless的转变</h3><p>随着云原生技术的发展，Spring Cloud开始支持Serverless架构，发布了Spring Cloud Function for Kubernetes，使得开发者可以在Kubernetes上以无服务器（Serverless）的方式运行Spring Boot函数。</p>
<h3 id="2020年至今-持续创新与适应"><a href="#2020年至今-持续创新与适应" class="headerlink" title="2020年至今 - 持续创新与适应"></a>2020年至今 - 持续创新与适应</h3><p>Spring Cloud持续创新，适应新的技术和趋势，如增强对Spring Native的支持，使得Spring应用可以编译为本地二进制文件，提高启动速度和运行效率。同时，Spring Cloud也继续扩展其对云原生和微服务的支持。</p>
<p>Spring Cloud的发展史是不断适应新的技术挑战和市场需求的历史。随着云计算和微服务架构的不断演进，Spring Cloud也在不断地更新和扩展其项目，以帮助开发者构建更加灵活、可扩展和可维护的云原生应用。</p>
<h2 id="Spring-Cloud核心组件"><a href="#Spring-Cloud核心组件" class="headerlink" title="Spring Cloud核心组件"></a>Spring Cloud核心组件</h2><ol>
<li><p><strong>Spring Cloud Config</strong>：</p>
<ul>
<li>用于配置管理，支持集中化外部配置。可以存储配置信息并在运行时动态更新，支持不同环境（开发、测试、生产）的配置信息。</li>
</ul>
</li>
<li><p><strong>Spring Cloud Netflix Eureka</strong>：</p>
<ul>
<li>服务注册与发现机制，提供服务注册中心，允许微服务应用进行注册和发现。Eureka Client用于服务的注册与注销，Eureka Server用于服务的注册信息管理和服务发现。</li>
</ul>
</li>
<li><p><strong>Spring Cloud Netflix Ribbon</strong>：</p>
<ul>
<li>客户端负载均衡器，提供基于HTTP和TCP的客户端负载均衡算法。Ribbon与Eureka结合使用，可以实现服务调用时的负载均衡。</li>
</ul>
</li>
<li><p><strong>Spring Cloud Netflix Hystrix</strong>：</p>
<ul>
<li>断路器模式的实现，防止服务雪崩效应。当某个服务出现故障时，Hystrix可以快速失败或提供备选响应，而不是长时间的等待或重试。</li>
</ul>
</li>
<li><p><strong>Spring Cloud Zuul</strong>：</p>
<ul>
<li>动态路由，用于API网关服务，提供请求路由、过滤和安全控制。Zuul可以与Ribbon和Eureka结合，实现请求的负载均衡和服务发现。</li>
</ul>
</li>
<li><p><strong>Spring Cloud Bus</strong>：</p>
<ul>
<li>事件、消息总线，用于传播服务间的事件和状态变化。结合Spring Cloud Config可以实现配置的动态刷新。</li>
</ul>
</li>
<li><p><strong>Spring Cloud Security</strong>：</p>
<ul>
<li>安全管理，提供认证和授权的支持。可以集成OAuth2、LDAP等安全机制，保护微服务的安全性。</li>
</ul>
</li>
<li><p><strong>Spring Cloud Stream</strong>：</p>
<ul>
<li>消息驱动的微服务框架，用于构建基于消息的异步系统。支持与外部消息中间件（如RabbitMQ、Kafka）的集成。</li>
</ul>
</li>
<li><p><strong>Spring Cloud Sleuth</strong>：</p>
<ul>
<li>分布式跟踪，支持跨服务的请求链路追踪。通常与Zipkin或ELK Stack结合使用，以监控和分析微服务的调用链。</li>
</ul>
</li>
</ol>
<h2 id="Spring-Cloud工作原理"><a href="#Spring-Cloud工作原理" class="headerlink" title="Spring Cloud工作原理"></a>Spring Cloud工作原理</h2><ol>
<li><p><strong>服务注册与发现</strong>：</p>
<ul>
<li>微服务启动时，向Eureka Server注册自己的信息。</li>
<li>服务之间通过Eureka Server查询其他服务的实例列表和地址。</li>
</ul>
</li>
<li><p><strong>客户端负载均衡</strong>：</p>
<ul>
<li>Ribbon客户端通过Eureka获取服务实例列表，并根据负载均衡策略选择一个实例进行调用。</li>
</ul>
</li>
<li><p><strong>断路器</strong>：</p>
<ul>
<li>Hystrix监控服务调用的成功率和响应时间，当失败率过高或响应时间过长时，会自动切换到断路状态，避免进一步的调用。</li>
</ul>
</li>
<li><p><strong>API网关</strong>：</p>
<ul>
<li>Zuul作为API网关，统一处理所有服务的请求，提供路由、过滤和安全控制。</li>
</ul>
</li>
<li><p><strong>配置管理</strong>：</p>
<ul>
<li>应用启动时从Config Server获取配置信息。</li>
<li>当配置信息发生变化时，通过Bus广播给所有订阅的服务，实现配置的动态更新。</li>
</ul>
</li>
<li><p><strong>消息驱动</strong>：</p>
<ul>
<li>应用通过Stream框架发布和消费消息，实现服务间的异步通信。</li>
</ul>
</li>
<li><p><strong>分布式跟踪</strong>：</p>
<ul>
<li>Sleuth生成和传播跟踪ID，通过Zipkin实现跨服务调用的链路追踪。</li>
</ul>
</li>
</ol>
<p>Spring Cloud通过这些组件和机制，简化了微服务架构下的应用开发、部署和运维。开发者可以利用Spring Cloud快速构建出弹性、可扩展和可维护的云原生应用。</p>
<p><strong><strong>如果对你有帮助，点赞、收藏、关注是我更新的动力！👋🌟🚀</strong></strong></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 3项目集成Swagger3教程</title>
    <url>/blog/2024/02/16/Springboot%E5%B7%A5%E7%A8%8B%E4%BD%BF%E7%94%A8Swagger%E7%94%9F%E4%BA%A7%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h1 id="Spring-Boot-3项目集成Swagger3教程"><a href="#Spring-Boot-3项目集成Swagger3教程" class="headerlink" title="Spring Boot 3项目集成Swagger3教程"></a>Spring Boot 3项目集成Swagger3教程</h1><p>Swagger是一个用于设计、构建、记录和使用RESTful web服务的开源软件框架。Swagger 3（OpenAPI 3.0）提供了更加强大和灵活的API文档生成能力。本教程将指导您如何在Spring Boot 3项目中集成Swagger3，并使用Knife4j作为UI界面。</p>
<h2 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h2><p>首先，您需要在项目的<code>pom.xml</code>文件中添加Swagger3的依赖。同时，为了确保依赖能够正确下载，您可以添加阿里云的Maven镜像仓库。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--swagger3--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi3-jakarta-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--阿里云镜像--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-配置Swagger"><a href="#2-配置Swagger" class="headerlink" title="2. 配置Swagger"></a>2. 配置Swagger</h2><p>在Spring Boot项目中创建一个配置类<code>SwaggerConfig</code>，并添加Swagger的配置信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.ExternalDocumentation;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.OpenAPI;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.info.Contact;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.info.Info;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.info.License;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OpenAPI <span class="title function_">springShopOpenAPI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OpenAPI</span>()</span><br><span class="line">                .info(<span class="keyword">new</span> <span class="title class_">Info</span>().title(<span class="string">&quot;标题&quot;</span>)</span><br><span class="line">                        .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>())</span><br><span class="line">                        .description(<span class="string">&quot;我的API文档&quot;</span>)</span><br><span class="line">                        .version(<span class="string">&quot;v1&quot;</span>)</span><br><span class="line">                        .license(<span class="keyword">new</span> <span class="title class_">License</span>().name(<span class="string">&quot;Apache 2.0&quot;</span>).url(<span class="string">&quot;http://springdoc.org&quot;</span>)))</span><br><span class="line">                .externalDocs(<span class="keyword">new</span> <span class="title class_">ExternalDocumentation</span>()</span><br><span class="line">                        .description(<span class="string">&quot;外部文档&quot;</span>)</span><br><span class="line">                        .url(<span class="string">&quot;https://springshop.wiki.github.org/docs&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-实体类和控制层注解"><a href="#3-实体类和控制层注解" class="headerlink" title="3. 实体类和控制层注解"></a>3. 实体类和控制层注解</h2><p>在您的实体类和控制层中使用Swagger注解来描述API。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实体类注解示例</span></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.ExcelProperty;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.write.style.ColumnWidth;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.media.Schema;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@Schema(name = &quot;Employee&quot;, description = &quot;$!&#123;table.comment&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;ID&quot;)</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;用户名&quot;)</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;用户名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String names;</span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;工资&quot;)</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;工资&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;生日&quot;)</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;生日&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="meta">@ColumnWidth(20)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;头像&quot;)</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;头像&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String photo;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    @ColumnWidth(20)</span></span><br><span class="line"><span class="comment">//    @DateTimeFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line"><span class="comment">//    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line"><span class="comment">//    @ExcelProperty(&quot;创建日期&quot;)</span></span><br><span class="line"><span class="comment">//    private Date u_create_time;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制层注解示例</span></span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.Operation;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Operation(summary = &quot;获取所有员工信息&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/selectAll&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">selectAll</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-通用返回结果封装"><a href="#4-通用返回结果封装" class="headerlink" title="4. 通用返回结果封装"></a>4. 通用返回结果封装</h2><p>创建一个通用的返回结果类，用于统一API的响应格式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.media.Schema;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Builder(toBuilder = true)</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提示信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;提示信息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;是否成功&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> success;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;返回状态码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">Result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        Result.setSuccess(Boolean.TRUE);</span><br><span class="line">        Result.setCode(ResultCode.SUCCESS.getCode());</span><br><span class="line">        Result.setMessage(ResultCode.SUCCESS.getMsg());</span><br><span class="line">        <span class="keyword">return</span> Result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">Result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        Result.setMessage(msg);</span><br><span class="line">        Result.setSuccess(Boolean.TRUE);</span><br><span class="line">        Result.setCode(ResultCode.SUCCESS.getCode());</span><br><span class="line">        <span class="keyword">return</span> Result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">Result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        Result.setData(data);</span><br><span class="line">        Result.setSuccess(Boolean.TRUE);</span><br><span class="line">        Result.setCode(ResultCode.SUCCESS.getCode());</span><br><span class="line">        Result.setMessage(ResultCode.SUCCESS.getMsg());</span><br><span class="line">        <span class="keyword">return</span> Result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回失败 消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">failure</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">Result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        Result.setSuccess(Boolean.FALSE);</span><br><span class="line">        Result.setCode(ResultCode.FAILURE.getCode());</span><br><span class="line">        Result.setMessage(ResultCode.FAILURE.getMsg());</span><br><span class="line">        <span class="keyword">return</span> Result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回失败 消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 失败信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">failure</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">Result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        Result.setSuccess(Boolean.FALSE);</span><br><span class="line">        Result.setCode(ResultCode.FAILURE.getCode());</span><br><span class="line">        Result.setMessage(msg);</span><br><span class="line">        <span class="keyword">return</span> Result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">failure</span><span class="params">(Integer code, String msg)</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">Result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        Result.setSuccess(Boolean.FALSE);</span><br><span class="line">        Result.setCode(code);</span><br><span class="line">        Result.setMessage(msg);</span><br><span class="line">        <span class="keyword">return</span> Result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">failure</span><span class="params">(String msg, ResultCode exceptionCode)</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">Result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        Result.setMessage(msg);</span><br><span class="line">        Result.setSuccess(Boolean.FALSE);</span><br><span class="line">        Result.setCode(exceptionCode.getCode());</span><br><span class="line">        Result.setData(exceptionCode.getMsg());</span><br><span class="line">        <span class="keyword">return</span> Result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回失败 消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exceptionCode 错误信息枚举</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">failure</span><span class="params">(ResultCode exceptionCode)</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">Result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        Result.setSuccess(Boolean.FALSE);</span><br><span class="line">        Result.setCode(exceptionCode.getCode());</span><br><span class="line">        Result.setMessage(exceptionCode.getMsg());</span><br><span class="line">        <span class="keyword">return</span> Result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回失败 消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exceptionCode 错误信息枚举</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg           自定义错误提示信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">failure</span><span class="params">(ResultCode exceptionCode, String msg)</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">Result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        Result.setMessage(msg);</span><br><span class="line">        Result.setSuccess(Boolean.FALSE);</span><br><span class="line">        Result.setCode(exceptionCode.getCode());</span><br><span class="line">        <span class="keyword">return</span> Result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-注解说明"><a href="#5-注解说明" class="headerlink" title="5. 注解说明"></a>5. 注解说明</h2><p>Swagger3的注解与Swagger2有所不同，以下是一些常用注解的对照表：</p>
<table>
<thead>
<tr>
<th>Swagger2注解</th>
<th>Swagger3注解</th>
<th>注解位置</th>
</tr>
</thead>
<tbody><tr>
<td>@Api</td>
<td>@Tag(name &#x3D; “接口类描述”)</td>
<td>Controller类上</td>
</tr>
<tr>
<td>@ApiOperation</td>
<td>@Operation(summary &#x3D; “接口方法描述”)</td>
<td>Controller方法上</td>
</tr>
<tr>
<td>@ApiImplicitParams</td>
<td>@Parameters</td>
<td>Controller方法上</td>
</tr>
<tr>
<td>@ApiImplicitParam</td>
<td>@Parameter(description &#x3D; “参数描述”)</td>
<td>Controller方法上</td>
</tr>
<tr>
<td>@ApiParam</td>
<td>@Parameter(description &#x3D; “参数描述”)</td>
<td>方法参数上</td>
</tr>
<tr>
<td>@ApiIgnore</td>
<td>@Parameter(hidden &#x3D; true) 或 @Operation(hidden &#x3D; true)</td>
<td>-</td>
</tr>
<tr>
<td>@ApiModel</td>
<td>@Schema</td>
<td>DTO类上</td>
</tr>
<tr>
<td>@ApiModelProperty</td>
<td>@Schema</td>
<td>DTO属性上</td>
</tr>
</tbody></table>
<h2 id="6-访问Swagger-UI"><a href="#6-访问Swagger-UI" class="headerlink" title="6. 访问Swagger UI"></a>6. 访问Swagger UI</h2><p>启动您的Spring Boot应用后，您可以通过以下地址访问Swagger UI：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/doc.html</span><br><span class="line">http://localhost:8080/swagger-ui/index.html</span><br></pre></td></tr></table></figure>

<p>在这里，您可以查看API文档，测试API接口，并获取相关信息。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring boot工程实现图片上传的两种方法</title>
    <url>/blog/2024/02/09/Springboot%E5%B7%A5%E7%A8%8B%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="Spring-Boot中实现图片上传功能的两种策略"><a href="#Spring-Boot中实现图片上传功能的两种策略" class="headerlink" title="Spring Boot中实现图片上传功能的两种策略"></a>Spring Boot中实现图片上传功能的两种策略</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>在现代Web应用程序中，图片上传是一个常见的功能。本文将介绍如何在Spring Boot项目中实现图片上传，包括将图片保存到阿里云OSS和本地文件系统两种方法。我们将通过代码示例和详细注释，帮助读者理解这两种方法的实现过程。</p>
<h2 id="1-保存到阿里云OSS"><a href="#1-保存到阿里云OSS" class="headerlink" title="1. 保存到阿里云OSS"></a>1. 保存到阿里云OSS</h2><h3 id="1-1-依赖添加"><a href="#1-1-依赖添加" class="headerlink" title="1.1 依赖添加"></a>1.1 依赖添加</h3><p>首先，我们需要在项目的<code>pom.xml</code>文件中添加阿里云OSS的SDK依赖，以及用于文件操作的<code>commons-io</code>和<code>commons-beanutils</code>库。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阿里云OSS SDK --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.16.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 文件操作工具类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-配置OSS客户端"><a href="#1-2-配置OSS客户端" class="headerlink" title="1.2 配置OSS客户端"></a>1.2 配置OSS客户端</h3><p>创建一个工具类<code>uploadUtil</code>，用于配置OSS客户端并实现图片上传功能。我们需要设置OSS的域名、访问密钥ID和密钥，以及OSS的地域节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSS;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSSClientBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FilenameUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadUtil</span> &#123;</span><br><span class="line">    <span class="comment">// OSS域名，注意替换为实际的域名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ALI_DOMAIN</span> <span class="operator">=</span> <span class="string">&quot;https://czh123-text.oss-cn-guangzhou.aliyuncs.com&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 上传图片到OSS的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">uploadImage</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 获取原始文件名和扩展名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">ext</span> <span class="operator">=</span> <span class="string">&quot;.&quot;</span> + FilenameUtils.getExtension(originalFilename);</span><br><span class="line">        <span class="comment">// 生成新的文件名，包含UUID以避免重名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> uuid + ext;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// OSS配置信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> <span class="string">&quot;http://oss-cn-guangzhou.aliyuncs.com&quot;</span>; <span class="comment">// 地域节点</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKeyId</span> <span class="operator">=</span> <span class="string">&quot;LTAI5tGOUpuc5EwDcJ9&quot;</span>; <span class="comment">// 访问密钥ID</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKeySecret</span> <span class="operator">=</span> <span class="string">&quot;fYy0DdFrrFBwky&quot;</span>; <span class="comment">// 访问密钥Secret</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建OSS客户端</span></span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line">        <span class="comment">// 上传文件到OSS</span></span><br><span class="line">        ossClient.putObject(<span class="string">&quot;czh123-text&quot;</span>, fileName, file.getInputStream());</span><br><span class="line">        <span class="comment">// 关闭客户端</span></span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">        <span class="comment">// 返回图片的URL</span></span><br><span class="line">        <span class="keyword">return</span> ALI_DOMAIN + fileName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-控制层实现"><a href="#1-3-控制层实现" class="headerlink" title="1.3 控制层实现"></a>1.3 控制层实现</h3><p>在控制器中，我们创建一个<code>upImg</code>方法，用于处理图片上传请求。该方法调用<code>uploadUtil</code>类中的<code>uploadImage</code>方法，并返回图片的URL。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/upImg&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">upImg</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">return</span> UploadUtil.uploadImage(file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-保存到本地文件系统"><a href="#2-保存到本地文件系统" class="headerlink" title="2. 保存到本地文件系统"></a>2. 保存到本地文件系统</h2><h3 id="2-1-控制层实现"><a href="#2-1-控制层实现" class="headerlink" title="2.1 控制层实现"></a>2.1 控制层实现</h3><p>另一种方法是将图片保存到本地文件系统。在控制器中，我们创建一个<code>upload</code>方法，用于处理上传请求并将图片保存到指定的本地目录。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (file.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;图片为空&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取原始文件名和扩展名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileNamePrefix</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMddHHmmssSSS&quot;</span>).format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileNameSuffix</span> <span class="operator">=</span> <span class="string">&quot;.&quot;</span> + originalFilename.split(<span class="string">&quot;\\.&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 生成新的文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> fileNamePrefix + fileNameSuffix;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取项目根目录的绝对路径</span></span><br><span class="line">    <span class="type">ApplicationHome</span> <span class="variable">applicationHome</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApplicationHome</span>(<span class="built_in">this</span>.getClass());</span><br><span class="line">    <span class="type">String</span> <span class="variable">pre</span> <span class="operator">=</span> applicationHome.getDir().getParentFile().getParentFile().getAbsolutePath() +</span><br><span class="line">            <span class="string">&quot;/src/main/resources/static/images/&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> pre + fileName;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 将上传的文件保存到本地</span></span><br><span class="line">        file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(path));</span><br><span class="line">        <span class="comment">// 返回文件的本地路径</span></span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;图片上传失败&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="🎉-结语"><a href="#🎉-结语" class="headerlink" title="🎉 结语"></a>🎉 结语</h2><p>本文介绍了在Spring Boot项目中实现图片上传的两种方法：保存到阿里云OSS和保存到本地文件系统。通过这两种方法，开发者可以根据项目需求和资源情况选择合适的图片存储策略。阿里云OSS提供了高可用性和扩展性，适合需要远程访问和高并发的场景；而本地文件系统则适合小型项目或对数据安全性要求不高的场景。在实际开发中，开发者应根据实际情况灵活选择。</p>
<p>感谢你的访问，期待与你在技术的道路上相遇！👋🌟🚀</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot工程集成验证码生成与验证功能教程</title>
    <url>/blog/2024/02/09/Springboot%E5%B7%A5%E7%A8%8B%E5%AE%9E%E7%8E%B0%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="Spring-Boot工程集成验证码生成与验证功能教程"><a href="#Spring-Boot工程集成验证码生成与验证功能教程" class="headerlink" title="Spring Boot工程集成验证码生成与验证功能教程"></a>Spring Boot工程集成验证码生成与验证功能教程</h1><p>验证码是一种常见的安全机制，用于防止自动化工具（如爬虫）对网站进行恶意操作。在Web应用中，验证码通常以图像的形式出现，要求用户输入图像中显示的字符。本文将介绍如何在Spring Boot工程中实现一个随机生成验证码的功能。</p>
<h2 id="1-创建验证码工具类"><a href="#1-创建验证码工具类" class="headerlink" title="1. 创建验证码工具类"></a>1. 创建验证码工具类</h2><p>首先，我们需要创建一个工具类<code>VerifyCodeUtils</code>，用于生成随机验证码并输出为图像。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.geom.AffineTransform;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VerifyCodeUtils</span> &#123;</span><br><span class="line">    <span class="comment">//使用到Algerian字体，系统里没有的话需要安装字体，字体只显示大写，去掉了1,0,i,o几个容易混淆的字符</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">VERIFY_CODES</span> <span class="operator">=</span> <span class="string">&quot;23456789ABCDEFGHJKLMNPQRSTUVWXYZ&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用系统默认字符源生成验证码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verifySize 验证码长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateVerifyCode</span><span class="params">(<span class="type">int</span> verifySize)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> generateVerifyCode(verifySize, VERIFY_CODES);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用指定源生成验证码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verifySize 验证码长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sources    验证码字符源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateVerifyCode</span><span class="params">(<span class="type">int</span> verifySize, String sources)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sources == <span class="literal">null</span> || sources.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            sources = VERIFY_CODES;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">codesLen</span> <span class="operator">=</span> sources.length();</span><br><span class="line">        <span class="type">Random</span> <span class="variable">rand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(System.currentTimeMillis());</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">verifyCode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(verifySize);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; verifySize; i++) &#123;</span><br><span class="line">            verifyCode.append(sources.charAt(rand.nextInt(codesLen - <span class="number">1</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> verifyCode.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成随机验证码文件,并返回验证码值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> w</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> h</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verifySize</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">outputVerifyImage</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, File outputFile, <span class="type">int</span> verifySize)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">verifyCode</span> <span class="operator">=</span> generateVerifyCode(verifySize);</span><br><span class="line">        outputImage(w, h, outputFile, verifyCode);</span><br><span class="line">        <span class="keyword">return</span> verifyCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出随机验证码图片流,并返回验证码值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> w</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> h</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> os</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verifySize</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">outputVerifyImage</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, OutputStream os, <span class="type">int</span> verifySize)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">verifyCode</span> <span class="operator">=</span> generateVerifyCode(verifySize);</span><br><span class="line">        outputImage(w, h, os, verifyCode);</span><br><span class="line">        <span class="keyword">return</span> verifyCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成指定验证码图像文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> w</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> h</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">outputImage</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, File outputFile, String code)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (outputFile == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> outputFile.getParentFile();</span><br><span class="line">        <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            outputFile.createNewFile();</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(outputFile);</span><br><span class="line">            outputImage(w, h, fos, code);</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出指定验证码图片流</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> w</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> h</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> os</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">outputImage</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, OutputStream os, String code)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">verifySize</span> <span class="operator">=</span> code.length();</span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedImage</span>(w, h, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="type">Random</span> <span class="variable">rand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">Graphics2D</span> <span class="variable">g2</span> <span class="operator">=</span> image.createGraphics();</span><br><span class="line">        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);</span><br><span class="line">        Color[] colors = <span class="keyword">new</span> <span class="title class_">Color</span>[<span class="number">5</span>];</span><br><span class="line">        Color[] colorSpaces = <span class="keyword">new</span> <span class="title class_">Color</span>[]&#123;Color.WHITE, Color.CYAN,</span><br><span class="line">                Color.GRAY, Color.LIGHT_GRAY, Color.MAGENTA, Color.ORANGE,</span><br><span class="line">                Color.PINK, Color.YELLOW&#125;;</span><br><span class="line">        <span class="type">float</span>[] fractions = <span class="keyword">new</span> <span class="title class_">float</span>[colors.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; colors.length; i++) &#123;</span><br><span class="line">            colors[i] = colorSpaces[rand.nextInt(colorSpaces.length)];</span><br><span class="line">            fractions[i] = rand.nextFloat();</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(fractions);</span><br><span class="line"></span><br><span class="line">        g2.setColor(Color.GRAY);<span class="comment">// 设置边框色</span></span><br><span class="line">        g2.fillRect(<span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line"></span><br><span class="line">        <span class="type">Color</span> <span class="variable">c</span> <span class="operator">=</span> getRandColor(<span class="number">200</span>, <span class="number">250</span>);</span><br><span class="line">        g2.setColor(c);<span class="comment">// 设置背景色</span></span><br><span class="line">        g2.fillRect(<span class="number">0</span>, <span class="number">2</span>, w, h - <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制干扰线</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        g2.setColor(getRandColor(<span class="number">160</span>, <span class="number">200</span>));<span class="comment">// 设置线条的颜色</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> random.nextInt(w - <span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> random.nextInt(h - <span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">xl</span> <span class="operator">=</span> random.nextInt(<span class="number">6</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">yl</span> <span class="operator">=</span> random.nextInt(<span class="number">12</span>) + <span class="number">1</span>;</span><br><span class="line">            g2.drawLine(x, y, x + xl + <span class="number">40</span>, y + yl + <span class="number">20</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加噪点</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">yawpRate</span> <span class="operator">=</span> <span class="number">0.05f</span>;<span class="comment">// 噪声率</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">area</span> <span class="operator">=</span> (<span class="type">int</span>) (yawpRate * w * h);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; area; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> random.nextInt(w);</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> random.nextInt(h);</span><br><span class="line">            <span class="type">int</span> <span class="variable">rgb</span> <span class="operator">=</span> getRandomIntColor();</span><br><span class="line">            image.setRGB(x, y, rgb);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        shear(g2, w, h, c);<span class="comment">// 使图片扭曲</span></span><br><span class="line"></span><br><span class="line">        g2.setColor(getRandColor(<span class="number">100</span>, <span class="number">160</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">fontSize</span> <span class="operator">=</span> h - <span class="number">4</span>;</span><br><span class="line">        <span class="type">Font</span> <span class="variable">font</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;Algerian&quot;</span>, Font.ITALIC, fontSize);</span><br><span class="line">        g2.setFont(font);</span><br><span class="line">        <span class="type">char</span>[] chars = code.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; verifySize; i++) &#123;</span><br><span class="line">            <span class="type">AffineTransform</span> <span class="variable">affine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AffineTransform</span>();</span><br><span class="line">            affine.setToRotation(Math.PI / <span class="number">4</span> * rand.nextDouble() * (rand.nextBoolean() ? <span class="number">1</span> : -<span class="number">1</span>), (w / verifySize) * i + fontSize / <span class="number">2</span>, h / <span class="number">2</span>);</span><br><span class="line">            g2.setTransform(affine);</span><br><span class="line">            g2.drawChars(chars, i, <span class="number">1</span>, ((w - <span class="number">10</span>) / verifySize) * i + <span class="number">5</span>, h / <span class="number">2</span> + fontSize / <span class="number">2</span> - <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        g2.dispose();</span><br><span class="line">        ImageIO.write(image, <span class="string">&quot;jpg&quot;</span>, os);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Color <span class="title function_">getRandColor</span><span class="params">(<span class="type">int</span> fc, <span class="type">int</span> bc)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fc &gt; <span class="number">255</span>)</span><br><span class="line">            fc = <span class="number">255</span>;</span><br><span class="line">        <span class="keyword">if</span> (bc &gt; <span class="number">255</span>)</span><br><span class="line">            bc = <span class="number">255</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> fc + random.nextInt(bc - fc);</span><br><span class="line">        <span class="type">int</span> <span class="variable">g</span> <span class="operator">=</span> fc + random.nextInt(bc - fc);</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> fc + random.nextInt(bc - fc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Color</span>(r, g, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getRandomIntColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] rgb = getRandomRgb();</span><br><span class="line">        <span class="type">int</span> <span class="variable">color</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> c : rgb) &#123;</span><br><span class="line">            color = color &lt;&lt; <span class="number">8</span>;</span><br><span class="line">            color = color | c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] getRandomRgb() &#123;</span><br><span class="line">        <span class="type">int</span>[] rgb = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            rgb[i] = random.nextInt(<span class="number">255</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rgb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shear</span><span class="params">(Graphics g, <span class="type">int</span> w1, <span class="type">int</span> h1, Color color)</span> &#123;</span><br><span class="line">        shearX(g, w1, h1, color);</span><br><span class="line">        shearY(g, w1, h1, color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shearX</span><span class="params">(Graphics g, <span class="type">int</span> w1, <span class="type">int</span> h1, Color color)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">period</span> <span class="operator">=</span> random.nextInt(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">borderGap</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">frames</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">phase</span> <span class="operator">=</span> random.nextInt(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; h1; i++) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> (<span class="type">double</span>) (period &gt;&gt; <span class="number">1</span>)</span><br><span class="line">                    * Math.sin((<span class="type">double</span>) i / (<span class="type">double</span>) period</span><br><span class="line">                    + (<span class="number">6.2831853071795862D</span> * (<span class="type">double</span>) phase)</span><br><span class="line">                    / (<span class="type">double</span>) frames);</span><br><span class="line">            g.copyArea(<span class="number">0</span>, i, w1, <span class="number">1</span>, (<span class="type">int</span>) d, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (borderGap) &#123;</span><br><span class="line">                g.setColor(color);</span><br><span class="line">                g.drawLine((<span class="type">int</span>) d, i, <span class="number">0</span>, i);</span><br><span class="line">                g.drawLine((<span class="type">int</span>) d + w1, i, w1, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shearY</span><span class="params">(Graphics g, <span class="type">int</span> w1, <span class="type">int</span> h1, Color color)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">period</span> <span class="operator">=</span> random.nextInt(<span class="number">40</span>) + <span class="number">10</span>; <span class="comment">// 50;</span></span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">borderGap</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">frames</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">phase</span> <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; w1; i++) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> (<span class="type">double</span>) (period &gt;&gt; <span class="number">1</span>)</span><br><span class="line">                    * Math.sin((<span class="type">double</span>) i / (<span class="type">double</span>) period</span><br><span class="line">                    + (<span class="number">6.2831853071795862D</span> * (<span class="type">double</span>) phase)</span><br><span class="line">                    / (<span class="type">double</span>) frames);</span><br><span class="line">            g.copyArea(i, <span class="number">0</span>, <span class="number">1</span>, h1, <span class="number">0</span>, (<span class="type">int</span>) d);</span><br><span class="line">            <span class="keyword">if</span> (borderGap) &#123;</span><br><span class="line">                g.setColor(color);</span><br><span class="line">                g.drawLine(i, (<span class="type">int</span>) d, i, <span class="number">0</span>);</span><br><span class="line">                g.drawLine(i, (<span class="type">int</span>) d + h1, i, h1);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="2-控制层实现"><a href="#2-控制层实现" class="headerlink" title="2. 控制层实现"></a>2. 控制层实现</h2><p>在Spring Boot的控制器中，我们需要提供一个接口来生成验证码并将其发送给客户端。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// VerifyController.java</span></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VerifyController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/generateImageCode&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generateImageCode</span><span class="params">(HttpSession session, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//随机生成四位随机数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> VerifyCodeUtils.generateVerifyCode(<span class="number">4</span>);</span><br><span class="line">        <span class="comment">//保存到session域中</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;code&quot;</span>, code);</span><br><span class="line">        <span class="comment">//根据随机数生成图片，reqponse响应图片</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        VerifyCodeUtils.outputImage(<span class="number">130</span>, <span class="number">60</span>, os, code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-客户端展示验证码"><a href="#3-客户端展示验证码" class="headerlink" title="3. 客户端展示验证码"></a>3. 客户端展示验证码</h2><p>在Web页面中，我们需要添加一个图像标签来展示验证码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在HTML中添加验证码图像 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/generateImageCode&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;验证码&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;this.src=&#x27;/generateImageCode?&#x27;+Math.random();&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-验证验证码"><a href="#4-验证验证码" class="headerlink" title="4. 验证验证码"></a>4. 验证验证码</h2><p>在用户提交表单时，我们需要验证用户输入的验证码是否正确。这通常在后端进行，通过比较用户输入的验证码与Session中保存的验证码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在登录方法中验证验证码</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;?&gt; login(<span class="meta">@RequestParam</span> String username, <span class="meta">@RequestParam</span> String password, HttpSession session) &#123;</span><br><span class="line">    <span class="comment">// 获取用户输入的验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">userInputCode</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取Session中保存的验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sessionCode</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">    <span class="comment">// 验证验证码</span></span><br><span class="line">    <span class="keyword">if</span> (!sessionCode.equals(inputCode)) &#123;</span><br><span class="line">        <span class="comment">// 验证码错误</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).body(<span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 验证码正确，继续登录逻辑</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot工程常用依赖</title>
    <url>/blog/2024/02/20/Springboot%E5%B7%A5%E7%A8%8B%E5%B8%B8%E7%94%A8%E4%BE%9D%E8%B5%96/</url>
    <content><![CDATA[<h1 id="Springboot工程常用依赖"><a href="#Springboot工程常用依赖" class="headerlink" title="Springboot工程常用依赖"></a>Springboot工程常用依赖</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--   mysql     --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>8.0.32<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--    lombok    --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--参数校验--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--swagger3--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi3-jakarta-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--freemarker模板--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 导出excel  --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot工程常用配置</title>
    <url>/blog/2024/02/16/Springboot%E5%B7%A5%E7%A8%8B%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Springboot工程常用配置"><a href="#Springboot工程常用配置" class="headerlink" title="Springboot工程常用配置"></a>Springboot工程常用配置</h1><h2 id="yml"><a href="#yml" class="headerlink" title="yml"></a>yml</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9090</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db_crud?serverTimezone=GMT%2b8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#mybatis-plus:</span></span><br><span class="line"><span class="comment">#  mapper-locations: classpath*:/dao/**/*Dao.xml</span></span><br><span class="line"><span class="comment">#  configuration:</span></span><br><span class="line"><span class="comment">#    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.springboot.mapper.BooksMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.springboot.entity.Books&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from sys_books;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPage&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.springboot.entity.User&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from sys_books limit #&#123;pageNum&#125;,#&#123;pageSize&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectTotal&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">        select count(*)</span><br><span class="line">        from sys_books</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="thymeleaf"><a href="#thymeleaf" class="headerlink" title="thymeleaf"></a>thymeleaf</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关闭thymeleaf模板缓存</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span> <span class="comment">#指定模板位置</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.html</span> <span class="comment">#指定后缀名</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssmbuild?characterEncoding=UTF-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">static-locations:</span> <span class="string">classpath:/static/,file:$&#123;photo.file.dir&#125;</span> <span class="comment">#暴露哪些资源可以通过项目名访问</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.xuda.springboot.pojo</span></span><br><span class="line"><span class="comment">#Mybatis配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志配置</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">info</span></span><br><span class="line">    <span class="attr">com.xuda:</span> <span class="string">debug</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定文件上传的位置</span></span><br><span class="line"><span class="attr">photo:</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">dir:</span> <span class="string">D:\__easyProjects__\IntelliJ_IDEA\SpringBootStudy\photo</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot中Excel数据导入导出的高效实现</title>
    <url>/blog/2024/02/16/Springboot%E6%8E%A5%E5%8F%A3Excel%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="Spring-Boot中Excel数据导入导出的高效实现"><a href="#Spring-Boot中Excel数据导入导出的高效实现" class="headerlink" title="Spring Boot中Excel数据导入导出的高效实现"></a>Spring Boot中Excel数据导入导出的高效实现</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>在企业级应用中，Excel文件的导入导出是一个常见的需求。本文将介绍如何在Spring Boot项目中使用EasyExcel库实现Excel文件的导入导出功能。我们将通过实际的代码示例，展示如何读取和写入Excel文件，以及如何通过自定义监听器来增强数据处理的灵活性。</p>
<h2 id="1-依赖添加"><a href="#1-依赖添加" class="headerlink" title="1. 依赖添加"></a>1. 依赖添加</h2><p>首先，我们需要在项目的<code>pom.xml</code>文件中添加EasyExcel的依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导出excel --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-自定义监听器（可选）"><a href="#2-自定义监听器（可选）" class="headerlink" title="2. 自定义监听器（可选）"></a>2. 自定义监听器（可选）</h2><p>为了增强数据处理的灵活性，我们可以创建一个自定义监听器来校验Excel文件中的数据。例如，我们可以校验用户名称是否重复，或者数据格式是否正确。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.excel.context.AnalysisContext;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.event.AnalysisEventListener;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.exception.ExcelDataConvertException;</span><br><span class="line"><span class="keyword">import</span> com.xiaohe.uploadimage.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义监听器，对下载的excel中的数据进行校验</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserListener</span> <span class="keyword">extends</span> <span class="title class_">AnalysisEventListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每解析一行，回调该方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Object data, AnalysisContext context)</span> &#123;</span><br><span class="line">        <span class="comment">//校验名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> ((User) data).getU_name();</span><br><span class="line"><span class="comment">//        if (StrUtil.isBlank(name)) &#123;</span></span><br><span class="line"><span class="comment">//            throw new RuntimeException(String.format(&quot;第%s行名称为空，请核实&quot;, context.readRowHolder().getRowIndex() + 1));</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">if</span> (names.contains(name)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(String.format(<span class="string">&quot;第%s行名称已重复，请核实&quot;</span>, context.readRowHolder().getRowIndex() + <span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            names.add(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出现异常回调</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exception</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Exception exception, AnalysisContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ExcelDataConvertException) &#123;</span><br><span class="line">            <span class="comment">/**从0开始计算*/</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">columnIndex</span> <span class="operator">=</span> ((ExcelDataConvertException) exception).getColumnIndex() + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rowIndex</span> <span class="operator">=</span> ((ExcelDataConvertException) exception).getRowIndex() + <span class="number">1</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;第&quot;</span> + rowIndex + <span class="string">&quot;行，第&quot;</span> + columnIndex + <span class="string">&quot;列&quot;</span> + <span class="string">&quot;数据格式有误，请核实&quot;</span>;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(message);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> exception;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.onException(exception, context);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析完,全部回调</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext context)</span> &#123;</span><br><span class="line">        <span class="comment">//解析完,全部回调逻辑实现</span></span><br><span class="line">        names.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-实体类定义"><a href="#3-实体类定义" class="headerlink" title="3. 实体类定义"></a>3. 实体类定义</h2><p>我们需要定义一个实体类来映射Excel文件中的列。使用<code>@ExcelProperty</code>注解来指定Excel列的名称。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.ExcelProperty;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.format.DateTimeFormat;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.write.style.ColumnWidth;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 其他代码 ...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">// ... 实体类属性和注解 ...</span></span><br><span class="line">     <span class="meta">@ExcelProperty(&quot;账号&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String u_acc;</span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;密码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String u_pwd;</span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String u_name;</span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;性别&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String u_sex;</span><br><span class="line">    <span class="meta">@ColumnWidth(20)</span></span><br><span class="line">    <span class="meta">@DateTimeFormat(&quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;生日&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date u_birth;</span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;角色&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String u_ide;</span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;状态&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> u_statues;</span><br><span class="line">    <span class="meta">@ColumnWidth(20)</span></span><br><span class="line">    <span class="meta">@DateTimeFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;创建日期&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date u_create_time;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-控制层实现"><a href="#4-控制层实现" class="headerlink" title="4. 控制层实现"></a>4. 控制层实现</h2><h3 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h3><p>在控制器中，我们提供一个接口来导出Excel文件。EasyExcel提供了便捷的API来生成Excel文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.excel.EasyExcel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 其他代码 ...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelController</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ExcelMapper excelMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">user</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> excelMapper.selectUserAll();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;exportExcel&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exportData</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// ... 导出数据代码 ...</span></span><br><span class="line">         response.setContentType(<span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;用户表&quot;</span>, StandardCharsets.UTF_8).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        List&lt;User&gt; users = excelMapper.selectUserAll();</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename*=utf-8&#x27;&#x27;&quot;</span> + fileName + <span class="string">&quot;.xlsx&quot;</span>);</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class).sheet(<span class="string">&quot;用户表&quot;</span>).doWrite(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h3><p>同样地，我们提供一个接口来处理Excel文件的导入。通过EasyExcel的读取功能，我们可以将Excel文件中的数据转换为Java对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.excel.EasyExcel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 其他代码 ...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导入数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/importExcel&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">importData</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取文件的输入流</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line">            List&lt;User&gt; lst = EasyExcel.read(inputStream) <span class="comment">//调用read方法</span></span><br><span class="line">                    <span class="comment">//注册自定义监听器，字段校验可以在监听器内实现</span></span><br><span class="line">                    .registerReadListener(<span class="keyword">new</span> <span class="title class_">UserListener</span>())</span><br><span class="line">                    .head(User.class) <span class="comment">//对应导入的实体类</span></span><br><span class="line">                    .sheet(<span class="number">0</span>) <span class="comment">//导入数据的sheet页编号，0代表第一个sheet页，如果不填，则会导入所有sheet页的数据</span></span><br><span class="line">                    .headRowNumber(<span class="number">1</span>) <span class="comment">//列表头行数，1代表列表头有1行，第二行开始为数据行</span></span><br><span class="line">                    .doReadSync(); <span class="comment">//开始读Excel，返回一个List&lt;T&gt;集合，继续后续入库操作</span></span><br><span class="line">            <span class="comment">//模拟导入数据库操作</span></span><br><span class="line">            <span class="keyword">for</span> (User user : lst) &#123;</span><br><span class="line">                <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> user.getU_birth();</span><br><span class="line">                <span class="type">String</span> <span class="variable">form</span> <span class="operator">=</span> String.format(<span class="string">&quot;%tF&quot;</span>, date);</span><br><span class="line">                System.out.println(form);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException exception) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(exception);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="🎉-结语"><a href="#🎉-结语" class="headerlink" title="🎉 结语"></a>🎉 结语</h2><p>通过本文的介绍，我们学习了如何在Spring Boot项目中使用EasyExcel库来实现Excel文件的导入导出。自定义监听器的引入使得数据处理更加灵活，能够应对各种复杂的业务需求。EasyExcel的简单易用和强大的功能，使得Excel文件处理变得高效和便捷。在实际开发中，开发者可以根据项目需求，选择合适的库来实现Excel文件的处理。</p>
<p>感谢你的访问，期待与你在技术的道路上相遇！👋🌟🚀</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu上运行c语言教程</title>
    <url>/blog/2024/03/11/Ubuntu%E4%B8%8A%E8%BF%90%E8%A1%8Cc%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Ubuntu上运行c语言教程"><a href="#Ubuntu上运行c语言教程" class="headerlink" title="Ubuntu上运行c语言教程"></a>Ubuntu上运行c语言教程</h1><h2 id="0-序言"><a href="#0-序言" class="headerlink" title="0.序言"></a>0.序言</h2><p>Ubuntu是一个以桌面应用为主的Linux操作系统，其名称来自非洲南部祖鲁语或豪萨语的“ubuntu”一词，意思是“人性”“我的存在是因为大家的存在”，是非洲传统的一种价值观。Ubuntu基于Debian发行版和Gnome桌面环境，而从11.04版起，Ubuntu发行版放弃了Gnome桌面环境，改为Unity。从前人们认为Linux难以安装、难以使用，在Ubuntu出现后这些都成为了历史。Ubuntu也拥有庞大的社区力量，用户可以方便地从社区获得帮助。</p>
<h2 id="1-准备工作-检查网络-更新源"><a href="#1-准备工作-检查网络-更新源" class="headerlink" title="1.准备工作(检查网络&amp;更新源)"></a>1.准备工作(检查网络&amp;更新源)</h2><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ping</span> www.baidu.com</span><br><span class="line">-- 检查网络</span><br><span class="line"></span><br><span class="line">services.msc</span><br><span class="line">-- ？？？</span><br><span class="line"></span><br><span class="line">VMware DHCP Service</span><br><span class="line">VMware NAT Service</span><br><span class="line">-- 若网络未连接，win+<span class="built_in">shift</span>+esc打开控制台，在任意一项右键转到服务，找到上述两项重启，再重启虚拟机即可连接到网络。</span><br><span class="line"></span><br><span class="line">sudo apt update</span><br><span class="line">-- 更新源</span><br></pre></td></tr></table></figure>

<h2 id="2-安装ssh"><a href="#2-安装ssh" class="headerlink" title="2.安装ssh"></a>2.安装ssh</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ps -e |grep ssh</span><br><span class="line">-- 检查是否安装ssh服务</span><br><span class="line"></span><br><span class="line">sudo apt install openssh-server</span><br><span class="line">-- 安装ssh服务</span><br><span class="line"></span><br><span class="line">sudo ps -e |grep ssh</span><br><span class="line">-- 再次检查</span><br><span class="line"></span><br><span class="line">service ufw stop</span><br><span class="line">-- 暂停防火墙</span><br><span class="line"></span><br><span class="line">sudo apt install net-tools</span><br><span class="line">-- 下载网络检查工具</span><br><span class="line"></span><br><span class="line">ifconfig</span><br><span class="line">-- 查看IP和网络配置</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-安装gcc-g"><a href="#3-安装gcc-g" class="headerlink" title="3.安装gcc g++"></a>3.安装gcc g++</h2><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">sudo apt install gcc</span><br><span class="line">-- 安装gcc</span><br><span class="line"></span><br><span class="line">sudo apt install build-essential</span><br><span class="line">-- 下载打包构建工具</span><br><span class="line"></span><br><span class="line">sudo apt install g++</span><br><span class="line">-- 下载g++</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">## <span class="number">4</span>.安装vim</span><br><span class="line"></span><br><span class="line">```bat</span><br><span class="line">sudo apt install vim</span><br><span class="line">-- 下载vim</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">## <span class="number">5</span>.测试</span><br><span class="line"></span><br><span class="line">```bat</span><br><span class="line">vim hello.c</span><br><span class="line">-- 创建hello.c文件</span><br><span class="line"></span><br><span class="line">gcc -Wall hello.c -o hello</span><br><span class="line">gcc hello.c -o hello</span><br><span class="line">-- 将hello.c文件编译为hello</span><br><span class="line"></span><br><span class="line">./hello</span><br><span class="line">-- 运行hello可执行文件</span><br></pre></td></tr></table></figure>

<h2 id="6-切换用户"><a href="#6-切换用户" class="headerlink" title="6.切换用户"></a>6.切换用户</h2><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">sudo passwd root</span><br><span class="line">-- 为root用户设置密码</span><br><span class="line"></span><br><span class="line">su root</span><br><span class="line">-- 切换到root用户</span><br><span class="line"></span><br><span class="line">sudo adduser he</span><br><span class="line">-- 增加he用户</span><br><span class="line"></span><br><span class="line">sudo deluser he</span><br><span class="line">删除he用户</span><br><span class="line"></span><br><span class="line">w</span><br><span class="line">-- 查看所有用户</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello world!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>



<p><strong><strong>如果对你有帮助，点赞、收藏、关注是我更新的动力！👋🌟🚀</strong></strong></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu系统下C语言开发环境搭建与使用教程</title>
    <url>/blog/2024/03/19/Ubuntu%E7%B3%BB%E7%BB%9F%E4%B8%8BC%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Ubuntu系统下C语言开发环境搭建与使用教程"><a href="#Ubuntu系统下C语言开发环境搭建与使用教程" class="headerlink" title="Ubuntu系统下C语言开发环境搭建与使用教程"></a>Ubuntu系统下C语言开发环境搭建与使用教程</h1><p>本指南为您提供了在Ubuntu操作系统上搭建C语言开发环境的详尽步骤。从网络配置到SSH服务安装，再到GCC编译器和Vim编辑器的配置，每一步都配有详细的命令和说明。此外，还包括了用户管理的实用技巧和C语言程序的测试示例。无论是Linux新手还是经验丰富的开发者，本教程都将助您快速上手C语言在Ubuntu上的应用开发。</p>
<h2 id="教程内容"><a href="#教程内容" class="headerlink" title="教程内容"></a>教程内容</h2><h3 id="0-序言"><a href="#0-序言" class="headerlink" title="0. 序言"></a>0. 序言</h3><p>Ubuntu是一个用户友好的Linux发行版，以其易用性和强大的社区支持而闻名。本指南将带您了解如何在Ubuntu上安装和配置C语言开发工具，让您能够轻松编写和编译C程序。</p>
<h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><p>在开始之前，确保您的Ubuntu系统已经连接到互联网。使用以下命令检查网络连接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure>

<p>如果网络未连接，您可能需要重启DHCP和NAT服务。在Windows主机上，可以通过服务管理界面重启这些服务。对于虚拟机，可以使用以下快捷键重启服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启VMware DHCP Service 和 VMware NAT Service</span></span><br></pre></td></tr></table></figure>

<p>更新Ubuntu的软件源，以确保您可以访问最新的软件包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>

<h3 id="2-安装SSH"><a href="#2-安装SSH" class="headerlink" title="2. 安装SSH"></a>2. 安装SSH</h3><p>SSH服务允许您远程管理Ubuntu系统。检查SSH服务是否已安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ps -e | grep ssh</span><br></pre></td></tr></table></figure>

<p>如果未安装，使用以下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install openssh-server</span><br></pre></td></tr></table></figure>

<p>安装完成后，再次检查SSH服务是否正在运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ps -e | grep ssh</span><br></pre></td></tr></table></figure>

<h3 id="3-安装GCC和G"><a href="#3-安装GCC和G" class="headerlink" title="3. 安装GCC和G++"></a>3. 安装GCC和G++</h3><p>GCC是GNU编译器集合，支持C语言和其他编程语言的编译。安装GCC：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install gcc</span><br></pre></td></tr></table></figure>

<p>为了编译C++程序，您还需要安装G++：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install g++</span><br></pre></td></tr></table></figure>

<h3 id="4-安装Vim"><a href="#4-安装Vim" class="headerlink" title="4. 安装Vim"></a>4. 安装Vim</h3><p>Vim是一个强大的文本编辑器，适合编写代码。安装Vim：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install vim</span><br></pre></td></tr></table></figure>

<h3 id="5-测试C语言程序"><a href="#5-测试C语言程序" class="headerlink" title="5. 测试C语言程序"></a>5. 测试C语言程序</h3><p>创建一个简单的C语言程序<code>hello.c</code>文件：</p>
<ul>
<li>使用<code>vim hello.c</code>命令</li>
<li>键盘输入 <code>i</code> 键，切入到输入模式</li>
<li>粘贴以下代码</li>
<li>键盘输入 <code>Esc</code> 键，退出输入模式</li>
<li>键盘输入 <code>:wq</code> 保存并退出</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hello.c - 一个简单的C语言程序，打印&quot;hello world!&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用GCC编译<code>hello.c</code>：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -Wall hello.c -o hello</span><br></pre></td></tr></table></figure>

<ul>
<li>运行编译后的程序：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./hello</span><br></pre></td></tr></table></figure>

<h3 id="6-用户管理"><a href="#6-用户管理" class="headerlink" title="6. 用户管理"></a>6. 用户管理</h3><p>Ubuntu默认不允许root用户登录，但您可以设置root密码以进行管理操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure>

<p>切换到root用户：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure>

<p>您可以添加新用户：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo adduser lkkb</span><br></pre></td></tr></table></figure>

<p>或删除用户：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo deluser lkkb</span><br></pre></td></tr></table></figure>

<p>查看当前系统的所有用户：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">w</span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过本教程，您已经成功在Ubuntu系统上搭建了C语言的开发环境。现在，您可以开始编写和编译自己的C程序了。如果您觉得本指南对您有所帮助，请不吝点赞、收藏或关注，以支持我们继续提供更多高质量的内容。祝您在Ubuntu上的C语言开发之旅顺利！👋🌟🚀</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Ubuntu编写运行C语言</title>
    <url>/blog/2024/02/09/Ubuntu%E7%BC%96%E5%86%99%E8%BF%90%E8%A1%8CC%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h1 id="如何在Ubuntu编写运行C语言"><a href="#如何在Ubuntu编写运行C语言" class="headerlink" title="如何在Ubuntu编写运行C语言"></a>如何在Ubuntu编写运行C语言</h1><h2 id="1-准备工作-检查网络-更新源"><a href="#1-准备工作-检查网络-更新源" class="headerlink" title="1.准备工作(检查网络&amp;更新源)"></a>1.准备工作(检查网络&amp;更新源)</h2><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ping</span> www.baidu.com</span><br><span class="line"></span><br><span class="line">services.msc</span><br><span class="line"></span><br><span class="line">VMware DHCP Service</span><br><span class="line">VMware NAT Service</span><br><span class="line"></span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>

<h2 id="2-ssh"><a href="#2-ssh" class="headerlink" title="2.ssh"></a>2.ssh</h2><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">sudo ps -e |grep ssh</span><br><span class="line"></span><br><span class="line">sudo apt install openssh-server</span><br><span class="line"></span><br><span class="line">sudo ps -e |grep ssh</span><br><span class="line"></span><br><span class="line">service ufw stop</span><br><span class="line"></span><br><span class="line">sudo apt install <span class="built_in">net</span>-tools</span><br><span class="line"></span><br><span class="line">ifconfig</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-gcc-g"><a href="#3-gcc-g" class="headerlink" title="3.gcc g++"></a>3.gcc g++</h2><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">sudo apt install gcc</span><br><span class="line"></span><br><span class="line">sudo apt install build-essential</span><br><span class="line"></span><br><span class="line">sudo apt install g++</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">## <span class="number">4</span>.vim</span><br><span class="line"></span><br><span class="line">```bat</span><br><span class="line">sudo apt install vim</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">## <span class="number">5</span>.测试</span><br><span class="line"></span><br><span class="line">```bat</span><br><span class="line">vim hello.c</span><br><span class="line"></span><br><span class="line">gcc -Wall hello.c -o hello</span><br><span class="line"></span><br><span class="line">gcc hello.c -o hello</span><br><span class="line"></span><br><span class="line">./hello</span><br></pre></td></tr></table></figure>

<h2 id="6-切换用户"><a href="#6-切换用户" class="headerlink" title="6.切换用户"></a>6.切换用户</h2><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">sudo passwd root</span><br><span class="line"></span><br><span class="line">su root</span><br><span class="line"></span><br><span class="line">sudo adduser he</span><br><span class="line"></span><br><span class="line">sudo deluser he</span><br><span class="line"></span><br><span class="line">w</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello world!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Vite多环境配置与打包：灵活高效的Vue开发工作流</title>
    <url>/blog/2024/04/15/Vite%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%89%93%E5%8C%85%EF%BC%9A%E7%81%B5%E6%B4%BB%E9%AB%98%E6%95%88%E7%9A%84Vue%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C%E6%B5%81/</url>
    <content><![CDATA[<h1 id="Vite多环境配置与打包：灵活高效的Vue开发工作流"><a href="#Vite多环境配置与打包：灵活高效的Vue开发工作流" class="headerlink" title="Vite多环境配置与打包：灵活高效的Vue开发工作流"></a>Vite多环境配置与打包：灵活高效的Vue开发工作流</h1><p>Vite作为一个新兴的前端构建工具，提供了快速的冷启动、即时模块热更新以及真正的按需编译，极大地提高了Vue开发效率。本文将向你展示如何在Vite中设置多环境开发和打包，包括如何配置环境变量、如何应用这些变量以及如何根据不同的环境进行项目的构建。通过这些步骤，你可以确保在开发、测试和生产等不同阶段中，你的应用都能以最佳状态运行。无论你是Vite的新手还是希望优化现有工作流的开发者，本文都将为你提供实用的指导和建议。</p>
<h2 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev cross-env</span><br></pre></td></tr></table></figure>

<h2 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2. 配置环境变量"></a>2. 配置环境变量</h2><p>在项目根目录下创建 <code>.env</code> 文件，分别为不同环境创建不同的环境变量配置。例如：</p>
<ul>
<li><code>.env</code>：默认环境</li>
<li><code>.env.development</code>：开发环境</li>
<li><code>.env.production</code>：生产环境</li>
</ul>
<p>在这些文件中，你可以设置不同的环境变量，例如 API 端点或其他服务的配置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># .env</span><br><span class="line">VITE_API_URL=https://api.example.com</span><br><span class="line"></span><br><span class="line"># .env.development</span><br><span class="line">VITE_API_URL=http://localhost:3000</span><br><span class="line"></span><br><span class="line"># .env.production</span><br><span class="line">VITE_API_URL=https://api.prod.example.com</span><br></pre></td></tr></table></figure>

<h2 id="3-应用环境变量"><a href="#3-应用环境变量" class="headerlink" title="3. 应用环境变量"></a>3. 应用环境变量</h2><p>在项目中，你可以通过 <code>import.meta.env</code> 访问这些环境变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 Vue 组件或任何 JS 文件中</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_API_URL</span>);</span><br></pre></td></tr></table></figure>

<h2 id="4-运行和构建项目"><a href="#4-运行和构建项目" class="headerlink" title="4. 运行和构建项目"></a>4. 运行和构建项目</h2><p>使用不同的环境变量运行和构建项目。在命令行中，你可以通过 <code>--mode</code> 选项指定环境。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开发环境</span></span><br><span class="line">vite --mode development</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产环境</span></span><br><span class="line">vite build --mode production</span><br></pre></td></tr></table></figure>

<p>或者，你可以在 <code>package.json</code> 的脚本中定义不同的命令，以便更方便地运行和构建。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite --mode development&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build:dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build --mode development&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build:prod&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build --mode production&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>然后，你可以使用 npm 或 yarn 运行这些脚本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br><span class="line">npm run build:dev</span><br><span class="line">npm run build:prod</span><br></pre></td></tr></table></figure>

<p>或者，如果你使用 Yarn：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn dev</span><br><span class="line">yarn build:dev</span><br><span class="line">yarn build:prod</span><br></pre></td></tr></table></figure>

<p>通过这种方式，你可以轻松地在不同的环境之间切换，并针对不同的环境进行开发和打包。记得在部署到生产环境之前，使用生产环境的配置进行构建，以确保所有的环境变量和优化都已正确设置。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2和Vue3组件通信：父子与兄弟间的桥梁</title>
    <url>/blog/2024/04/11/Vue2%E5%92%8CVue3%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%EF%BC%9A%E7%88%B6%E5%AD%90%E4%B8%8E%E5%85%84%E5%BC%9F%E9%97%B4%E7%9A%84%E6%A1%A5%E6%A2%81/</url>
    <content><![CDATA[<h1 id="Vue2和Vue3组件通信：父子与兄弟间的桥梁"><a href="#Vue2和Vue3组件通信：父子与兄弟间的桥梁" class="headerlink" title="Vue2和Vue3组件通信：父子与兄弟间的桥梁"></a>Vue2和Vue3组件通信：父子与兄弟间的桥梁</h1><p>在构建Vue应用时，掌握组件间的数据传输是至关重要的。本文将深入探讨Vue 2和Vue 3中父子组件间的通信机制，以及兄弟组件如何通过<code>provide</code>&#x2F;<code>inject</code> API进行数据共享。我们还将讨论跨层级组件通信的策略，包括使用事件总线（Event Bus）的模式。通过实用的代码示例和清晰的解释，你将学习到如何有效地在不同层级的Vue组件之间传递数据。无论你是Vue新手还是有经验的开发者，本文都将帮助你更好地理解和应用Vue的组件通信模式，从而构建出更加健壮和可维护的应用程序。</p>
<h3 id="父组件向子组件传递数据"><a href="#父组件向子组件传递数据" class="headerlink" title="父组件向子组件传递数据"></a>父组件向子组件传递数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ChildComponent :parentMessage=&quot;message&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import ChildComponent from &#x27;./ChildComponent.vue&#x27;;</span><br><span class="line"></span><br><span class="line">const message = ref(&#x27;来自父组件的消息&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; parentMessage &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; defineProps &#125; from &#x27;vue&#x27;;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  parentMessage: String</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="子组件向父组件传递数据"><a href="#子组件向父组件传递数据" class="headerlink" title="子组件向父组件传递数据"></a>子组件向父组件传递数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;sendMessageToParent&quot;&gt;点击我发送消息给父组件&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; defineEmits &#125; from &#x27;vue&#x27;;</span><br><span class="line">const emit = defineEmits([&#x27;message-from-child&#x27;]);</span><br><span class="line"></span><br><span class="line">function sendMessageToParent() &#123;</span><br><span class="line">  emit(&#x27;message-from-child&#x27;, &#x27;这是来自子组件的消息&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ChildComponent @message-from-child=&quot;receiveMessage&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import ChildComponent from &#x27;./ChildComponent.vue&#x27;;</span><br><span class="line"></span><br><span class="line">const receiveMessage = (message: string) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;父组件接收到的消息:&#x27;, message);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="兄弟组件间的数据传输"><a href="#兄弟组件间的数据传输" class="headerlink" title="兄弟组件间的数据传输"></a>兄弟组件间的数据传输</h2><h3 id="使用provide-inject-API"><a href="#使用provide-inject-API" class="headerlink" title="使用provide&#x2F;inject API"></a>使用<code>provide</code>&#x2F;<code>inject</code> API</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, provide &#125; from &#x27;vue&#x27;;</span><br><span class="line">import SiblingComponentA from &#x27;./SiblingComponentA.vue&#x27;;</span><br><span class="line">import SiblingComponentB from &#x27;./SiblingComponentB.vue&#x27;;</span><br><span class="line"></span><br><span class="line">const sharedData = ref(&#x27;兄弟组件共享的数据&#x27;);</span><br><span class="line">provide(&#x27;sharedDataKey&#x27;, sharedData.value);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 兄弟组件A --&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; inject &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const sharedData = inject(&#x27;sharedDataKey&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 兄弟组件B --&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; inject &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const sharedData = inject(&#x27;sharedDataKey&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="跨层级组件间的数据传输"><a href="#跨层级组件间的数据传输" class="headerlink" title="跨层级组件间的数据传输"></a>跨层级组件间的数据传输</h2><p>跨层级组件的通信可以使用Vuex或Vue 3的<code>provide</code>&#x2F;<code>inject</code> API，或者通过事件总线（Event Bus）。</p>
<h3 id="使用事件总线"><a href="#使用事件总线" class="headerlink" title="使用事件总线"></a>使用事件总线</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// eventBus.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; reactive, <span class="keyword">readonly</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">EventBus</span> = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">events</span>: <span class="keyword">new</span> <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="title class_">Array</span>&lt;<span class="function">(<span class="params">...args: <span class="built_in">any</span>[]</span>) =&gt;</span> <span class="built_in">void</span>&gt;&gt;()</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">emit</span>(<span class="params">event: <span class="built_in">string</span>, ...args: <span class="built_in">any</span>[]</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">EventBus</span>.<span class="property">events</span>.<span class="title function_">has</span>(event)) &#123;</span><br><span class="line">    <span class="title class_">EventBus</span>.<span class="property">events</span>.<span class="title function_">get</span>(event)?.<span class="title function_">forEach</span>(<span class="function"><span class="params">handler</span> =&gt;</span> <span class="title function_">handler</span>(...args));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">on</span>(<span class="params">event: <span class="built_in">string</span>, handler: (...args: <span class="built_in">any</span>[]) =&gt; <span class="built_in">void</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">EventBus</span>.<span class="property">events</span>.<span class="title function_">has</span>(event)) &#123;</span><br><span class="line">    <span class="title class_">EventBus</span>.<span class="property">events</span>.<span class="title function_">set</span>(event, <span class="keyword">new</span> <span class="title class_">Array</span>&lt;<span class="function">(<span class="params">...args: <span class="built_in">any</span>[]</span>) =&gt;</span> <span class="built_in">void</span>&gt;());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">EventBus</span>.<span class="property">events</span>.<span class="title function_">get</span>(event)?.<span class="title function_">push</span>(handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在需要发送事件的组件中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; onMounted &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; emit &#125; from &#x27;./eventBus&#x27;;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  emit(&#x27;event-name&#x27;, &#123; data: &#x27;这是来自子组件的消息&#x27; &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>在需要接收事件的组件中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; onMounted &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; on &#125; from &#x27;./eventBus&#x27;;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  on(&#x27;event-name&#x27;, (data) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;接收到的事件数据:&#x27;, data.data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>使用 <code>&lt;script setup&gt;</code> 语法可以让我们以更简洁的方式编写Vue组件，尤其是在TypeScript的支持下，我们可以享受到更好的类型推断和自动补全。这使得组件间的通信代码更加清晰和易于维护。在构建大型应用时，合理地使用这些通信模式将有助于保持应用的模块化和可扩展性。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 3响应式系统详解：ref、toRefs、reactive及更多</title>
    <url>/blog/2024/03/19/Vue-3%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AF%A6%E8%A7%A3%EF%BC%9Aref%E3%80%81toRefs%E3%80%81reactive%E5%8F%8A%E6%9B%B4%E5%A4%9A/</url>
    <content><![CDATA[<h1 id="Vue-3响应式系统详解：ref、toRefs、reactive及更多"><a href="#Vue-3响应式系统详解：ref、toRefs、reactive及更多" class="headerlink" title="Vue 3响应式系统详解：ref、toRefs、reactive及更多"></a>Vue 3响应式系统详解：ref、toRefs、reactive及更多</h1><p>在 Vue 3 中，<code>ref</code>、<code>toRefs</code> 和 <code>reactive</code> 是处理响应式数据的三种不同方式，它们各自有不同的用途和特点。</p>
<h2 id="1-ref、toRefs、reactive"><a href="#1-ref、toRefs、reactive" class="headerlink" title="1. ref、toRefs、reactive"></a>1. ref、toRefs、reactive</h2><h3 id="1-ref"><a href="#1-ref" class="headerlink" title="1. ref"></a>1. <code>ref</code></h3><p><code>ref</code> 是用来创建响应式引用的主要方法。它通常用于基本数据类型（如字符串、数字、布尔值）的响应式包装。在模板中可以直接使用，但在 JavaScript 中需要通过 <code>.value</code> 属性来访问或修改它的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> userName = <span class="string">&#x27;洛可可白&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 JavaScript 中访问</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>); <span class="comment">// 0</span></span><br><span class="line">count.<span class="property">value</span>++; <span class="comment">// 增加计数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在模板中访问</span></span><br><span class="line"><span class="comment">// &lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-toRefs"><a href="#2-toRefs" class="headerlink" title="2. toRefs"></a>2. <code>toRefs</code></h3><p><code>toRefs</code> 是用来将 <code>reactive</code> 对象中的每个属性转换为一个 <code>ref</code> 对象的函数。这样做的好处是，当你在组件的 <code>setup</code> 函数中使用 <code>reactive</code> 创建一个响应式对象，并希望在模板或子组件中访问这些属性时，可以直接使用 <code>ref</code> 而不用担心它们被意外地解构。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">userName</span>: <span class="string">&#x27;洛可可白&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在模板中使用 toRefs 转换后的属性</span></span><br><span class="line"><span class="comment">// &lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">// &lt;div&gt;&#123;&#123; userName &#125;&#125;&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 reactive 对象转换为 ref 对象数组</span></span><br><span class="line"><span class="keyword">const</span> &#123; count, userName &#125; = <span class="title function_">toRefs</span>(state);</span><br></pre></td></tr></table></figure>

<h3 id="3-reactive"><a href="#3-reactive" class="headerlink" title="3. reactive"></a>3. <code>reactive</code></h3><p><code>reactive</code> 是用来创建响应式对象的方法，适用于处理对象和数组。与 Vue 2 中的 <code>data</code> 函数类似，它允许你定义一个对象，对象中的所有属性都将是响应式的。<code>reactive</code> 对象的属性可以在模板和 JavaScript 中直接访问和修改，不需要 <code>.value</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">userName</span>: <span class="string">&#x27;洛可可白&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 JavaScript 中访问和修改</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(state.<span class="property">count</span>); <span class="comment">// 0</span></span><br><span class="line">state.<span class="property">count</span>++; <span class="comment">// 增加计数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在模板中直接访问</span></span><br><span class="line"><span class="comment">// &lt;div&gt;&#123;&#123; state.count &#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">// &lt;div&gt;&#123;&#123; state.userName &#125;&#125;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-区别和作用"><a href="#4-区别和作用" class="headerlink" title="4. 区别和作用"></a>4. 区别和作用</h3><ul>
<li><code>ref</code> 适用于基本数据类型的响应式包装，需要通过 <code>.value</code> 访问。</li>
<li><code>toRefs</code> 用于将 <code>reactive</code> 对象的属性转换为 <code>ref</code> 对象，以便在模板或子组件中使用。</li>
<li><code>reactive</code> 适用于创建响应式对象，适用于对象和数组，属性可以直接访问。</li>
</ul>
<p>在实际开发中，可以根据需要选择使用 <code>ref</code>、<code>toRefs</code> 或 <code>reactive</code>。例如，如果你只需要处理基本数据类型，<code>ref</code> 就足够了。如果你需要处理一个对象，并且想要在模板中直接访问对象的属性，那么 <code>reactive</code> 是更好的选择。如果你需要在子组件中访问 <code>reactive</code> 对象的属性，那么使用 <code>toRefs</code> 将这些属性转换为 <code>ref</code> 是必要的。</p>
<h2 id="2-更多处理响应式数据的方法"><a href="#2-更多处理响应式数据的方法" class="headerlink" title="2. 更多处理响应式数据的方法"></a>2. 更多处理响应式数据的方法</h2><p>在 Vue 3 中，除了 <code>ref</code>、<code>toRefs</code> 和 <code>reactive</code>，还有其他几种处理响应式数据的方法和概念：</p>
<h3 id="1-computed"><a href="#1-computed" class="headerlink" title="1. computed"></a>1. <code>computed</code></h3><p><code>computed</code> 用于创建计算属性，这些属性的值是基于其他响应式数据源派生出来的。计算属性是惰性求值的，只有当它们的依赖项发生改变时才会重新计算。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> doubleCount = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2-watch"><a href="#2-watch" class="headerlink" title="2. watch"></a>2. <code>watch</code></h3><p><code>watch</code> 用于观察响应式数据的变化，并在数据变化时执行特定的函数。这对于执行数据变化后的处理逻辑非常有用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">watch</span>(count, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Count changed from <span class="subst">$&#123;oldValue&#125;</span> to <span class="subst">$&#123;newValue&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="3-watchEffect"><a href="#3-watchEffect" class="headerlink" title="3. watchEffect"></a>3. <code>watchEffect</code></h3><p><code>watchEffect</code> 是一个基于响应式数据源的观察者，它会立即执行一次，并且当响应式数据源变化时重新执行。它通常用于处理那些不需要立即获取值的副作用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, watchEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Count is now: <span class="subst">$&#123;count.value&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="4-onMounted-和-onUnmounted"><a href="#4-onMounted-和-onUnmounted" class="headerlink" title="4. onMounted 和 onUnmounted"></a>4. <code>onMounted</code> 和 <code>onUnmounted</code></h3><p><code>onMounted</code> 和 <code>onUnmounted</code> 是生命周期钩子，分别在组件挂载后和卸载前执行。它们可以用来处理需要清理的资源或执行一次性的初始化操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Component is mounted!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Component is unmounted!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="5-provide-和-inject"><a href="#5-provide-和-inject" class="headerlink" title="5. provide 和 inject"></a>5. <code>provide</code> 和 <code>inject</code></h3><p><code>provide</code> 和 <code>inject</code> 是用于组件间通信的 API，允许父组件提供数据，子组件注入并使用这些数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; provide, inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="title function_">provide</span>(<span class="string">&#x27;injectedValue&#x27;</span>, <span class="string">&#x27;This is provided by parent&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">const</span> injectedValue = <span class="title function_">inject</span>(<span class="string">&#x27;injectedValue&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="6-nextTick"><a href="#6-nextTick" class="headerlink" title="6. nextTick"></a>6. <code>nextTick</code></h3><p><code>nextTick</code> 是一个全局方法，用于在下次 DOM 更新循环结束之后执行延迟回调。在修改了响应式数据之后，通常用于等待 DOM 更新。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; nextTick &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;DOM has been updated!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这些方法和概念是 Vue 3 响应式系统的核心部分，它们提供了强大的数据管理能力，使得开发者能够构建高效且易于维护的应用程序。</p>
<h2 id="🎉-往期精彩回顾"><a href="#🎉-往期精彩回顾" class="headerlink" title="🎉 往期精彩回顾"></a>🎉 往期精彩回顾</h2><blockquote>
<p><strong><a href="https://blog.csdn.net/interest_ing_/article/details/136667223">主流开发语言和开发环境、程序员如何选择职业赛道？</a></strong></p>
<ul>
<li>852阅读 · 27点赞 · 9收藏</li>
</ul>
</blockquote>
<blockquote>
<p><strong><a href="https://blog.csdn.net/interest_ing_/article/details/126889661">VS code搭建C&#x2F;C++运行环境简单易上手</a></strong></p>
<ul>
<li>2803阅读 · 5点赞 · 8收藏</li>
</ul>
</blockquote>
<blockquote>
<p><strong><a href="https://blog.csdn.net/interest_ing_/article/details/125942652">Vue.2&amp;Vue.3项目引入Element-UI教程&amp;踩坑</a></strong></p>
<ul>
<li>9284阅读 · 22点赞 · 82收藏</li>
</ul>
</blockquote>
<blockquote>
<p><strong><a href="https://blog.csdn.net/interest_ing_/article/details/125942436">Vue项目引入Echarts可视化图表库教程&amp;踩坑</a></strong></p>
<ul>
<li>2209阅读 · 3点赞 · 5收藏</li>
</ul>
</blockquote>
<blockquote>
<p><strong><a href="https://blog.csdn.net/interest_ing_/article/details/125883539">VirtualBox虚拟机搭建CentOS系统教程</a></strong></p>
<ul>
<li>4502阅读 · 4点赞 · 32收藏</li>
</ul>
</blockquote>
<blockquote>
<p><strong><a href="https://blog.csdn.net/interest_ing_/article/details/125754543">VS Code上搭建Vue开发环境</a></strong></p>
<ul>
<li>10709阅读 · 13点赞 · 66收藏</li>
</ul>
</blockquote>
<blockquote>
<p><strong><a href="https://blog.csdn.net/interest_ing_/article/details/125730385">Color-UI 简介及使用教程</a></strong></p>
<ul>
<li>5932阅读 · 2点赞 · 13收藏</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue工程setup函数详解</title>
    <url>/blog/2024/02/09/Vue%E5%B7%A5%E7%A8%8Bsetup%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="Vue工程setup函数详解"><a href="#Vue工程setup函数详解" class="headerlink" title="Vue工程setup函数详解"></a>Vue工程setup函数详解</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>Vue3 的一大特性函数 —- setup<br>　　1、setup函数是处于 生命周期函数 beforeCreate 和 Created 两个钩子函数之间的函数 也就说在 setup函数中是无法 使用 data 和 methods 中的数据和方法的<br>　　2、setup函数是 Composition API（组合API）的入口<br>　　3、在setup函数中定义的变量和方法最后都是需要 return 出去的 不然无法再模板中使用</p>
<h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; readersNumber &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>自定义点击事件<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* 方式一：(script 右边写上 setup)*/</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// import &#123;onBeforeMount, ref&#125; from &quot;vue&quot;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// const readersNumber = ref(&#x27;绿色回收&#x27;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// const onClick = () =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   console.log(readersNumber.value)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   if (typeof readersNumber.value === &quot;string&quot;) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     console.log(&#x27;string&#x27;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   &#125; else &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     console.log(&#x27;other&#x27;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   // alert(readersNumber)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// onBeforeMount(() =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   console.log(&#x27;数据渲染前&#x27;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* 方式二：*/</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// import &#123;onBeforeMount, ref&#125; from &quot;vue&quot;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// export default &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   name: &quot;OrderForm_BP&quot;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   setup() &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     const readersNumber = ref(&#x27;OrderForm_BP&#x27;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     const onClick = () =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//       console.log(readersNumber.value)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//       if (typeof readersNumber.value === &quot;string&quot;) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//         console.log(&#x27;string&#x27;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//       &#125; else &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//         console.log(&#x27;other&#x27;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//       &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//       // alert(readersNumber)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     onBeforeMount(()=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//       console.log(&#x27;数据渲染前&#x27;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     return &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//       onClick,</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//       readersNumber,</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* 方式三：*/</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;reactive, toRefs&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;SetupDemo&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> data = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">readersNumber</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">userList</span>: [],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">tableList</span>: [],</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> onClick = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">readersNumber</span>, <span class="string">&#x27;自定义点击事件&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      data.<span class="property">readersNumber</span> = <span class="string">&#x27;readersNumber数据&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (data.<span class="property">readersNumber</span> === <span class="string">&quot;readersNumber&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;string&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;other&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//解构</span></span></span><br><span class="line"><span class="language-javascript">      ...<span class="title function_">toRefs</span>(data),</span></span><br><span class="line"><span class="language-javascript">      onClick</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="三、说明"><a href="#三、说明" class="headerlink" title="三、说明"></a>三、说明</h2><h3 id="NO-1-setup写在script标签内。"><a href="#NO-1-setup写在script标签内。" class="headerlink" title="NO.1 setup写在script标签内。"></a>NO.1 setup写在script标签内。</h3><p>使用ref绑定数据，无需export，import的组件页面内可以直接使用，但需要反复const，ref数据。调用数据{数据名}.value。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;onBeforeMount, ref&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> readersNumber = <span class="title function_">ref</span>(<span class="string">&#x27;setup写在script标签内&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">onClick</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(readersNumber.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (<span class="keyword">typeof</span> readersNumber.<span class="property">value</span> === <span class="string">&quot;string&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;string&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;other&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// alert(readersNumber)</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onBeforeMount</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据渲染前&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="NO-2-setup写在js中。"><a href="#NO-2-setup写在js中。" class="headerlink" title="NO.2 setup写在js中。"></a>NO.2 setup写在js中。</h3><p>使用ref绑定数据，事件和数据都需要return出去。调用数据{数据名}.value。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;SetupDemo&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> readersNumber = <span class="title function_">ref</span>(<span class="string">&#x27;setup写在js中&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">onClick</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(readersNumber.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (<span class="keyword">typeof</span> readersNumber.<span class="property">value</span> === <span class="string">&quot;string&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;string&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;other&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// alert(readersNumber)</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      onClick,</span></span><br><span class="line"><span class="language-javascript">      readersNumber,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="NO-3-setup写在js中，使用reactive打包页面内数据，再使用toRefs解构。"><a href="#NO-3-setup写在js中，使用reactive打包页面内数据，再使用toRefs解构。" class="headerlink" title="NO.3 setup写在js中，使用reactive打包页面内数据，再使用toRefs解构。"></a>NO.3 setup写在js中，使用reactive打包页面内数据，再使用toRefs解构。</h3><p>避免数据反复const和return,事件需要return出去。调用数据data.{数据名}。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;reactive, toRefs&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;SetupDemo&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//data可以自定义名字</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> data = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">readersNumber</span>: <span class="string">&quot;setup写在js中&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> onClick = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">readersNumber</span>, <span class="string">&#x27;自定义点击事件&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      data.<span class="property">readersNumber</span> = <span class="string">&#x27;setup写在js中&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (data.<span class="property">readersNumber</span> === <span class="string">&quot;readersNumber&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;string&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;other&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//解构</span></span></span><br><span class="line"><span class="language-javascript">      ...<span class="title function_">toRefs</span>(data),</span></span><br><span class="line"><span class="language-javascript">      onClick</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="四、PS：关于vue3生命周期介绍"><a href="#四、PS：关于vue3生命周期介绍" class="headerlink" title="四、PS：关于vue3生命周期介绍"></a>四、PS：关于vue3生命周期介绍</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;onBeforeMount, onBeforeUnmount, onBeforeUpdate, onMounted, onUnmounted, onUpdated, reactive, toRefs&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;SetupDemo&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> data = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">readersNumber</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> onClick = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">readersNumber</span>, <span class="string">&#x27;自定义点击事件&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      data.<span class="property">readersNumber</span> = <span class="string">&#x27;readersNumber&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (data.<span class="property">readersNumber</span> === <span class="string">&quot;readersNumber&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;string&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;other&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//生命周期</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onBeforeMount</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据渲染前&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;渲染结束&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onBeforeUpdate</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;页面Dom更新之前&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onUpdated</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;页面Dom更新之后&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onBeforeUnmount</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Vue实例销毁之前&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Vue实例销毁之后&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//解构</span></span></span><br><span class="line"><span class="language-javascript">      ...<span class="title function_">toRefs</span>(data),</span></span><br><span class="line"><span class="language-javascript">      onClick</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue命令行式组件的封装</title>
    <url>/blog/2024/02/09/Vue%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BC%8F%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<h1 id="ue命令行式组件的封装"><a href="#ue命令行式组件的封装" class="headerlink" title="ue命令行式组件的封装"></a>ue命令行式组件的封装</h1><h4 id="一-组件封装"><a href="#一-组件封装" class="headerlink" title="一. 组件封装"></a>一. 组件封装</h4><h5 id="1-解决js文件中如何书写渲染html"><a href="#1-解决js文件中如何书写渲染html" class="headerlink" title="1.解决js文件中如何书写渲染html"></a>1.解决js文件中如何书写渲染html</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;$props, $emit&#125; = ctx;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">DivModal</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">DivBox</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;$props.msg&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">DivButton</span> <span class="attr">click</span>=<span class="string">&#123;$emit(</span>&#x27;<span class="attr">onClick</span>&#x27;)&#125;&gt;</span>确认<span class="tag">&lt;/<span class="name">DivButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">DivBox</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">DivModal</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*使用render方法将html元素渲染到页面上，在showMsg函数中，创建了一个div元素，使用createApp方法创建一个vue实例app，将div挂载到app应用中。*/</span></span><br></pre></td></tr></table></figure>



<h5 id="2-解决js文件中如何将html元素加上样式"><a href="#2-解决js文件中如何将html元素加上样式" class="headerlink" title="2.解决js文件中如何将html元素加上样式"></a>2.解决js文件中如何将html元素加上样式</h5><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//package.json</span></span><br><span class="line"><span class="attr">&quot;@styils/vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.1.6&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//showMsg.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DivModal</span> = <span class="title function_">styled</span>(<span class="string">&#x27;div&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">position</span>: <span class="string">&#x27;fixed&#x27;</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">    <span class="attr">top</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="attr">left</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="attr">background</span>: <span class="string">&#x27;rgba(0,0,0,.4)&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/*参考react中的方法，使用styiles第三方库实现，将需要加样式的元素声明为一个对象代替，将对象赋予上样式完成。*/</span></span><br></pre></td></tr></table></figure>

<p>使用时div 标签由 DivModal 代替：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//showMsg.js</span></span><br><span class="line"><span class="title function_">render</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;$props, $emit&#125; = ctx;</span><br><span class="line">        <span class="comment">//div 标签由 DivModal 代替</span></span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">DivModal</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            ...</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">DivModal</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-showMsg-js-组件全部代码"><a href="#3-showMsg-js-组件全部代码" class="headerlink" title="3.showMsg.js 组件全部代码"></a>3.showMsg.js 组件全部代码</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//showMsg.js</span></span><br><span class="line"><span class="comment">// import MessageBox from &quot;@/components/MessageBox.vue&quot;;</span></span><br><span class="line"><span class="keyword">import</span> &#123;createApp&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;styled&#125; <span class="keyword">from</span> <span class="string">&quot;@styils/vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DivModal</span> = <span class="title function_">styled</span>(<span class="string">&#x27;div&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">position</span>: <span class="string">&#x27;fixed&#x27;</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">    <span class="attr">top</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="attr">left</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="attr">background</span>: <span class="string">&#x27;rgba(0,0,0,.4)&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DivBox</span> = <span class="title function_">styled</span>(<span class="string">&#x27;div&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">position</span>: <span class="string">&#x27;fixed&#x27;</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="string">&#x27;300px&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="string">&#x27;100px&#x27;</span>,</span><br><span class="line">    <span class="attr">top</span>: <span class="string">&#x27;40%&#x27;</span>,</span><br><span class="line">    <span class="attr">left</span>: <span class="string">&#x27;calc(50% - 150px)&#x27;</span>,</span><br><span class="line">    <span class="attr">background</span>: <span class="string">&#x27;white&#x27;</span>,</span><br><span class="line">    <span class="attr">borderRadius</span>: <span class="string">&#x27;10px&#x27;</span>,</span><br><span class="line">    <span class="attr">border</span>: <span class="string">&#x27;2px solid #707070&#x27;</span>,</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;#000&#x27;</span>,</span><br><span class="line">    <span class="attr">display</span>: <span class="string">&#x27;flex&#x27;</span>,</span><br><span class="line">    <span class="attr">flexDirection</span>: <span class="string">&#x27;column&#x27;</span>,</span><br><span class="line">    <span class="attr">justifyContent</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    <span class="attr">alignItems</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DivButton</span> = <span class="title function_">styled</span>(<span class="string">&#x27;el-button&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">cursor</span>: <span class="string">&#x27;pointer&#x27;</span>,</span><br><span class="line">    <span class="attr">borderRadius</span>: <span class="string">&#x27;5px&#x27;</span>,</span><br><span class="line">    <span class="attr">padding</span>: <span class="string">&#x27;5px 10px&#x27;</span>,</span><br><span class="line">    <span class="attr">background</span>: <span class="string">&#x27;#409eff&#x27;</span>,</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;white&#x27;</span>,</span><br><span class="line">    <span class="attr">fontSize</span>: <span class="string">&#x27;14px&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MessageBox</span> = &#123;</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">msg</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">            <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">render</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;$props, $emit&#125; = ctx;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">DivModal</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">DivBox</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;$props.msg&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">DivButton</span> <span class="attr">click</span>=<span class="string">&#123;$emit(</span>&#x27;<span class="attr">onClick</span>&#x27;)&#125;&gt;</span>确认<span class="tag">&lt;/<span class="name">DivButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">DivBox</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">DivModal</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showMsg</span>(<span class="params">msg, clickHandle</span>) &#123;</span><br><span class="line">	<span class="comment">//创建一个div元素</span></span><br><span class="line">    <span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div)</span><br><span class="line">	<span class="comment">//创建app应用</span></span><br><span class="line">    <span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">MessageBox</span>, &#123;</span><br><span class="line">        msg, <span class="title function_">onClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">            clickHandle &amp; <span class="title function_">clickHandle</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            	<span class="comment">//卸载app应用</span></span><br><span class="line">                app.<span class="title function_">unmount</span>(div);</span><br><span class="line">                <span class="comment">//移除div元素</span></span><br><span class="line">                div.<span class="title function_">remove</span>();</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//将div挂载到app应用上</span></span><br><span class="line">    app.<span class="title function_">mount</span>(div);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> showMsg;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="二-如何使用组件"><a href="#二-如何使用组件" class="headerlink" title="二. 如何使用组件"></a>二. 如何使用组件</h4><h5 id="1-导入"><a href="#1-导入" class="headerlink" title="1.导入"></a>1.导入</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MessageView.vue</span></span><br><span class="line"><span class="keyword">import</span> showMsg <span class="keyword">from</span> <span class="string">&#x27;@/components/showMsg&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h5 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MessageView.vue</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clickHandle</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">showMsg</span>(<span class="string">&#x27;我是弹出框,点击确认隐藏&#x27;</span>, <span class="function">(<span class="params">close</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了确认&#x27;</span>)</span><br><span class="line">    <span class="title function_">close</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-示例"><a href="#3-示例" class="headerlink" title="3.示例"></a>3.示例</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//MessageView.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot; @click=&quot;clickHandle&quot;&gt;显示&lt;/el-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import showMsg from &#x27;@/components/showMsg&#x27;;</span><br><span class="line"></span><br><span class="line">const clickHandle = () =&gt; &#123;</span><br><span class="line">  showMsg(&#x27;我是弹出框,点击确认隐藏&#x27;, (close) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;点击了确认&#x27;)</span><br><span class="line">    close();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue项目中使用Mock.js进行API模拟</title>
    <url>/blog/2023/02/13/Vue%E5%B7%A5%E7%A8%8B%E4%BD%BF%E7%94%A8mockjs/</url>
    <content><![CDATA[<h1 id="Vue项目中使用Mock-js进行API模拟"><a href="#Vue项目中使用Mock-js进行API模拟" class="headerlink" title="Vue项目中使用Mock.js进行API模拟"></a>Vue项目中使用Mock.js进行API模拟</h1><p>在开发Vue应用时，我们经常需要模拟API响应，以便在后端服务尚未准备好时进行前端开发。Mock.js是一个强大的工具，可以帮助我们轻松创建模拟数据。本教程将指导你如何在Vue项目中集成和使用Mock.js。</p>
<h2 id="安装Mock-js"><a href="#安装Mock-js" class="headerlink" title="安装Mock.js"></a>安装Mock.js</h2><p>首先，你需要在你的Vue项目中安装Mock.js。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i mockjs</span><br></pre></td></tr></table></figure>

<h2 id="创建Mock数据"><a href="#创建Mock数据" class="headerlink" title="创建Mock数据"></a>创建Mock数据</h2><p>在你的项目中创建一个<code>mock</code>目录，并添加一个<code>index.js</code>文件。在这个文件中，我们将定义我们的模拟数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/mock/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Mock</span> <span class="keyword">from</span> <span class="string">&#x27;mockjs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建模拟数据</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;</span><br><span class="line">  <span class="string">&#x27;list|1-10&#x27;</span>: [&#123;</span><br><span class="line">    <span class="string">&#x27;id|+1&#x27;</span>: <span class="number">1</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟API响应</span></span><br><span class="line"><span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="string">&#x27;/api/list/&#x27;</span>, <span class="string">&#x27;get&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> data.<span class="property">list</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="在Vue应用中导入Mock数据"><a href="#在Vue应用中导入Mock数据" class="headerlink" title="在Vue应用中导入Mock数据"></a>在Vue应用中导入Mock数据</h2><p>在<code>main.js</code>文件中，导入并使用Mock数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/mock&#x27;</span> <span class="comment">// 导入Mock数据</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="使用Mock数据"><a href="#使用Mock数据" class="headerlink" title="使用Mock数据"></a>使用Mock数据</h2><p>在Vue组件中，你可以像往常一样使用<code>fetch</code>或<code>axios</code>来请求模拟的API。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// page.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 组件内容 --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import request from &#x27;@/request/index&#x27;;</span><br><span class="line">import &#123; onMounted, ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  request.get(&#x27;/list/&#x27;).then((res: any) =&gt; &#123;</span><br><span class="line">    console.log(res.data);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="配置Axios"><a href="#配置Axios" class="headerlink" title="配置Axios"></a>配置Axios</h2><p>为了更好地管理API请求，我们通常会使用Axios。首先安装Axios。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i axios</span><br></pre></td></tr></table></figure>

<p>然后创建一个<code>config</code>目录，并添加一个<code>index.js</code>文件来配置Axios。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/config/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> baseURL = <span class="string">&#x27;/api&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> timeout = <span class="number">10000</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> headers = &#123; <span class="string">&#x27;X-Custom-Header&#x27;</span>: <span class="string">&#x27;foobar&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>

<p>接着创建一个<code>request.js</code>文件来封装Axios请求。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; baseURL, timeout, headers &#125; <span class="keyword">from</span> <span class="string">&quot;@/config&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@ts-ignore</span></span><br><span class="line"><span class="keyword">const</span> request = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  baseURL,</span><br><span class="line">  timeout,</span><br><span class="line">  headers,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request;</span><br></pre></td></tr></table></figure>

<h2 id="配置Vite代理"><a href="#配置Vite代理" class="headerlink" title="配置Vite代理"></a>配置Vite代理</h2><p>如果你的开发环境需要代理API请求，你可以在<code>vue.config.js</code>中配置代理。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: <span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;./src&#x27;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://localhost:5174/&quot;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/\/api/</span>, <span class="string">&quot;&quot;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<hr>
<p>以上就是在Vue项目中使用Mock.js进行API模拟的完整步骤。通过这些步骤，你可以在前端开发过程中轻松地模拟后端API，从而提高开发效率。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue工程使用axios</title>
    <url>/blog/2023/02/09/Vue%E5%B7%A5%E7%A8%8B%E4%BD%BF%E7%94%A8axios/</url>
    <content><![CDATA[<h1 id="Vue工程使用axios"><a href="#Vue工程使用axios" class="headerlink" title="Vue工程使用axios"></a>Vue工程使用axios</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i axios</span><br></pre></td></tr></table></figure>

<h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//src/config/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> baseURL = <span class="string">&#x27;/api&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> timeout = <span class="number">10000</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> headers = &#123; <span class="string">&#x27;X-Custom-Header&#x27;</span>: <span class="string">&#x27;foobar&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//src/request/index.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; baseURL, timeout, headers &#125; <span class="keyword">from</span> <span class="string">&#x27;@/config&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    baseURL,</span><br><span class="line">    timeout,</span><br><span class="line">    headers</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 2xx 范围内的状态码都会触发该函数。</span></span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 超出 2xx 范围的状态码都会触发该函数。</span></span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request;</span><br></pre></td></tr></table></figure>

<h2 id="代理解决跨域"><a href="#代理解决跨域" class="headerlink" title="代理解决跨域"></a>代理解决跨域</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//vue.config.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; fileURLToPath, <span class="variable constant_">URL</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;node:url&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: <span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;./src&#x27;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://localhost:5174/&quot;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/\/api/</span>, <span class="string">&quot;&quot;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import request from &#x27;@/request/index&#x27;;</span><br><span class="line">import &#123; onMounted, ref &#125; from &#x27;vue&#x27;</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  request.get(&#x27;/list/&#x27;).then((res: any) =&gt; &#123;</span><br><span class="line">    console.log(res.data);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue组件间通信实践</title>
    <url>/blog/2024/02/09/Vue%E5%B7%A5%E7%A8%8B%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h1 id="Vue组件间通信实践"><a href="#Vue组件间通信实践" class="headerlink" title="Vue组件间通信实践"></a>Vue组件间通信实践</h1><p>在Vue中，组件间的通信是构建复杂应用的关键。本教程将通过几个简单的例子来展示如何在Vue组件之间传递数据和方法。</p>
<h2 id="defineProps和defineEmits的作用"><a href="#defineProps和defineEmits的作用" class="headerlink" title="defineProps和defineEmits的作用"></a>defineProps和defineEmits的作用</h2><p>在Vue 3中，<code>defineProps</code>和<code>defineEmits</code>是Composition API的一部分，它们用于在组件中声明props（接收来自父组件的数据）和emits（触发事件传递给父组件）。</p>
<h3 id="defineProps"><a href="#defineProps" class="headerlink" title="defineProps"></a>defineProps</h3><p><code>defineProps</code>用于声明组件接收的props。它允许你定义一个接口，指定哪些属性将作为props传递给组件。这有助于提供类型检查和自动完成功能，使得组件的props使用更加清晰和安全。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineProps &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="comment">// 定义一个名为 &#x27;message&#x27; 的 prop，类型为 String</span></span><br><span class="line">  <span class="attr">message</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="comment">// 定义一个名为 &#x27;age&#x27; 的 prop，类型为 Number，可选，默认值为 18</span></span><br><span class="line">  <span class="attr">age</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="number">18</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 定义一个名为 &#x27;isStudent&#x27; 的 prop，类型为 Boolean</span></span><br><span class="line">  <span class="attr">isStudent</span>: <span class="title class_">Boolean</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在上面的例子中，<code>props</code>是一个响应式引用，你可以在组件的其他地方使用它来访问这些props。</p>
<h3 id="defineEmits"><a href="#defineEmits" class="headerlink" title="defineEmits"></a>defineEmits</h3><p><code>defineEmits</code>用于声明组件可以触发的事件（emits）。这允许你在组件内部定义可以被父组件监听的事件。与<code>defineProps</code>类似，它也提供了类型检查和自动完成的功能。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineEmits &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emits = <span class="title function_">defineEmits</span>(&#123;</span><br><span class="line">  <span class="comment">// 定义一个名为 &#x27;update:name&#x27; 的事件</span></span><br><span class="line">  <span class="comment">// 当这个事件被触发时，它将传递一个名为 &#x27;name&#x27; 的参数</span></span><br><span class="line">  <span class="string">&#x27;update:name&#x27;</span>: <span class="function">(<span class="params">name: string</span>) =&gt;</span> <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 定义一个名为 &#x27;delete&#x27; 的事件，没有参数</span></span><br><span class="line">  <span class="string">&#x27;delete&#x27;</span>: <span class="function">() =&gt;</span> <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在上面的例子中，<code>emits</code>是一个对象，它描述了组件可以触发的事件。你可以在组件内部使用<code>emits</code>来触发这些事件。</p>
<h2 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h2><h3 id="父组件传递数据和方法给子组件"><a href="#父组件传递数据和方法给子组件" class="headerlink" title="父组件传递数据和方法给子组件"></a>父组件传递数据和方法给子组件</h3><p>在父组件中，我们定义了一些数据和方法，并通过props传递给子组件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div @click=&quot;props.viewFun&quot;&gt;***main组件***&lt;/div&gt;</span><br><span class="line">    &lt;hello-world</span><br><span class="line">      :fuData=&quot;fuData&quot;</span><br><span class="line">      :fuFunc=&quot;fuFunc&quot;</span><br><span class="line">      @child-event=&quot;receiveCh&quot;</span><br><span class="line">    &gt;&lt;/hello-world&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import HelloWorld from &quot;@/components/HelloWorld.vue&quot;;</span><br><span class="line"></span><br><span class="line">// 定义数据和方法</span><br><span class="line">const fuData = &quot;main数据&quot;;</span><br><span class="line">const fuFunc = (i: any) =&gt; &#123;</span><br><span class="line">  console.log(&quot;main组件的方法&quot;, i);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 子组件触发的事件处理</span><br><span class="line">const receiveCh = () =&gt; &#123;</span><br><span class="line">  console.log(&quot;main组件的方法被调用了&quot;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 使用defineProps定义props</span><br><span class="line">import &#123; defineProps &#125; from &quot;vue&quot;;</span><br><span class="line">const props = defineProps([&quot;viewFun&quot;]);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="子组件调用父组件的方法"><a href="#子组件调用父组件的方法" class="headerlink" title="子组件调用父组件的方法"></a>子组件调用父组件的方法</h3><p>在子组件中，我们可以通过<code>emit</code>来触发父组件的方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div @click=&quot;chFunc&quot;&gt;---hello组件---&lt;/div&gt;</span><br><span class="line">  &lt;div @click=&quot;fuFunc(111)&quot;&gt;&#123;&#123; fuData &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; viewData &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">// 使用defineProps接收父组件传递的数据和方法</span><br><span class="line">import &#123; defineProps &#125; from &quot;vue&quot;;</span><br><span class="line">interface Props &#123;</span><br><span class="line">  fuData?: String;</span><br><span class="line">  fuFunc?: Function | any;</span><br><span class="line">&#125;</span><br><span class="line">defineProps&lt;Props&gt;();</span><br><span class="line"></span><br><span class="line">// 使用defineEmits定义子组件触发的事件</span><br><span class="line">import &#123; defineEmits &#125; from &quot;vue&quot;;</span><br><span class="line">const emit = defineEmits([&quot;child-event&quot;]);</span><br><span class="line">const chFunc = (data: any) =&gt; &#123;</span><br><span class="line">  emit(&quot;child-event&quot;, data);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 使用inject接收父组件通过provide注入的数据</span><br><span class="line">import &#123; inject, Ref, ref &#125; from &quot;vue&quot;;</span><br><span class="line">const viewData = inject&lt;Ref&lt;number&gt;&gt;(&quot;view&quot;, ref(0));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="跨层级组件通信"><a href="#跨层级组件通信" class="headerlink" title="跨层级组件通信"></a>跨层级组件通信</h2><h3 id="使用provide-inject"><a href="#使用provide-inject" class="headerlink" title="使用provide&#x2F;inject"></a>使用provide&#x2F;inject</h3><p>在Vue 3中，我们可以使用<code>provide</code>和<code>inject</code>来实现跨层级组件的通信。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;@@@页面@@@&lt;/div&gt;</span><br><span class="line">    &lt;main-layout :view-fun=&quot;viewFun&quot;&gt;&lt;/main-layout&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import MainLayout from &quot;@/components/MainLayout.vue&quot;;</span><br><span class="line"></span><br><span class="line">// 在父组件中provide数据</span><br><span class="line">import &#123; provide &#125; from &quot;vue&quot;;</span><br><span class="line">provide(&quot;view&quot;, &quot;provide注入数据&quot;);</span><br><span class="line"></span><br><span class="line">// 在子组件中inject数据</span><br><span class="line">const viewFun = () =&gt; &#123;</span><br><span class="line">  console.log(&quot;页面加载&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue工程使用vuex</title>
    <url>/blog/2024/02/09/Vue%E5%B7%A5%E7%A8%8B%E4%BD%BF%E7%94%A8vuex/</url>
    <content><![CDATA[<h1 id="Vue工程使用vuex"><a href="#Vue工程使用vuex" class="headerlink" title="Vue工程使用vuex"></a>Vue工程使用vuex</h1><h2 id="1-vuex简介"><a href="#1-vuex简介" class="headerlink" title="1.vuex简介"></a>1.vuex简介</h2><ol>
<li>Vuex 可以帮助我们管理共享状态，并附带了更多的概念和框架。这需要对短期和长期效益进行权衡。<br>如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。确实是如此——如果您的应用够简单，您最好不要使用 Vuex。一个简单的 store 模式就足够您所需了。但是，如果您需要构建一个中大型单页应用，您很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择。引用 Redux 的作者 Dan Abramov 的话说就是：</li>
</ol>
<h2 id="2-下载vuex"><a href="#2-下载vuex" class="headerlink" title="2.下载vuex"></a>2.下载vuex</h2><p>2. </p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">npm install vuex@next --save</span><br><span class="line">yarn add vuex@next --save</span><br></pre></td></tr></table></figure>

<h2 id="3-新建vuex配置文件"><a href="#3-新建vuex配置文件" class="headerlink" title="3.新建vuex配置文件"></a>3.新建vuex配置文件</h2><ol start="3">
<li>在src目录下新建目录命名为store，在store目录下新建index.js文件，写入如下配置。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> $store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">   <span class="comment">//state可以看作是全局公共的数据，需要的组件可以调用</span></span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">    <span class="comment">//mutations可以看作是调用state的事件，在组件中可以通过commit方法调用和响应</span></span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="title function_">increment</span>(<span class="params">state, payload</span>) &#123;</span><br><span class="line">            state.<span class="property">count</span> = state.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;payload:&#x27;</span> + payload)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">modules</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> $store;</span><br></pre></td></tr></table></figure>

<h2 id="4-导入配置文件"><a href="#4-导入配置文件" class="headerlink" title="4.导入配置文件"></a>4.导入配置文件</h2><ol start="4">
<li>在main.js中导入刚刚写好的文件</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> $store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span>;</span><br><span class="line">app.<span class="title function_">use</span>($store);</span><br></pre></td></tr></table></figure>

<h2 id="5-用例"><a href="#5-用例" class="headerlink" title="5.用例"></a>5.用例</h2><p>5.在需要使用的组件同样写入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> $store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>就可以开始使用了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue接入百度地图</title>
    <url>/blog/2024/02/09/Vue%E6%8E%A5%E5%85%A5%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE/</url>
    <content><![CDATA[<h2 id="vue3接入百度地图的基本步骤及代码实现"><a href="#vue3接入百度地图的基本步骤及代码实现" class="headerlink" title="vue3接入百度地图的基本步骤及代码实现:"></a>vue3接入百度地图的基本步骤及代码实现:</h2><p>以下是使用vue3接入百度地图的基本步骤及代码实现：</p>
<ol>
<li>引入百度地图API</li>
</ol>
<p>在页面头部引入百度地图API</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://api.map.baidu.com/api?v=3.0&amp;ak=您的密钥&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中，<code>ak</code> 是您的百度地图 API 密钥。如果您还没有密钥，可以在 <a href="https://lbsyun.baidu.com/index.php?title=jspopular3.0/guide/getkey">这里</a> 进行申请。</p>
<ol start="2">
<li>在 vue3 组件中创建地图</li>
</ol>
<p>在 <code>mounted</code> 钩子函数中创建地图实例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Map</span>(<span class="string">&quot;map-container&quot;</span>);  </span><br><span class="line">    <span class="comment">//开始初始地图 </span></span><br><span class="line">    map.<span class="title function_">centerAndZoom</span>(<span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Point</span>(<span class="number">116.404</span>, <span class="number">39.915</span>), <span class="number">11</span>);</span><br><span class="line">    <span class="comment">// 开启鼠标滚轮缩放</span></span><br><span class="line">    map.<span class="title function_">enableScrollWheelZoom</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，<code>map-container</code> 是在页面中预设的地图容器。</p>
<ol start="3">
<li>添加标注</li>
</ol>
<p>在地图中添加标注，示例代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建标注</span></span><br><span class="line"><span class="keyword">const</span> marker = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Marker</span>(<span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Point</span>(<span class="number">116.404</span>, <span class="number">39.915</span>));</span><br><span class="line"><span class="comment">// 添加标注到地图</span></span><br><span class="line">map.<span class="title function_">addOverlay</span>(marker);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>获取当前位置</li>
</ol>
<p>获取当前位置并在地图中进行显示</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定位当前位置</span></span><br><span class="line"><span class="keyword">var</span> geolocation = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Geolocation</span>();</span><br><span class="line">geolocation.<span class="title function_">getCurrentPosition</span>(<span class="keyword">function</span>(<span class="params">r</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">getStatus</span>() == <span class="variable constant_">BMAP_STATUS_SUCCESS</span>)&#123;</span><br><span class="line">        <span class="comment">// 显示当前位置</span></span><br><span class="line">        map.<span class="title function_">panTo</span>(r.<span class="property">point</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;failed&#x27;</span>+<span class="variable language_">this</span>.<span class="title function_">getStatus</span>());</span><br><span class="line">    &#125;        </span><br><span class="line">&#125;,&#123;<span class="attr">enableHighAccuracy</span>: <span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>至此，您就可以在您的 vue3 项目中集成百度地图了。</p>
<p>完整代码示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-card</span> <span class="attr">style</span>=<span class="string">&quot;height: calc(100vh - 80px);&quot;</span> <span class="attr">shadow</span>=<span class="string">&quot;hover&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map-container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%; height: 640px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//开始初始地图</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// eslint-disable-next-line no-undef</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Map</span>(<span class="string">&quot;map-container&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置中心点和缩放级别</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// eslint-disable-next-line no-undef</span></span></span><br><span class="line"><span class="language-javascript">    map.<span class="title function_">centerAndZoom</span>(<span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Point</span>(<span class="number">116.404</span>, <span class="number">39.915</span>), <span class="number">11</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 添加控件，如缩放控件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// eslint-disable-next-line no-undef</span></span></span><br><span class="line"><span class="language-javascript">    map.<span class="title function_">addControl</span>(<span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">NavigationControl</span>());</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 开启鼠标滚轮缩放</span></span></span><br><span class="line"><span class="language-javascript">    map.<span class="title function_">enableScrollWheelZoom</span>(<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定位当前位置</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// eslint-disable-next-line no-undef</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> geolocation = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Geolocation</span>();</span></span><br><span class="line"><span class="language-javascript">    geolocation.<span class="title function_">getCurrentPosition</span>(<span class="keyword">function</span> (<span class="params">r</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">getStatus</span>() == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// eslint-disable-next-line no-undef</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> point = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Point</span>(r.<span class="property">point</span>.<span class="property">lng</span>, r.<span class="property">point</span>.<span class="property">lat</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// eslint-disable-next-line no-undef</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> marker = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Marker</span>(point);</span></span><br><span class="line"><span class="language-javascript">        map.<span class="title function_">addOverlay</span>(marker);</span></span><br><span class="line"><span class="language-javascript">        map.<span class="title function_">panTo</span>(point); <span class="comment">// 显示当前位置</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue跳转页面传递参数</title>
    <url>/blog/2024/03/05/Vue%E8%B7%B3%E8%BD%AC%E9%A1%B5%E9%9D%A2%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h1 id="Vue跳转页面传递参数"><a href="#Vue跳转页面传递参数" class="headerlink" title="Vue跳转页面传递参数"></a>Vue跳转页面传递参数</h1><blockquote>
<p>[!NOTE]</p>
<p>需求：从搜索页跳到详情页，传递搜索参数到详情页，详情页调用API说去数据，渲染到页面。</p>
</blockquote>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;layout&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../LayoutView.vue&quot;</span>),</span><br><span class="line">      <span class="attr">redirect</span>: <span class="string">&quot;/recommend&quot;</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&quot;/recommend&quot;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;recommend&quot;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/RecommendView.vue&quot;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&quot;/detail&quot;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;detail&quot;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/DetailView.vue&quot;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>



<h2 id="页面一"><a href="#页面一" class="headerlink" title="页面一"></a>页面一</h2><h3 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> search = <span class="title function_">ref</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">import</span> &#123;useRouter, useRoute&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleSearch</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = search.<span class="property">value</span>;</span><br><span class="line">  router.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/detail&quot;</span>,</span><br><span class="line">    <span class="attr">query</span>: &#123;data&#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="页面二"><a href="#页面二" class="headerlink" title="页面二"></a>页面二</h2><h3 id="主要代码-1"><a href="#主要代码-1" class="headerlink" title="主要代码"></a>主要代码</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;onMounted&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;useRouter, useRoute&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">&quot;@/api&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>()</span><br><span class="line"><span class="keyword">const</span> search = route.<span class="property">query</span>.<span class="property">data</span>;</span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> searchVal = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(search);</span><br><span class="line">  api.<span class="property">home</span>.<span class="title function_">search</span>(searchVal).<span class="title function_">then</span>(<span class="function">(<span class="params">rs: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(rs.<span class="property">data</span>.<span class="property">result</span>.<span class="property">songs</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue项目实战：基于用户身份的动态路由管理</title>
    <url>/blog/2024/04/15/Vue%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E5%9F%BA%E4%BA%8E%E7%94%A8%E6%88%B7%E8%BA%AB%E4%BB%BD%E7%9A%84%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="Vue项目实战：基于用户身份的动态路由管理"><a href="#Vue项目实战：基于用户身份的动态路由管理" class="headerlink" title="Vue项目实战：基于用户身份的动态路由管理"></a>Vue项目实战：基于用户身份的动态路由管理</h1><p>在现代Web应用中，根据不同用户的身份展示不同的路由和页面是一项常见的需求。Vue.js结合vue-router提供了强大的路由管理能力，允许我们根据后端接口的返回数据动态地添加和控制路由。本文将介绍如何在Vue项目中实现基于用户身份的动态路由管理，以及如何利用Vue的module模块来加载这些路由。</p>
<h2 id="动态路由的基本概念"><a href="#动态路由的基本概念" class="headerlink" title="动态路由的基本概念"></a>动态路由的基本概念</h2><p>动态路由不仅指路径参数会变化的路由，还可以根据应用程序的运行时状态来动态添加或修改。在Vue中，这通常是通过vue-router的<code>addRoute</code>方法来实现的。</p>
<h2 id="实现基于用户身份的动态路由"><a href="#实现基于用户身份的动态路由" class="headerlink" title="实现基于用户身份的动态路由"></a>实现基于用户身份的动态路由</h2><h3 id="1-配置基础路由"><a href="#1-配置基础路由" class="headerlink" title="1. 配置基础路由"></a>1. 配置基础路由</h3><p>首先，在<code>router.js</code>或<code>router/index.js</code>文件中配置基础路由，这些路由是所有用户都能访问的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Login.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Dashboard</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Dashboard.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Login</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/dashboard&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Dashboard</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">requiresAuth</span>: <span class="literal">true</span> &#125; <span class="comment">// 标记需要身份验证的路由</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-用户身份验证模块"><a href="#2-用户身份验证模块" class="headerlink" title="2. 用户身份验证模块"></a>2. 用户身份验证模块</h3><p>在Vue的module模块中处理用户身份验证逻辑。这通常涉及到与后端接口的交互，获取用户的登录状态和可访问的路由信息。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store/auth.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">const</span> modules = <span class="keyword">import</span>.<span class="property">meta</span>.<span class="title function_">glob</span>(<span class="string">&quot;../views/**/**.vue&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useAuthStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;auth&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">isAuthenticated</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">routes</span>: []</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params">&#123; userId, routes &#125;</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isAuthenticated</span> = <span class="literal">true</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">routes</span> = routes;</span><br><span class="line">      <span class="comment">// 动态添加路由</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">addRoutes</span>(routes);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">logout</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isAuthenticated</span> = <span class="literal">false</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">routes</span> = [];</span><br><span class="line">      <span class="comment">// 清除动态添加的路由</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">removeRoutes</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">addRoutes</span>(<span class="params">newRoutes</span>) &#123;</span><br><span class="line">      newRoutes.<span class="title function_">forEach</span>(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">        router.<span class="title function_">addRoute</span>(<span class="variable language_">this</span>.<span class="title function_">createRoute</span>(route));</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">removeRoutes</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">routes</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> routeRecord = router.<span class="title function_">getRoute</span>(route.<span class="property">name</span>);</span><br><span class="line">        <span class="keyword">if</span> (routeRecord) &#123;</span><br><span class="line">          router.<span class="title function_">removeRoute</span>(routeRecord);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">createRoute</span>(<span class="params">config</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">path</span>: config.<span class="property">path</span>,</span><br><span class="line">        <span class="attr">component</span>: modules[<span class="string">`../components/<span class="subst">$&#123;config.component&#125;</span>.vue`</span>],</span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">requiresAuth</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-导航守卫"><a href="#3-导航守卫" class="headerlink" title="3. 导航守卫"></a>3. 导航守卫</h3><p>使用vue-router的导航守卫来检查用户是否有权限访问某个路由。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">matched</span>.<span class="title function_">some</span>(<span class="function"><span class="params">record</span> =&gt;</span> record.<span class="property">meta</span>.<span class="property">requiresAuth</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">useAuthStore</span>().<span class="property">isAuthenticated</span>) &#123;</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="4-登录组件逻辑"><a href="#4-登录组件逻辑" class="headerlink" title="4. 登录组件逻辑"></a>4. 登录组件逻辑</h3><p>在登录组件中调用身份验证模块的<code>login</code>方法，传入用户信息和可访问的路由。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// components/Login.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 登录表单 --&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; useAuthStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../store/auth&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">async</span> <span class="title function_">onLogin</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 假设这是从后端接口获取的用户信息和路由</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> userInfo = &#123; <span class="attr">userId</span>: <span class="string">&#x27;123&#x27;</span>, <span class="attr">routes</span>: [&#123; <span class="attr">path</span>: <span class="string">&#x27;/dashboard&#x27;</span>, <span class="attr">component</span>: <span class="string">&#x27;Dashboard&#x27;</span> &#125;]&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> authStore = <span class="title function_">useAuthStore</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">await</span> authStore.<span class="title function_">login</span>(userInfo.<span class="property">userId</span>, userInfo.<span class="property">routes</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过上述步骤，我们可以实现一个基于用户身份的动态路由管理系统。这种系统可以根据用户的登录状态和权限动态地添加和移除路由，确保用户只能访问他们被授权的页面。使用Vue的module模块和vue-router的<code>addRoute</code>方法，我们可以灵活地管理应用程序的路由结构，同时保持代码的清晰和可维护性。这种方法在构建企业级应用时尤其有用，因为它可以帮助我们实现复杂的权限控制和路由管理。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue项目中使用ECharts构建交互式中国地图的详细指南</title>
    <url>/blog/2024/03/16/Vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8ECharts%E6%9E%84%E5%BB%BA%E4%BA%A4%E4%BA%92%E5%BC%8F%E4%B8%AD%E5%9B%BD%E5%9C%B0%E5%9B%BE%E7%9A%84%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="Vue项目中使用ECharts构建交互式中国地图的详细指南"><a href="#Vue项目中使用ECharts构建交互式中国地图的详细指南" class="headerlink" title="Vue项目中使用ECharts构建交互式中国地图的详细指南"></a>Vue项目中使用ECharts构建交互式中国地图的详细指南</h1><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://img-blog.csdnimg.cn/direct/c8c36080c4894e7881ad07adc4471913.png#pic_center" alt="在这里插入图片描述"></p>
<p>在Vue项目中使用ECharts创建中国地图，你需要遵循以下步骤：</p>
<h3 id="步骤-1-安装-ECharts-和-ECharts-相关插件"><a href="#步骤-1-安装-ECharts-和-ECharts-相关插件" class="headerlink" title="步骤 1: 安装 ECharts 和 ECharts 相关插件"></a>步骤 1: 安装 ECharts 和 ECharts 相关插件</h3><p>首先，确保你的项目中已经安装了ECharts。如果没有，可以使用npm或yarn来安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install echarts --save</span><br></pre></td></tr></table></figure>

<h3 id="步骤-2-安装中国地图数据"><a href="#步骤-2-安装中国地图数据" class="headerlink" title="步骤 2: 安装中国地图数据"></a>步骤 2: 安装中国地图数据</h3><p>地图数据获取网站：<a href="http://datav.aliyun.com/portal/school/atlas/area_selector#&lat=30.37018632615852&lng=106.68898666525287&zoom=3.5">阿里云数据可视化平台</a></p>
<p>ECharts 使用 JSON 格式的地理数据来渲染地图。你可以在上面这个网站下载中国省级行政区划的 JSON 文件。放入工程的静态文件目录下方。</p>
<h3 id="步骤-3-在-Vue-组件中引入-ECharts-和-地图数据"><a href="#步骤-3-在-Vue-组件中引入-ECharts-和-地图数据" class="headerlink" title="步骤 3: 在 Vue 组件中引入 ECharts 和 地图数据"></a>步骤 3: 在 Vue 组件中引入 ECharts 和 地图数据</h3><p>在你的Vue组件中，引入ECharts和中国地图数据：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&quot;echarts&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> china <span class="keyword">from</span> <span class="string">&quot;@/assets/china.json&quot;</span>; <span class="comment">// 引入中国地图数据</span></span><br></pre></td></tr></table></figure>

<h3 id="步骤-4-创建地图实例并配置"><a href="#步骤-4-创建地图实例并配置" class="headerlink" title="步骤 4: 创建地图实例并配置"></a>步骤 4: 创建地图实例并配置</h3><p>在你的Vue组件的<code>mounted</code>生命周期钩子中，创建ECharts实例并配置地图选项：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, onMounted, getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&quot;echarts&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> china <span class="keyword">from</span> <span class="string">&quot;@/assets/china.json&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">mapData</span>: any = china;</span><br><span class="line"><span class="keyword">const</span> points = <span class="title function_">ref</span>([</span><br><span class="line">  <span class="comment">// 散点图数据</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;广东&quot;</span>,</span><br><span class="line">    <span class="attr">value</span>: [<span class="number">113.266887</span>, <span class="number">23.133306</span>],</span><br><span class="line">    <span class="attr">itemStyle</span>: &#123; <span class="attr">color</span>: <span class="string">&quot;#00EEFF&quot;</span> &#125;,</span><br><span class="line">  &#125;, <span class="comment">// 广东</span></span><br><span class="line">]);</span><br><span class="line"><span class="keyword">const</span> linesData = <span class="title function_">ref</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">coords</span>: [</span><br><span class="line">      [<span class="number">116.407387</span>, <span class="number">39.904179</span>],</span><br><span class="line">      [<span class="number">113.266887</span>, <span class="number">23.133306</span>],</span><br><span class="line">    ],</span><br><span class="line">  &#125;, <span class="comment">// 北京-&gt;广东</span></span><br><span class="line">]);</span><br><span class="line"><span class="keyword">const</span> planePath = <span class="comment">// 飞机svg</span></span><br><span class="line">  <span class="string">&quot;path://M1705.06,1318.313v-89.254l-319.9-221.799l0.073-208.063c0.521-84.662-26.629-121.796-63.961-121.491c-37.332-0.305-64.482,36.829-63.961,121.491l0.073,208.063l-319.9,221.799v89.254l330.343-157.288l12.238,241.308l-134.449,92.931l0.531,42.034l175.125-42.917l175.125,42.917l0.531-42.034l-134.449-92.931l12.238-241.308L1705.06,1318.313z&quot;</span>;</span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// getCurrentInstance().refs.charts 获取charts节点对象</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Instance</span>: any = <span class="title function_">getCurrentInstance</span>();</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">refCharts</span>: any = <span class="title class_">Instance</span>.<span class="property">refs</span>.<span class="property">charts</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">charts</span>: any = echarts.<span class="title function_">init</span>(refCharts);</span><br><span class="line">  <span class="title function_">initCharts</span>(charts);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initCharts</span>(<span class="params">charts: any</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> option = &#123;</span><br><span class="line">    <span class="attr">backgroundColor</span>: <span class="string">&quot;#0E2152&quot;</span>, <span class="comment">// 背景颜色</span></span><br><span class="line">    <span class="attr">geo</span>: &#123;</span><br><span class="line">      <span class="comment">// 地图配置</span></span><br><span class="line">      <span class="attr">map</span>: <span class="string">&quot;china&quot;</span>,</span><br><span class="line">      <span class="attr">label</span>: &#123;</span><br><span class="line">        <span class="comment">// 图形上的文本标签</span></span><br><span class="line">        <span class="attr">normal</span>: &#123;</span><br><span class="line">          <span class="comment">// 通常状态下的样式</span></span><br><span class="line">          <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">textStyle</span>: &#123;</span><br><span class="line">            <span class="attr">color</span>: <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">emphasis</span>: &#123;</span><br><span class="line">          <span class="comment">// 鼠标放上去高亮的样式</span></span><br><span class="line">          <span class="attr">textStyle</span>: &#123;</span><br><span class="line">            <span class="attr">color</span>: <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">        <span class="comment">// 地图区域的样式设置</span></span><br><span class="line">        <span class="attr">normal</span>: &#123;</span><br><span class="line">          <span class="comment">// 通常状态下的样式</span></span><br><span class="line">          <span class="attr">borderColor</span>: <span class="string">&quot;#5089EC&quot;</span>,</span><br><span class="line">          <span class="attr">borderWidth</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">areaColor</span>: &#123;</span><br><span class="line">            <span class="comment">//地图区域的颜色</span></span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;radial&quot;</span>, <span class="comment">// 径向渐变</span></span><br><span class="line">            <span class="attr">x</span>: <span class="number">0.5</span>, <span class="comment">// 圆心</span></span><br><span class="line">            <span class="attr">y</span>: <span class="number">0.5</span>, <span class="comment">// 圆心</span></span><br><span class="line">            <span class="attr">r</span>: <span class="number">0.8</span>, <span class="comment">// 半径</span></span><br><span class="line">            <span class="attr">colorStops</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="comment">// 0% 处的颜色</span></span><br><span class="line">                <span class="attr">offset</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">color</span>: <span class="string">&quot;rgba(0, 102, 154, 0)&quot;</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="comment">// 100% 处的颜色</span></span><br><span class="line">                <span class="attr">offset</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">color</span>: <span class="string">&quot;rgba(0, 102, 154, .4)&quot;</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">            ],</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 鼠标放上去高亮的样式</span></span><br><span class="line">        <span class="attr">emphasis</span>: &#123;</span><br><span class="line">          <span class="attr">areaColor</span>: <span class="string">&quot;#2386AD&quot;</span>,</span><br><span class="line">          <span class="attr">borderWidth</span>: <span class="number">0</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 散点系列数据</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;effectScatter&quot;</span>, <span class="comment">// 带有涟漪特效动画的散点（气泡）图</span></span><br><span class="line">        <span class="attr">coordinateSystem</span>: <span class="string">&quot;geo&quot;</span>, <span class="comment">//该系列使用的坐标系:地理坐标系</span></span><br><span class="line">        <span class="comment">// 特效类型,目前只支持涟漪特效&#x27;ripple&#x27;，意为“涟漪”</span></span><br><span class="line">        <span class="attr">effectType</span>: <span class="string">&quot;ripple&quot;</span>,</span><br><span class="line">        <span class="comment">// 配置何时显示特效。可选&#x27;render&#x27;和&#x27;emphasis&#x27; 。</span></span><br><span class="line">        <span class="attr">showEffectOn</span>: <span class="string">&quot;render&quot;</span>,</span><br><span class="line">        <span class="attr">rippleEffect</span>: &#123;</span><br><span class="line">          <span class="comment">// 涟漪特效相关配置。</span></span><br><span class="line">          <span class="attr">period</span>: <span class="number">10</span>, <span class="comment">// 动画的周期，秒数。</span></span><br><span class="line">          <span class="attr">scale</span>: <span class="number">4</span>, <span class="comment">// 动画中波纹的最大缩放比例。</span></span><br><span class="line">          <span class="comment">// 波纹的绘制方式，可选 &#x27;stroke&#x27; 和 &#x27;fill&#x27;。</span></span><br><span class="line">          <span class="attr">brushType</span>: <span class="string">&quot;fill&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">zlevel</span>: <span class="number">1</span>, <span class="comment">// 所有图形的 zlevel 值。</span></span><br><span class="line">        <span class="attr">data</span>: points.<span class="property">value</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 线条系列数据</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;lines&quot;</span>,</span><br><span class="line">        <span class="attr">zlevel</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">symbol</span>: [<span class="string">&quot;none&quot;</span>, <span class="string">&quot;arrow&quot;</span>], <span class="comment">// 标记的图形: 箭头</span></span><br><span class="line">        <span class="attr">symbolSize</span>: <span class="number">10</span>, <span class="comment">// 标记的大小</span></span><br><span class="line">        <span class="attr">effect</span>: &#123;</span><br><span class="line">          <span class="comment">// 线条特效的配置</span></span><br><span class="line">          <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">period</span>: <span class="number">6</span>, <span class="comment">// 特效动画的时间，单位s</span></span><br><span class="line">          <span class="attr">trailLength</span>: <span class="number">0</span>, <span class="comment">// 特效尾迹的长度。取值[0,1]值越大，尾迹越重</span></span><br><span class="line">          <span class="attr">symbol</span>: planePath, <span class="comment">// 特效图形的标记 可选&#x27;circle&#x27;等</span></span><br><span class="line">          <span class="attr">symbolSize</span>: <span class="number">15</span>, <span class="comment">// 特效标记的大小</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">          <span class="comment">// 线条样式</span></span><br><span class="line">          <span class="attr">normal</span>: &#123;</span><br><span class="line">            <span class="attr">color</span>: <span class="string">&quot;#93EBF8&quot;</span>,</span><br><span class="line">            <span class="attr">width</span>: <span class="number">2.5</span>, <span class="comment">// 线条宽度</span></span><br><span class="line">            <span class="attr">opacity</span>: <span class="number">0.6</span>, <span class="comment">// 尾迹线条透明度</span></span><br><span class="line">            <span class="attr">curveness</span>: <span class="number">0.2</span>, <span class="comment">// 尾迹线条曲直度</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">data</span>: linesData.<span class="property">value</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 地图注册，第一个参数的名字必须和option.geo.map一致</span></span><br><span class="line">  echarts.<span class="title function_">registerMap</span>(<span class="string">&quot;china&quot;</span>, <span class="comment">/**/</span> mapData);</span><br><span class="line">  charts.<span class="title function_">setOption</span>(option);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="步骤-5-在模板中添加地图容器"><a href="#步骤-5-在模板中添加地图容器" class="headerlink" title="步骤 5: 在模板中添加地图容器"></a>步骤 5: 在模板中添加地图容器</h3><p>在你的Vue组件的模板中，添加一个容器来承载地图：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">      <span class="attr">ref</span>=<span class="string">&quot;charts&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">&quot;width: 1200px; height: 100vh; margin: 0 auto&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="步骤-6-调整和优化"><a href="#步骤-6-调整和优化" class="headerlink" title="步骤 6: 调整和优化"></a>步骤 6: 调整和优化</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#0e2152</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据你的实际需求，你可以调整地图的样式、颜色、数据等。你还可以为地图添加交互，如点击事件、提示框等。</p>
<h3 id="立体效果"><a href="#立体效果" class="headerlink" title="立体效果"></a>立体效果</h3><p><img src="https://img-blog.csdnimg.cn/direct/419588282ea349108847f1fd980490ea.png#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;chart-container&quot;&gt;</span><br><span class="line">      &lt;div ref=&quot;upperChartContainer&quot; class=&quot;upper-chart&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div ref=&quot;lowerChartContainer&quot; class=&quot;lower-chart&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, onMounted, onBeforeUnmount &#125; from &quot;vue&quot;;</span><br><span class="line">import * as echarts from &quot;echarts&quot;;</span><br><span class="line">import jiangxi from &quot;@/assets/jiangxi.json&quot;;</span><br><span class="line">const mapData: any = jiangxi;</span><br><span class="line">const upperChartContainer = ref&lt;HTMLElement | null&gt;(null);</span><br><span class="line">const lowerChartContainer = ref&lt;HTMLElement | null&gt;(null);</span><br><span class="line">let upperChart: echarts.ECharts | null = null;</span><br><span class="line">let lowerChart: echarts.ECharts | null = null;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  upperChart = echarts.init(upperChartContainer.value!);</span><br><span class="line">  lowerChart = echarts.init(lowerChartContainer.value!);</span><br><span class="line">  initUpperChart();</span><br><span class="line">  initLowerChart();</span><br><span class="line">  addClickEventListener();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">onBeforeUnmount(() =&gt; &#123;</span><br><span class="line">  if (upperChart) &#123;</span><br><span class="line">    upperChart.dispose();</span><br><span class="line">    upperChart = null;</span><br><span class="line">  &#125;</span><br><span class="line">  if (lowerChart) &#123;</span><br><span class="line">    lowerChart.dispose();</span><br><span class="line">    lowerChart = null;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function initUpperChart() &#123;</span><br><span class="line">  echarts.registerMap(&quot;jiangxi&quot;, mapData);</span><br><span class="line"></span><br><span class="line">  const option: echarts.EChartsOption = &#123;</span><br><span class="line">    backgroundColor: &quot;transparent&quot;,</span><br><span class="line">    series: [</span><br><span class="line">      &#123;</span><br><span class="line">        type: &quot;map&quot;,</span><br><span class="line">        map: &quot;jiangxi&quot;,</span><br><span class="line">        roam: false,</span><br><span class="line">        emphasis: &#123;</span><br><span class="line">          label: &#123;</span><br><span class="line">            show: true,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">          areaColor: &quot;#0e2152&quot;, // 上层地图颜色</span><br><span class="line">        &#125;,</span><br><span class="line">        data: [],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  if (upperChart) &#123;</span><br><span class="line">    upperChart.setOption(option);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function initLowerChart() &#123;</span><br><span class="line">  echarts.registerMap(&quot;jiangxi&quot;, mapData);</span><br><span class="line"></span><br><span class="line">  const option: echarts.EChartsOption = &#123;</span><br><span class="line">    backgroundColor: &quot;transparent&quot;,</span><br><span class="line">    title: &#123;</span><br><span class="line">      text: &quot;地图&quot;,</span><br><span class="line">      left: &quot;center&quot;,</span><br><span class="line">      textStyle: &#123;</span><br><span class="line">        color: &quot;#000&quot;,</span><br><span class="line">        fontSize: 28,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    tooltip: &#123;</span><br><span class="line">      trigger: &quot;item&quot;,</span><br><span class="line">      formatter: (params: any) =&gt; &#123;</span><br><span class="line">        // const &#123; name, center, centroid &#125; = params;</span><br><span class="line">        return `地区名称: $&#123;params.name&#125;&lt;br/&gt;ID: $&#123;params.dataIndex&#125;`;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    series: [</span><br><span class="line">      &#123;</span><br><span class="line">        type: &quot;map&quot;,</span><br><span class="line">        map: &quot;jiangxi&quot;,</span><br><span class="line">        roam: false,</span><br><span class="line">        emphasis: &#123;</span><br><span class="line">          label: &#123;</span><br><span class="line">            show: true,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">          areaColor: &quot;#fff&quot;, // 下层地图颜色</span><br><span class="line">        &#125;,</span><br><span class="line">        label: &#123;</span><br><span class="line">          show: true,</span><br><span class="line">        &#125;,</span><br><span class="line">        data: [],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  if (lowerChart) &#123;</span><br><span class="line">    lowerChart.setOption(option);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function addClickEventListener() &#123;</span><br><span class="line">  if (lowerChart) &#123;</span><br><span class="line">    lowerChart.on(&quot;click&quot;, (params: any) =&gt; &#123;</span><br><span class="line">      if (params.name) &#123;</span><br><span class="line">        console.log(&quot;点击了上层地图区域：&quot; + params.name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.chart-container &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 800px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.upper-chart &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100vh; /* 总高度为 800 像素，上下距离为 50 像素，因此上层地图高度为 750 像素 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.lower-chart &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100vh;</span><br><span class="line">  transform: translateY(-101vh) translateX(-10px);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>



<p>以上步骤展示了如何在Vue中使用ECharts创建一个基本的中国地图。你可以根据需要进一步定制地图，例如添加更多的视觉元素、交互功能或者根据实际数据动态更新地图。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Web实现井字棋游戏：JavaScript DOM基础与实例教程</title>
    <url>/blog/2024/03/25/Web%E5%AE%9E%E7%8E%B0%E4%BA%95%E5%AD%97%E6%A3%8B%E6%B8%B8%E6%88%8F%EF%BC%9AJavaScript-DOM%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%AE%9E%E4%BE%8B%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Web实现井字棋游戏：JavaScript-DOM基础与实例教程"><a href="#Web实现井字棋游戏：JavaScript-DOM基础与实例教程" class="headerlink" title="Web实现井字棋游戏：JavaScript DOM基础与实例教程"></a>Web实现井字棋游戏：JavaScript DOM基础与实例教程</h1><p>井字棋（Tic-Tac-Toe）是一款经典的两人对战游戏，适合作为学习JavaScript DOM操作的实践项目。本文将通过一个简单的实例，介绍如何使用JavaScript和DOM API来实现一个井字棋游戏，并讲解相关的JavaScript DOM基础知识。</p>
<h2 id="JavaScript-DOM基础"><a href="#JavaScript-DOM基础" class="headerlink" title="JavaScript DOM基础"></a>JavaScript DOM基础</h2><p>DOM（Document Object Model）是HTML和XML文档的编程接口。在JavaScript中，DOM提供了一种结构化的方式来表示和操作网页内容。通过DOM，我们可以获取元素、修改样式、绑定事件等。</p>
<h2 id="实例：井字棋游戏"><a href="#实例：井字棋游戏" class="headerlink" title="实例：井字棋游戏"></a>实例：井字棋游戏</h2><h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><blockquote>
<p>体验地址：</p>
<p><a href="http://8.210.131.139/Tictactoe.html">http://8.210.131.139/Tictactoe.html</a></p>
</blockquote>
<h3 id="创建HTML结构"><a href="#创建HTML结构" class="headerlink" title="创建HTML结构"></a>创建HTML结构</h3><p>首先，我们需要创建一个包含游戏板和结果显示的HTML结构。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;board&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 游戏格子 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... 其他格子 ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="编写JavaScript逻辑"><a href="#编写JavaScript逻辑" class="headerlink" title="编写JavaScript逻辑"></a>编写JavaScript逻辑</h3><h4 id="初始化游戏"><a href="#初始化游戏" class="headerlink" title="初始化游戏"></a>初始化游戏</h4><p>在JavaScript中，我们首先定义游戏板的状态、玩家当前回合以及游戏是否结束的状态。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> board = [<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> currentPlayer = <span class="string">&quot;X&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> gameEnded = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><p>为每个游戏格子绑定点击事件，以便在玩家点击时更新游戏状态。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cells = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.cell&quot;</span>);</span><br><span class="line">cells.<span class="title function_">forEach</span>(<span class="function">(<span class="params">cell, index</span>) =&gt;</span> &#123;</span><br><span class="line">  cell.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> <span class="title function_">updateGameState</span>(index));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="更新游戏状态"><a href="#更新游戏状态" class="headerlink" title="更新游戏状态"></a>更新游戏状态</h4><p>定义<code>updateGameState</code>函数来处理玩家的每一步操作，包括更新棋盘状态、检查胜利条件、切换玩家回合以及在适当的时候结束游戏。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ... 更新棋盘逻辑 ...</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">updateGameState</span>(<span class="params">cellIndex</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!gameEnded &amp;&amp; board[cellIndex] === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        board[cellIndex] = currentPlayer;</span><br><span class="line">        <span class="title function_">renderBoard</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">checkWin</span>(currentPlayer)) &#123;</span><br><span class="line">          <span class="title function_">endGame</span>(<span class="string">&quot;Player &quot;</span> + currentPlayer + <span class="string">&quot; wins!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">checkDraw</span>()) &#123;</span><br><span class="line">          <span class="title function_">endGame</span>(<span class="string">&quot;It&#x27;s a draw!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          currentPlayer = currentPlayer === <span class="string">&quot;X&quot;</span> ? <span class="string">&quot;O&quot;</span> : <span class="string">&quot;X&quot;</span>;</span><br><span class="line">          <span class="keyword">if</span> (currentPlayer === <span class="string">&quot;O&quot;</span>) &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(makeComputerMove, <span class="number">500</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="检查胜利条件和平局"><a href="#检查胜利条件和平局" class="headerlink" title="检查胜利条件和平局"></a>检查胜利条件和平局</h4><p>在每一步操作后，使用<code>checkWin</code>和<code>checkDraw</code>函数来检查是否有玩家获胜或游戏是否平局。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ... 检查胜利逻辑 ...</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">checkWin</span>(<span class="params">player</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> winningCombinations = [</span><br><span class="line">        [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">        [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>],</span><br><span class="line">        [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>],</span><br><span class="line">        [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>],</span><br><span class="line">      ];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; winningCombinations.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> [a, b, c] = winningCombinations[i];</span><br><span class="line">        <span class="keyword">if</span> (board[a] === player &amp;&amp; board[b] === player &amp;&amp; board[c] === player) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 检查平局逻辑 ...</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">checkDraw</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> board.<span class="title function_">every</span>(<span class="function">(<span class="params">cell</span>) =&gt;</span> cell !== <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="电脑AI移动"><a href="#电脑AI移动" class="headerlink" title="电脑AI移动"></a>电脑AI移动</h4><p>在玩家为”O”时，电脑AI需要进行自动移动。<code>makeComputerMove</code>函数负责实现这一逻辑。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ... 电脑AI移动逻辑 ...</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">makeComputerMove</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> emptyCells = board.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cell, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cell === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">          acc.<span class="title function_">push</span>(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> acc;</span><br><span class="line">      &#125;, []);</span><br><span class="line">      <span class="keyword">if</span> (emptyCells.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> randomIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * emptyCells.<span class="property">length</span>);</span><br><span class="line">        <span class="keyword">const</span> computerMove = emptyCells[randomIndex];</span><br><span class="line">        <span class="title function_">updateGameState</span>(computerMove);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="渲染棋盘"><a href="#渲染棋盘" class="headerlink" title="渲染棋盘"></a>渲染棋盘</h4><p>使用<code>renderBoard</code>函数将棋盘状态更新到页面上。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ... 渲染棋盘逻辑 ...</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">renderBoard</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cells.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        cells[i].<span class="property">textContent</span> = board[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="重置游戏"><a href="#重置游戏" class="headerlink" title="重置游戏"></a>重置游戏</h4><p>提供一个重置游戏的函数，以便玩家可以重新开始新游戏。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ... 重置游戏逻辑 ...</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">resetGame</span>(<span class="params"></span>) &#123;</span><br><span class="line">      board.<span class="title function_">fill</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">      currentPlayer = <span class="string">&quot;X&quot;</span>;</span><br><span class="line">      gameEnded = <span class="literal">false</span>;</span><br><span class="line">      resultElement.<span class="property">textContent</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="title function_">renderBoard</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>洛可可白😁井字棋游戏<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.board</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">gap</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.cell</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#f2f2f2</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#result</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;board&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> board = [<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> cells = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.cell&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> resultElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;result&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> currentPlayer = <span class="string">&quot;X&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> gameEnded = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">updateGameState</span>(<span class="params">cellIndex</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (!gameEnded &amp;&amp; board[cellIndex] === <span class="string">&quot;&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        board[cellIndex] = currentPlayer;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">renderBoard</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="title function_">checkWin</span>(currentPlayer)) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">endGame</span>(<span class="string">&quot;Player &quot;</span> + currentPlayer + <span class="string">&quot; wins!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">checkDraw</span>()) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">endGame</span>(<span class="string">&quot;It&#x27;s a draw!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          currentPlayer = currentPlayer === <span class="string">&quot;X&quot;</span> ? <span class="string">&quot;O&quot;</span> : <span class="string">&quot;X&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (currentPlayer === <span class="string">&quot;O&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(makeComputerMove, <span class="number">500</span>);</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">checkWin</span>(<span class="params">player</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> winningCombinations = [</span></span><br><span class="line"><span class="language-javascript">        [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span></span><br><span class="line"><span class="language-javascript">        [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span></span><br><span class="line"><span class="language-javascript">        [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span></span><br><span class="line"><span class="language-javascript">        [<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>],</span></span><br><span class="line"><span class="language-javascript">        [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>],</span></span><br><span class="line"><span class="language-javascript">        [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>],</span></span><br><span class="line"><span class="language-javascript">        [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>],</span></span><br><span class="line"><span class="language-javascript">        [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>],</span></span><br><span class="line"><span class="language-javascript">      ];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; winningCombinations.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> [a, b, c] = winningCombinations[i];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (board[a] === player &amp;&amp; board[b] === player &amp;&amp; board[c] === player) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">checkDraw</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> board.<span class="title function_">every</span>(<span class="function">(<span class="params">cell</span>) =&gt;</span> cell !== <span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">endGame</span>(<span class="params">message</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      gameEnded = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">      resultElement.<span class="property">textContent</span> = message;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">makeComputerMove</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> emptyCells = board.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cell, index</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (cell === <span class="string">&quot;&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          acc.<span class="title function_">push</span>(index);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> acc;</span></span><br><span class="line"><span class="language-javascript">      &#125;, []);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (emptyCells.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> randomIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * emptyCells.<span class="property">length</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> computerMove = emptyCells[randomIndex];</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">updateGameState</span>(computerMove);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">renderBoard</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cells.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        cells[i].<span class="property">textContent</span> = board[i];</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">resetGame</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      board.<span class="title function_">fill</span>(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      currentPlayer = <span class="string">&quot;X&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      gameEnded = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">      resultElement.<span class="property">textContent</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">renderBoard</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    cells.<span class="title function_">forEach</span>(<span class="function">(<span class="params">cell, index</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      cell.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> <span class="title function_">updateGameState</span>(index));</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">resetGame</span>();</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过上述步骤，我们实现了一个简单的井字棋游戏。这个实例展示了如何使用JavaScript DOM API来操作HTML元素，并响应用户事件。通过这个项目，你可以更好地理解DOM操作的基本概念和方法，以及如何在实际项目中应用它们。井字棋游戏是一个入门级的编程项目，适合初学者练习和提升编程技能。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Web实现名言生成器：JavaScript DOM基础与实例教程</title>
    <url>/blog/2024/03/25/Web%E5%AE%9E%E7%8E%B0%E5%90%8D%E8%A8%80%E7%94%9F%E6%88%90%E5%99%A8%EF%BC%9AJavaScript-DOM%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%AE%9E%E4%BE%8B%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Web实现名言生成器：JavaScript-DOM基础与实例教程"><a href="#Web实现名言生成器：JavaScript-DOM基础与实例教程" class="headerlink" title="Web实现名言生成器：JavaScript DOM基础与实例教程"></a>Web实现名言生成器：JavaScript DOM基础与实例教程</h1><p>名言生成器是一个简单而有趣的Web应用，它可以随机显示历史上著名人物的名言。通过这个教程，我们将学习如何使用JavaScript DOM API来实现这个功能，并介绍相关的JavaScript DOM基础知识。</p>
<h2 id="JavaScript-DOM基础"><a href="#JavaScript-DOM基础" class="headerlink" title="JavaScript DOM基础"></a>JavaScript DOM基础</h2><p>DOM（Document Object Model）是HTML文档的编程接口，它允许我们通过JavaScript访问和操作网页元素。在JavaScript中，我们可以使用DOM API来获取元素、修改内容、绑定事件等。</p>
<h2 id="实例：名言生成器"><a href="#实例：名言生成器" class="headerlink" title="实例：名言生成器"></a>实例：名言生成器</h2><h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><blockquote>
<p>体验地址：</p>
<p><a href="http://8.210.131.139/QuoteGenerator.html">http://8.210.131.139/QuoteGenerator.html</a></p>
</blockquote>
<h3 id="创建HTML结构"><a href="#创建HTML结构" class="headerlink" title="创建HTML结构"></a>创建HTML结构</h3><p>首先，我们需要创建一个包含名言显示区域和生成按钮的HTML结构。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;quote-box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>这是名言部分<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;author&quot;</span>&gt;</span>我是作者<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;new-quote&quot;</span>&gt;</span>生成名言<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;tweet-quote&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://blink.csdn.net/&quot;</span>&gt;</span>分享到 CSDN&amp;Blink<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="编写JavaScript逻辑"><a href="#编写JavaScript逻辑" class="headerlink" title="编写JavaScript逻辑"></a>编写JavaScript逻辑</h3><h4 id="初始化名言列表"><a href="#初始化名言列表" class="headerlink" title="初始化名言列表"></a>初始化名言列表</h4><p>在JavaScript中，我们首先定义一个包含名言和作者的数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> quotes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">quote</span>: <span class="string">&quot;生命不止，奋斗不息。&quot;</span>,</span><br><span class="line">        <span class="attr">author</span>: <span class="string">&quot;方志敏&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">quote</span>: <span class="string">&quot;知识就是力量。&quot;</span>,</span><br><span class="line">        <span class="attr">author</span>: <span class="string">&quot;李约瑟&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  <span class="comment">// ... 更多名言和作者列表 ...</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h4 id="获取随机名言"><a href="#获取随机名言" class="headerlink" title="获取随机名言"></a>获取随机名言</h4><p>定义<code>getRandomQuote</code>函数来从名言列表中随机获取一条名言。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getRandomQuote</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> index = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * quotes.<span class="property">length</span>);</span><br><span class="line">  <span class="keyword">return</span> quotes[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="更新名言显示"><a href="#更新名言显示" class="headerlink" title="更新名言显示"></a>更新名言显示</h4><p>定义一个事件监听器，当用户点击“生成名言”按钮时，调用<code>getRandomQuote</code>函数获取新的名言，并更新页面上的内容。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#new-quote&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> quote = <span class="title function_">getRandomQuote</span>();</span><br><span class="line">  <span class="keyword">const</span> textElement = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.text&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> authorElement = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.author&quot;</span>);</span><br><span class="line">  textElement.<span class="property">innerText</span> = quote.<span class="property">quote</span>;</span><br><span class="line">  authorElement.<span class="property">innerText</span> = <span class="string">`- <span class="subst">$&#123;quote.author&#125;</span>`</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="样式美化"><a href="#样式美化" class="headerlink" title="样式美化"></a>样式美化</h3><p>为了让名言生成器看起来更美观，我们可以添加一些CSS样式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* ... 样式代码 ... */</span></span><br><span class="line">      <span class="selector-class">.quote-box</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">30px</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.text</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">        <span class="attribute">font-style</span>: italic;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.author</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">        <span class="attribute">text-align</span>: right;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-id">#new-quote</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#4caf50</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">        <span class="attribute">border</span>: none;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">        <span class="attribute">cursor</span>: pointer;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.tweet-quote</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        <span class="attribute">text-align</span>: right;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#4caf50</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>洛可可白😁名言生成器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.quote-box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.text</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-style</span>: italic;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.author</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: right;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#new-quote</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#4caf50</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tweet-quote</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: right;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#4caf50</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;quote-box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>这是文言部分<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;author&quot;</span>&gt;</span>我是作者<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;new-quote&quot;</span>&gt;</span>生成名言<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;tweet-quote&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://blink.csdn.net/&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span>分享到 CSDN&amp;Blink&lt;/a</span><br><span class="line">      &gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> quotes = [</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">quote</span>: <span class="string">&quot;生命不止，奋斗不息。&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">author</span>: <span class="string">&quot;方志敏&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">quote</span>: <span class="string">&quot;知识就是力量。&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">author</span>: <span class="string">&quot;李约瑟&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">quote</span>: <span class="string">&quot;先苦后甜，后苦变甜；先甜后苦，后甜变苦。&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">author</span>: <span class="string">&quot;林语堂&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">quote</span>: <span class="string">&quot;成功是一份耕耘，而非一次得手。&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">author</span>: <span class="string">&quot;贾平凹&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">quote</span>: <span class="string">&quot;宝剑锋从磨砺出，梅花香自苦寒来。&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">author</span>: <span class="string">&quot;陆游&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">quote</span>: <span class="string">&quot;宝剑不磨，其锋不利；人不学习，其智不明。&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">author</span>: <span class="string">&quot;李光耀&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">quote</span>: <span class="string">&quot;一份耕耘，一份收获；一份付出，一份回报。&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">author</span>: <span class="string">&quot;王阳明&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">quote</span>: <span class="string">&quot;只要功夫深，铁杵磨成针。&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">author</span>: <span class="string">&quot;李白&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">quote</span>: <span class="string">&quot;有志者事竟成。&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">author</span>: <span class="string">&quot;龚自珍&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">quote</span>: <span class="string">&quot;天道酬勤。&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">author</span>: <span class="string">&quot;韩愈&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">quote</span>: <span class="string">&quot;千里之行始于足下。&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">author</span>: <span class="string">&quot;老子&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">quote</span>: <span class="string">&quot;路漫漫其修远兮，吾将上下而求索。&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">author</span>: <span class="string">&quot;屈原&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">quote</span>: <span class="string">&quot;读书破万卷，下笔如有神。&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">author</span>: <span class="string">&quot;李白&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">quote</span>: <span class="string">&quot;吃一堑，长一智。&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">author</span>: <span class="string">&quot;佚名&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">quote</span>: <span class="string">&quot;先天下之忧而忧，后天下之乐而乐。&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">author</span>: <span class="string">&quot;范仲淹&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">quote</span>: <span class="string">&quot;一寸光阴一寸金，寸金难买寸光阴。&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">author</span>: <span class="string">&quot;陈毅&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">quote</span>: <span class="string">&quot;不积跬步，无以至千里；不积小流，无以成江海。&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">author</span>: <span class="string">&quot;荀子&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">quote</span>: <span class="string">&quot;前事不忘，后事之师。&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">author</span>: <span class="string">&quot;司马迁&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">quote</span>: <span class="string">&quot;生命中最大的浪费是把时间浪费在了等待上。&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">author</span>: <span class="string">&quot;李开复&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    ];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">getRandomQuote</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> index = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * quotes.<span class="property">length</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> quotes[index];</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#new-quote&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> quote = <span class="title function_">getRandomQuote</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> textElement = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.text&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> authorElement = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.author&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      textElement.<span class="property">innerText</span> = quote.<span class="property">quote</span>;</span></span><br><span class="line"><span class="language-javascript">      authorElement.<span class="property">innerText</span> = <span class="string">`- <span class="subst">$&#123;quote.author&#125;</span>`</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过上述步骤，我们实现了一个简单的名言生成器。这个实例展示了如何使用JavaScript DOM API来操作HTML元素，并响应用户事件。通过这个项目，你可以更好地理解DOM操作的基本概念和方法，以及如何在实际项目中应用它们。名言生成器是一个入门级的编程项目，适合初学者练习和提升编程技能。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Web实现猜数字游戏：JavaScript DOM基础与实例教程</title>
    <url>/blog/2024/03/26/Web%E5%AE%9E%E7%8E%B0%E7%8C%9C%E6%95%B0%E5%AD%97%E6%B8%B8%E6%88%8F%EF%BC%9AJavaScript-DOM%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%AE%9E%E4%BE%8B%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Web实现猜数字游戏：JavaScript-DOM基础与实例教程"><a href="#Web实现猜数字游戏：JavaScript-DOM基础与实例教程" class="headerlink" title="Web实现猜数字游戏：JavaScript DOM基础与实例教程"></a>Web实现猜数字游戏：JavaScript DOM基础与实例教程</h1><p>猜数字游戏是一个简单而经典的游戏，玩家需要猜测由系统随机生成的一个数字。在本教程中，我们将学习如何使用JavaScript和DOM来实现这个网页版的猜数字游戏，并介绍相关的JavaScript DOM基础知识。</p>
<h2 id="JavaScript-DOM基础"><a href="#JavaScript-DOM基础" class="headerlink" title="JavaScript DOM基础"></a>JavaScript DOM基础</h2><p>DOM（Document Object Model）是HTML文档的编程接口，它允许我们通过JavaScript访问和操作网页的元素。在JavaScript中，我们可以使用DOM API来选取元素、更改内容、绑定事件等。</p>
<h2 id="体验地址"><a href="#体验地址" class="headerlink" title="体验地址"></a>体验地址</h2><blockquote>
<p><a href="http://8.210.131.139/GuessNumber.html">http://8.210.131.139/GuessNumber.html</a></p>
</blockquote>
<h2 id="实例：猜数字游戏"><a href="#实例：猜数字游戏" class="headerlink" title="实例：猜数字游戏"></a>实例：猜数字游戏</h2><h3 id="创建HTML结构"><a href="#创建HTML结构" class="headerlink" title="创建HTML结构"></a>创建HTML结构</h3><p>首先，我们需要创建一个包含游戏输入区域、结果显示和再玩一次按钮的HTML结构。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>猜数字游戏<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;guess&quot;</span>&gt;</span>请猜一个1~100的整数：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;guess&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;play-again&quot;</span> <span class="attr">class</span>=<span class="string">&quot;play-again&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span>再玩一次<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="美化样式"><a href="#美化样式" class="headerlink" title="美化样式"></a>美化样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">        <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">        <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.container</span> &#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">        <span class="attribute">max-width</span>: <span class="number">600px</span>;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#d1d1d1</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">30px</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-tag">h1</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">32px</span>;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.input-group</span> &#123;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-tag">label</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-tag">button</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#007bff</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">        <span class="attribute">border</span>: none;</span><br><span class="line">        <span class="attribute">cursor</span>: pointer;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#0062cc</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.result</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.message</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.play-again</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#007bff</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">        <span class="attribute">border</span>: none;</span><br><span class="line">        <span class="attribute">cursor</span>: pointer;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.play-again</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#0062cc</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>



<h3 id="编写JavaScript逻辑"><a href="#编写JavaScript逻辑" class="headerlink" title="编写JavaScript逻辑"></a>编写JavaScript逻辑</h3><h4 id="初始化游戏"><a href="#初始化游戏" class="headerlink" title="初始化游戏"></a>初始化游戏</h4><p>在JavaScript中，我们首先定义一个变量来存储随机生成的答案。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> answer = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>) + <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h4 id="获取页面元素"><a href="#获取页面元素" class="headerlink" title="获取页面元素"></a>获取页面元素</h4><p>使用<code>document.getElementById</code>和<code>document.querySelector</code>来获取页面上的元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;guess&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> submitBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;submit&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> result = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.result&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> message = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.message&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> playAgainBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;play-again&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="处理提交事件"><a href="#处理提交事件" class="headerlink" title="处理提交事件"></a>处理提交事件</h4><p>为提交按钮绑定点击事件，获取用户输入的数字，并与答案比较。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">submitBtn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> guess = <span class="built_in">parseInt</span>(input.<span class="property">value</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">isNaN</span>(guess) || guess &lt; <span class="number">1</span> || guess &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    result.<span class="property">textContent</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    message.<span class="property">textContent</span> = <span class="string">&quot;请输入1~100之间的整数！&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (guess === answer) &#123;</span><br><span class="line">      result.<span class="property">textContent</span> = <span class="string">&quot;恭喜你，猜对了！&quot;</span>;</span><br><span class="line">      message.<span class="property">textContent</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      playAgainBtn.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">      submitBtn.<span class="property">disabled</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.<span class="property">textContent</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="keyword">if</span> (guess &lt; answer) &#123;</span><br><span class="line">        message.<span class="property">textContent</span> = <span class="string">&quot;太小了，请继续猜！&quot;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        message.<span class="property">textContent</span> = <span class="string">&quot;太大了，请继续猜！&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="处理再玩一次事件"><a href="#处理再玩一次事件" class="headerlink" title="处理再玩一次事件"></a>处理再玩一次事件</h4><p>为再玩一次按钮绑定点击事件，重置游戏状态并允许用户重新开始游戏。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">playAgainBtn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  answer = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line">  input.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  result.<span class="property">textContent</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  message.<span class="property">textContent</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  playAgainBtn.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">  submitBtn.<span class="property">disabled</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>洛可可白😁猜数字<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#d1d1d1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.input-group</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">label</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#007bff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#0062cc</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.result</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.message</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.play-again</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#007bff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.play-again</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#0062cc</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>猜数字游戏<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;guess&quot;</span>&gt;</span>请猜一个1~100的整数：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;guess&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;play-again&quot;</span> <span class="attr">class</span>=<span class="string">&quot;play-again&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span></span><br><span class="line">        再玩一次</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 生成随机数（1~100之间）</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> answer = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>) + <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 获取页面元素</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;guess&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> submitBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;submit&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> result = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.result&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> message = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.message&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> playAgainBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;play-again&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 处理提交事件</span></span></span><br><span class="line"><span class="language-javascript">      submitBtn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取用户输入的数字</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> guess = <span class="built_in">parseInt</span>(input.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 验证用户输入的数字是否合法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="built_in">isNaN</span>(guess) || guess &lt; <span class="number">1</span> || guess &gt; <span class="number">100</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          result.<span class="property">textContent</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          message.<span class="property">textContent</span> = <span class="string">&quot;请输入1~100之间的整数！&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 比较用户输入的数字和答案</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (guess === answer) &#123;</span></span><br><span class="line"><span class="language-javascript">          result.<span class="property">textContent</span> = <span class="string">&quot;恭喜你，猜对了！&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          message.<span class="property">textContent</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          playAgainBtn.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          submitBtn.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (guess &lt; answer) &#123;</span></span><br><span class="line"><span class="language-javascript">          result.<span class="property">textContent</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          message.<span class="property">textContent</span> = <span class="string">&quot;太小了，请继续猜！&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          result.<span class="property">textContent</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          message.<span class="property">textContent</span> = <span class="string">&quot;太大了，请继续猜！&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 处理再玩一次事件</span></span></span><br><span class="line"><span class="language-javascript">      playAgainBtn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 重新生成随机数</span></span></span><br><span class="line"><span class="language-javascript">        answer = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>) + <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 清空输入框和提示信息</span></span></span><br><span class="line"><span class="language-javascript">        input.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        result.<span class="property">textContent</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        message.<span class="property">textContent</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 隐藏再玩一次按钮，启用提交按钮</span></span></span><br><span class="line"><span class="language-javascript">        playAgainBtn.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        submitBtn.<span class="property">disabled</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过上述步骤，我们实现了一个简单的猜数字游戏。这个实例展示了如何使用JavaScript DOM API来操作HTML元素，并响应用户事件。通过这个项目，你可以更好地理解DOM操作的基本概念和方法，以及如何在实际项目中应用它们。猜数字游戏是一个入门级的编程项目，适合初学者练习和提升编程技能。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows搭建C语言和EasyX开发环境</title>
    <url>/blog/2024/04/02/Windows%E6%90%AD%E5%BB%BAC%E8%AF%AD%E8%A8%80%E5%92%8CEasyX%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="Windows搭建C语言和EasyX开发环境"><a href="#Windows搭建C语言和EasyX开发环境" class="headerlink" title="Windows搭建C语言和EasyX开发环境"></a>Windows搭建C语言和EasyX开发环境</h1><h2 id="安装Visual-Studio-2022"><a href="#安装Visual-Studio-2022" class="headerlink" title="安装Visual Studio 2022"></a>安装Visual Studio 2022</h2><p>Visual Studio 2022是微软推出的最新集成开发环境（IDE），适用于Windows应用程序和游戏的开发。</p>
<ul>
<li><strong>官网下载地址</strong>：<ul>
<li>访问Visual Studio的官方网站 <a href="https://visualstudio.microsoft.com/zh-hans/free-developer-offers/">https://visualstudio.microsoft.com/zh-hans/free-developer-offers/</a> 并下载社区版（Community），它为个人开发者、开源项目和学术研究提供免费使用。</li>
<li>在安装过程中，确保选择了C++开发相关的工作负载和组件，以支持EasyX的开发。</li>
<li><img src="C:\Users\21096\AppData\Roaming\Typora\typora-user-images\image-20240401120506004.png" alt="image-20240401120506004"></li>
<li><img src="C:\Users\21096\AppData\Roaming\Typora\typora-user-images\image-20240401120909685.png" alt="image-20240401120909685"></li>
</ul>
</li>
</ul>
<h2 id="安装EasyX"><a href="#安装EasyX" class="headerlink" title="安装EasyX"></a>安装EasyX</h2><p>EasyX是一个开源的图形库，用于简化Windows平台下的图形编程。</p>
<ul>
<li><p><strong>官网下载地址</strong>：</p>
<ul>
<li>访问EasyX的官方网站 <a href="https://easyx.cn/">https://easyx.cn/</a> 并下载最新版本的EasyX库。</li>
<li>解压下载的文件到一个目录。</li>
<li><img src="C:\Users\21096\AppData\Roaming\Typora\typora-user-images\image-20240401120254703.png" alt="image-20240401120254703"></li>
<li><img src="C:\Users\21096\AppData\Roaming\Typora\typora-user-images\image-20240401120325475.png" alt="image-20240401120325475"></li>
</ul>
</li>
<li><p><strong>官方文档</strong>：</p>
<ul>
<li>阅读EasyX的官方文档 <a href="https://docs.easyx.cn/zh-cn/intro">https://docs.easyx.cn/zh-cn/intro</a> 以了解如何使用EasyX进行图形编程。</li>
</ul>
</li>
</ul>
<h2 id="配置EasyX（可选）"><a href="#配置EasyX（可选）" class="headerlink" title="配置EasyX（可选）"></a>配置EasyX（可选）</h2><ol>
<li>打开Visual Studio，创建一个新的C++项目。</li>
<li>右键点击项目，选择“属性”。</li>
<li>在“配置”选项卡中，设置“包含目录”（Include Directories）和“库目录”（Library Directories），指向EasyX的<code>include</code>和<code>lib</code>文件夹。</li>
<li>在“链接器”选项卡中，添加EasyX的<code>.lib</code>文件。</li>
<li><img src="C:\Users\21096\AppData\Roaming\Typora\typora-user-images\image-20240401120954398.png" alt="image-20240401120954398"></li>
</ol>
<h2 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h2><p>以下是一个使用EasyX的简单示例代码，用于创建一个窗口并在其中绘制一个矩形。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;graphics.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    initgraph(<span class="number">640</span>, <span class="number">480</span>); <span class="comment">// 初始化图形窗口大小为640x480</span></span><br><span class="line">    setbkcolor(WHITE);    <span class="comment">// 设置背景颜色为白色</span></span><br><span class="line">    cleardevice();        <span class="comment">// 清屏</span></span><br><span class="line">    setcolor(BLACK);      <span class="comment">// 设置画笔颜色为黑色</span></span><br><span class="line">    rectangle(<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>); <span class="comment">// 画一个矩形</span></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);             <span class="comment">// 等待</span></span><br><span class="line">    closegraph();         <span class="comment">// 关闭图形窗口</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>将上述代码复制到Visual Studio的C++项目中。</li>
<li>确保项目配置正确，然后编译并运行程序。</li>
<li>如果一切设置正确，你将看到一个640x480的窗口，并在窗口中显示了一个矩形。</li>
<li><img src="C:\Users\21096\AppData\Roaming\Typora\typora-user-images\image-20240401120837287.png" alt="image-20240401120837287"></li>
</ol>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过上述步骤，你应该能够在Windows系统上成功搭建EasyX开发环境。如果在安装或配置过程中遇到问题，可以参考EasyX的官方文档或在相关开发者社区寻求帮助。现在，你可以开始使用EasyX进行图形编程或游戏开发了！</p>
]]></content>
      <categories>
        <category>程序员</category>
      </categories>
      <tags>
        <tag>EasyX</tag>
      </tags>
  </entry>
  <entry>
    <title>Web实现表格单选全选与反选操作：JavaScript DOM基础与实例教程</title>
    <url>/blog/2024/03/24/Web%E5%AE%9E%E7%8E%B0%E8%A1%A8%E6%A0%BC%E5%8D%95%E9%80%89%E5%85%A8%E9%80%89%E4%B8%8E%E5%8F%8D%E9%80%89%E6%93%8D%E4%BD%9C%EF%BC%9AJavaScript-DOM%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%AE%9E%E4%BE%8B%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Web实现表格单选全选与反选操作：JavaScript-DOM基础与实例教程"><a href="#Web实现表格单选全选与反选操作：JavaScript-DOM基础与实例教程" class="headerlink" title="Web实现表格单选全选与反选操作：JavaScript DOM基础与实例教程"></a>Web实现表格单选全选与反选操作：JavaScript DOM基础与实例教程</h1><p>在Web开发中，处理表格数据时，全选与反选功能是常见的交互需求。本文将通过一个简单的实例，介绍如何使用JavaScript DOM API来实现表格中的全选与反选操作，并讲解相关的JavaScript DOM基础知识。</p>
<h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><h2 id="JavaScript-DOM基础"><a href="#JavaScript-DOM基础" class="headerlink" title="JavaScript DOM基础"></a>JavaScript DOM基础</h2><p>DOM（Document Object Model）是文档对象模型的缩写，它将HTML或XML文档视为树结构，每个节点都是文档的一部分，可以是文档本身、元素、属性或文本内容。JavaScript中的DOM API提供了大量的方法和属性，允许开发者动态地访问和更新文档的内容、结构和样式。</p>
<h2 id="实例：表格全选与反选操作"><a href="#实例：表格全选与反选操作" class="headerlink" title="实例：表格全选与反选操作"></a>实例：表格全选与反选操作</h2><h3 id="创建HTML表格结构"><a href="#创建HTML表格结构" class="headerlink" title="创建HTML表格结构"></a>创建HTML表格结构</h3><p>首先，我们需要创建一个包含商品信息的表格，并在表头添加一个全选复选框。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;j_cbAll&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>商品<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>价钱<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;j_tb&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 商品列表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用JavaScript实现全选与反选"><a href="#使用JavaScript实现全选与反选" class="headerlink" title="使用JavaScript实现全选与反选"></a>使用JavaScript实现全选与反选</h3><h4 id="单选操作"><a href="#单选操作" class="headerlink" title="单选操作"></a>单选操作</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取元素</span></span><br><span class="line"><span class="keyword">var</span> j_cbAll = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;j_cbAll&#x27;</span>); <span class="comment">// 全选按钮</span></span><br><span class="line"> <span class="keyword">var</span> j_tbs = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;j_tb&#x27;</span>).<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;input&#x27;</span>); <span class="comment">// 下面所有的复选框</span></span><br><span class="line">        <span class="comment">// 注册事件</span></span><br><span class="line">        j_cbAll.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">// this.checked 它可以得到当前复选框的选中状态如果是true 就是选中，如果是false 就是未选中</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">checked</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; j_tbs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                    j_tbs[i].<span class="property">checked</span> = <span class="variable language_">this</span>.<span class="property">checked</span>;</span><br><span class="line">                &#125;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>



<h4 id="全选操作"><a href="#全选操作" class="headerlink" title="全选操作"></a>全选操作</h4><p>全选操作的目标是当用户点击全选复选框时，所有商品的复选框都应该被选中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取全选复选框元素</span></span><br><span class="line"><span class="keyword">var</span> j_cbAll = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;j_cbAll&#x27;</span>);</span><br><span class="line"><span class="comment">// 获取所有商品复选框元素</span></span><br><span class="line"><span class="keyword">var</span> j_tbs = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;j_tb&#x27;</span>).<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为全选复选框绑定点击事件</span></span><br><span class="line">j_cbAll.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 遍历所有商品复选框，设置与全选复选框相同的选中状态</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; j_tbs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        j_tbs[i].<span class="property">checked</span> = <span class="variable language_">this</span>.<span class="property">checked</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="反选操作"><a href="#反选操作" class="headerlink" title="反选操作"></a>反选操作</h4><p>反选操作的目标是当任何一个商品复选框的状态发生变化时，检查所有复选框的状态，并据此更新全选复选框的选中状态。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为每个商品复选框绑定点击事件</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; j_tbs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    j_tbs[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 定义一个变量flag来标记是否所有复选框都被选中</span></span><br><span class="line">        <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 遍历所有商品复选框，如果发现有未选中的，设置flag为false</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; j_tbs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!j_tbs[i].<span class="property">checked</span>) &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 只要发现一个未选中的，就可以终止循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 根据flag的值更新全选复选框的选中状态</span></span><br><span class="line">        j_cbAll.<span class="property">checked</span> = flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>单选全选反选<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-spacing</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#c0c0c0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">th</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d0d0d0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#404060</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#09c</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font</span>: bold <span class="number">16px</span> <span class="string">&quot;微软雅黑&quot;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font</span>: <span class="number">14px</span> <span class="string">&quot;微软雅黑&quot;</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">tbody</span> <span class="selector-tag">tr</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f0f0f0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">tbody</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#fafafa</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;j_cbAll&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>商品<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>价钱<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;j_tb&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>iPhone8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>8000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>iPad Pro<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>5000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>iPad Air<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>2000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Apple Watch<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>2000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 全选和取消全选做法：  让下面所有复选框的checked属性（选中状态） 跟随 全选按钮即可</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> j_cbAll = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;j_cbAll&#x27;</span>); <span class="comment">// 全选按钮</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> j_tbs = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;j_tb&#x27;</span>).<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;input&#x27;</span>); <span class="comment">// 下面所有的复选框</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 注册事件</span></span></span><br><span class="line"><span class="language-javascript">        j_cbAll.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.checked 它可以得到当前复选框的选中状态如果是true 就是选中，如果是false 就是未选中</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">checked</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; j_tbs.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                    j_tbs[i].<span class="property">checked</span> = <span class="variable language_">this</span>.<span class="property">checked</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2. 下面复选框需要全部选中， 上面全选才能选中做法： 给下面所有复选框绑定点击事件，每次点击，都要循环查看下面所有的复选框是否有没选中的，如果有一个没选中的， 上面全选就不选中。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; j_tbs.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            j_tbs[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// flag 控制全选按钮是否选中</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 每次点击下面的复选框都要循环检查者4个小按钮是否全被选中</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; j_tbs.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (!j_tbs[i].<span class="property">checked</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        flag = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">break</span>; <span class="comment">// 退出for循环 这样可以提高执行效率 因为只要有一个没有选中，剩下的就无需循环判断了</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                j_cbAll.<span class="property">checked</span> = flag;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过上述代码，我们实现了表格中的全选与反选功能。这个实例展示了如何使用JavaScript DOM API来操作HTML元素，并响应用户事件。全选与反选功能是表格交互中的基础，掌握这种操作对于开发复杂的数据表格应用至关重要。希望本文能帮助你更好地理解DOM操作，并将其应用到你的Web项目中。</p>
<p><strong>如果对你有帮助，点赞👍、收藏💖、关注🔔是我更新的动力！👋🌟🚀</strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Yarn简介及Windows安装与使用指南</title>
    <url>/blog/2024/03/31/Yarn%E7%AE%80%E4%BB%8B%E5%8F%8AWindows%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="Yarn简介及Windows安装与使用指南"><a href="#Yarn简介及Windows安装与使用指南" class="headerlink" title="Yarn简介及Windows安装与使用指南"></a>Yarn简介及Windows安装与使用指南</h1><p>在现代的Web开发中，JavaScript项目的依赖管理是一个复杂而重要的任务。幸运的是，我们有多种工具可以帮助我们处理这些依赖，其中之一就是Yarn。Yarn是一个由Facebook、Google、Tilde和Exponent联合开发的跨平台包管理工具，它旨在提供更快、更可靠的依赖管理体验。本文将为你介绍Yarn的基本概念，以及如何在Windows系统上通过Node.js使用npm安装Yarn，并介绍Yarn的基本使用。</p>
<h2 id="什么是Yarn？"><a href="#什么是Yarn？" class="headerlink" title="什么是Yarn？"></a>什么是Yarn？</h2><p>Yarn是一个快速、可靠、安全的依赖管理工具，它允许开发者在不同环境中一致地管理和安装项目依赖。Yarn通过锁定依赖的确切版本来确保项目的稳定性，并提供了并行安装依赖的能力，从而大大提高了安装速度。Yarn还具有优秀的缓存机制，可以重用之前下载的包，进一步加快了依赖安装过程。</p>
<h2 id="为什么选择Yarn？"><a href="#为什么选择Yarn？" class="headerlink" title="为什么选择Yarn？"></a>为什么选择Yarn？</h2><p>选择Yarn的理由有很多，以下是一些主要的优点：</p>
<ul>
<li><strong>性能</strong>：Yarn通过并行处理和缓存机制，使得依赖安装速度更快。</li>
<li><strong>一致性</strong>：Yarn的锁定机制确保了每次安装的依赖版本完全一致，有助于避免因版本差异导致的问题。</li>
<li><strong>安全性</strong>：Yarn在安装依赖时会检查依赖的完整性，确保了项目的安全性。</li>
<li><strong>兼容性</strong>：Yarn支持多种平台，包括Windows、macOS和Linux。</li>
</ul>
<h2 id="在Windows上安装Yarn"><a href="#在Windows上安装Yarn" class="headerlink" title="在Windows上安装Yarn"></a>在Windows上安装Yarn</h2><p>在Windows系统上安装Yarn可以通过Node.js的包管理器npm来完成。以下是详细步骤：</p>
<h3 id="步骤-1：安装Node-js"><a href="#步骤-1：安装Node-js" class="headerlink" title="步骤 1：安装Node.js"></a>步骤 1：安装Node.js</h3><ol>
<li>访问Node.js的官方下载页面：<a href="https://nodejs.org/">https://nodejs.org/</a></li>
<li>下载适用于Windows的安装程序。</li>
<li>运行安装程序并按照提示完成安装。在安装过程中，确保选择了npm包管理器的安装选项。</li>
</ol>
<h3 id="步骤-2：使用npm安装Yarn"><a href="#步骤-2：使用npm安装Yarn" class="headerlink" title="步骤 2：使用npm安装Yarn"></a>步骤 2：使用npm安装Yarn</h3><p>安装Node.js后，打开命令提示符（CMD）或PowerShell，输入以下命令来全局安装Yarn：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --global yarn</span><br></pre></td></tr></table></figure>

<h3 id="步骤-3：验证安装"><a href="#步骤-3：验证安装" class="headerlink" title="步骤 3：验证安装"></a>步骤 3：验证安装</h3><p>安装完成后，输入以下命令来验证Yarn是否已成功安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn --version</span><br></pre></td></tr></table></figure>

<p>如果安装成功，命令行将显示Yarn的版本信息。</p>
<h2 id="Yarn的安装和使用"><a href="#Yarn的安装和使用" class="headerlink" title="Yarn的安装和使用"></a>Yarn的安装和使用</h2><p>安装Yarn后，你可以开始使用它来管理你的JavaScript项目了。以下是一些基本的Yarn命令：</p>
<h3 id="初始化新项目"><a href="#初始化新项目" class="headerlink" title="初始化新项目"></a>初始化新项目</h3><p>在你的项目目录中，运行以下命令来创建一个新的 <code>package.json</code> 文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn init</span><br></pre></td></tr></table></figure>

<p>这个命令会引导你通过一系列问题来设置你的项目，包括名称、版本、描述、入口点等。</p>
<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>使用 Yarn 安装一个依赖到你的项目中，运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add [package-name]</span><br></pre></td></tr></table></figure>

<p>如果你想安装一个开发依赖（只在开发环境中使用），可以使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add [package-name] --dev</span><br></pre></td></tr></table></figure>

<h3 id="升级依赖"><a href="#升级依赖" class="headerlink" title="升级依赖"></a>升级依赖</h3><p>要升级一个已安装的依赖，可以使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn upgrade [package-name]</span><br></pre></td></tr></table></figure>

<h3 id="移除依赖"><a href="#移除依赖" class="headerlink" title="移除依赖"></a>移除依赖</h3><p>要移除一个依赖，运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn remove [package-name]</span><br></pre></td></tr></table></figure>

<h3 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h3><p>Yarn 允许你通过 <code>package.json</code> 中定义的脚本来运行任务。例如，如果你想运行一个名为 <code>start</code> 的脚本，可以使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn start</span><br></pre></td></tr></table></figure>

<h3 id="检查依赖冲突"><a href="#检查依赖冲突" class="headerlink" title="检查依赖冲突"></a>检查依赖冲突</h3><p>Yarn 可以帮助你检查项目中的依赖冲突：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn dedupe</span><br></pre></td></tr></table></figure>

<p>这个命令会尝试解决依赖树中的冲突。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Yarn是一个强大的依赖管理工具，它可以帮助你更高效地管理项目的依赖。通过上述步骤，你可以轻松地在Windows系统上通过Node.js的npm安装并开始使用Yarn。随着你对Yarn的进一步了解和使用，你会发现它在提高开发效率和项目管理方面的巨大价值。不要忘记查看Yarn的<a href="https://classic.yarnpkg.com/en/docs/">官方文档</a>来获取更多高级功能和详细信息。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>上海</title>
    <url>/blog/2023/05/01/%E4%B8%8A%E6%B5%B7/</url>
    <content><![CDATA[<p><img src="/blog/image/%E4%B8%8A%E6%B5%B7/1.jpg" alt="上海"></p>
<p><img src="/blog/image/%E4%B8%8A%E6%B5%B7/2.jpg" alt="上海"></p>
<p><img src="/blog/image/%E4%B8%8A%E6%B5%B7/3.jpg" alt="上海"></p>
<p><img src="/blog/image/%E4%B8%8A%E6%B5%B7/4.jpg" alt="上海"></p>
<p><img src="/blog/image/%E4%B8%8A%E6%B5%B7/5.jpg" alt="上海"></p>
<p><img src="/blog/image/%E4%B8%8A%E6%B5%B7/6.jpg" alt="上海"></p>
<p><img src="/blog/image/%E4%B8%8A%E6%B5%B7/7.jpg" alt="上海"></p>
<p><img src="/blog/image/%E4%B8%8A%E6%B5%B7/8.jpg" alt="上海"></p>
<p><img src="/blog/image/%E4%B8%8A%E6%B5%B7/9.jpg" alt="上海"></p>
<p><img src="/blog/image/%E4%B8%8A%E6%B5%B7/10.jpg" alt="上海"></p>
<p><img src="/blog/image/%E4%B8%8A%E6%B5%B7/11.jpg" alt="上海"></p>
]]></content>
      <categories>
        <category>旅行</category>
      </categories>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>义乌</title>
    <url>/blog/2024/01/15/%E4%B9%89%E4%B9%8C/</url>
    <content><![CDATA[<p><img src="/blog/image/%E4%B9%89%E4%B9%8C/1.jpg" alt="义乌"></p>
]]></content>
      <categories>
        <category>旅行</category>
      </categories>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>入门指南：使用uni-app构建跨平台应用</title>
    <url>/blog/2024/03/06/%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97%EF%BC%9A%E4%BD%BF%E7%94%A8uni-app%E6%9E%84%E5%BB%BA%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="入门指南：使用uni-app构建跨平台应用"><a href="#入门指南：使用uni-app构建跨平台应用" class="headerlink" title="入门指南：使用uni-app构建跨平台应用"></a>入门指南：使用uni-app构建跨平台应用</h1><h2 id="🌟-前言"><a href="#🌟-前言" class="headerlink" title="🌟 前言"></a>🌟 前言</h2><blockquote>
<p>欢迎来到我的小天地，这里是我记录技术点滴、分享学习心得的地方。📚</p>
<h4 id="🛠️-技能清单"><a href="#🛠️-技能清单" class="headerlink" title="🛠️ 技能清单"></a>🛠️ 技能清单</h4><ul>
<li><strong>编程语言</strong>：Java、C、C++、Python、Go</li>
<li><strong>前端技术</strong>：Jquery、Vue.js、React、uni-app、Echarts</li>
<li><strong>UI设计</strong>: Element-ui、Antd、Color-ui</li>
<li><strong>后端技术</strong>：Spring Boot、Mybatis-plus、Swagger</li>
<li><strong>移动开发</strong>：Android</li>
<li><strong>操作系统</strong>：Windows、Linux</li>
<li><strong>开发框架</strong>：RuoYi、微信小程序</li>
<li><strong>开发工具</strong>：VSCode、IDEA、Eclipse、WebStorm、HbuildX、Navicat、Xshell、Android Studio、Postman、GoLand</li>
<li><strong>数据库技术</strong>：MySQL、Redis、SQL Server</li>
<li><strong>版本控制</strong>：Git</li>
</ul>
</blockquote>
<hr>
<p>uni-app是一个使用Vue.js开发所有前端应用的框架，可以发布到iOS、Android、Web（包括PC和移动端浏览器）、以及各种小程序（微信&#x2F;支付宝&#x2F;百度&#x2F;字节跳动&#x2F;QQ&#x2F;钉钉等）和快应用等多个平台。本教程将带你快速了解uni-app的基本使用。</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装HBuilderX"><a href="#安装HBuilderX" class="headerlink" title="安装HBuilderX"></a>安装HBuilderX</h3><p>首先，你需要下载并安装<a href="https://www.dcloud.io/hbuilderx.html">HBuilderX</a>，这是开发uni-app的官方IDE。<br><img src="https://img-blog.csdnimg.cn/direct/1b4c20cf800b47ec8b8997bd235ff4f8.png" alt="HBuildX"></p>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>打开HBuilderX，选择“文件” &gt; “新建” &gt; “项目”，然后选择uni-app模板，填写项目名称和选择项目存储位置，点击“创建”。<br><img src="https://img-blog.csdnimg.cn/direct/e6a896e1914a45a19a2cb6d28f252fce.png" alt="“文件” &gt; “新建” &gt; “项目”"><br><img src="https://img-blog.csdnimg.cn/direct/3b660ad5ce83448b96ac3cde48c08496.png" alt="创建项目"></p>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>uni-app的项目结构与传统的Vue项目类似，主要包含以下几个部分：<br><img src="https://img-blog.csdnimg.cn/direct/b18ad1bd56f94073892167d373f4210c.png" alt="项目结构"></p>
<ul>
<li><code>pages</code>：存放页面文件的目录。</li>
<li><code>static</code>：存放静态资源，如图片、样式文件等。</li>
<li><code>components</code>：存放自定义组件的目录。</li>
<li><code>main.js</code>：应用的入口文件，用于初始化Vue实例。</li>
<li><code>App.vue</code>：应用的根组件。</li>
<li><code>pages.json</code>：页面的配置文件和全局样式配置（如app头部背景色，标题）。</li>
<li><code>manifest.json</code>：应用的配置文件，用于配置应用名称、图标等信息。</li>
</ul>
<h2 id="开发页面"><a href="#开发页面" class="headerlink" title="开发页面"></a>开发页面</h2><p>在<code>pages</code>目录下创建一个新的<code>.vue</code>文件，例如<code>index.vue</code>。你可以使用Vue的语法来编写页面内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;view class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;text&gt;欢迎来到uni-app世界！&lt;/text&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      // 页面的初始数据</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 页面的方法</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">/* 页面的样式 */</span><br><span class="line">.container &#123;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/direct/403337b67d2d4b16939904e9afc17047.png" alt="开发页面"></p>
<h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><p>在HBuilderX中，选择你想要运行的平台（例如Edge浏览器），然后点击工具栏上的“运行”按钮，即可在模拟器或真机上查看效果。<br><img src="https://img-blog.csdnimg.cn/direct/9759b0d92b6e49be910e2eec42c49307.png" alt="运行项目"></p>
<h2 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h2><p>uni-app支持Vue组件化开发，你可以创建自定义组件来复用代码。在<code>components</code>目录下创建组件文件，然后在页面中引入使用。</p>
<h3 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h3><p>在<code>components</code>目录下创建一个名为<code>my-component.vue</code>的文件。<br><img src="https://img-blog.csdnimg.cn/direct/65948036ce07491c91d7ef6f279842c1.png" alt="创建组件"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;text&gt;这是一个自定义组件&lt;/text&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // 组件选项</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h3><p>在页面中引入并注册组件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;my-component&gt;&lt;/my-component&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyComponent from &#x27;@/components/my-component.vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    MyComponent</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/direct/9ef71278333a4849b824b4abb85c1355.png" alt="使用组件"></p>
<h2 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h2><p>uni-app支持条件编译，允许你根据不同的平台编写特定的代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// #ifdef H5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是H5平台特有的代码&#x27;</span>);</span><br><span class="line"><span class="comment">// #endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #ifdef MP-WEIXIN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是微信小程序平台特有的代码&#x27;</span>);</span><br><span class="line"><span class="comment">// #endif</span></span><br></pre></td></tr></table></figure>

<h2 id="调试与优化"><a href="#调试与优化" class="headerlink" title="调试与优化"></a>调试与优化</h2><p>uni-app提供了丰富的调试工具，包括控制台日志、性能分析等。在开发过程中，合理利用这些工具可以帮助你优化应用性能。</p>
<hr>
<h2 id="📌-联系方式"><a href="#📌-联系方式" class="headerlink" title="📌 联系方式"></a>📌 联系方式</h2><p>如果您对我们的项目感兴趣，或者有任何技术问题想要探讨，欢迎通过以下方式与我联系。我非常期待与您交流，共同学习，共同进步！</p>
<ul>
<li><strong>邮箱</strong>：<a href="mailto:2109664977@qq.com">2109664977@qq.com</a></li>
<li><strong>Gitee</strong>：<a href="https://gitee.com/bestwishes0203">我的Gitee</a></li>
<li><strong>GitHub</strong>：<a href="https://github.com/bestwishes0203">我的GitHub</a></li>
<li><strong>CSDN</strong>：<a href="https://blog.csdn.net/interest_ing_/">我的CSDN</a></li>
<li><strong>个人博客</strong>：<a href="https://bestwishes0203.gitee.io/blog/">访问我的博客</a></li>
</ul>
<hr>
<h2 id="🎉-结语"><a href="#🎉-结语" class="headerlink" title="🎉 结语"></a>🎉 结语</h2><p>感谢你的访问，如果你对我的技术文章或项目感兴趣，欢迎通过以上方式与我联系。让我们一起在技术的道路上不断前行！🚀</p>
<hr>
]]></content>
  </entry>
  <entry>
    <title>关于Nodejs搭建服务器增删改查和登录操作实例</title>
    <url>/blog/2024/03/11/%E5%85%B3%E4%BA%8ENodejs%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%92%8C%E7%99%BB%E5%BD%95%E6%93%8D%E4%BD%9C%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="关于Nodejs搭建服务器增删改查和登录操作实例"><a href="#关于Nodejs搭建服务器增删改查和登录操作实例" class="headerlink" title="关于Nodejs搭建服务器增删改查和登录操作实例"></a>关于Nodejs搭建服务器增删改查和登录操作实例</h1><p>在 node.js 中创建一个服务器非常简单，只需要使用 node.js 为我们提供的 http 模块及相关 API 即可创建一个麻雀虽小但五脏俱全的web 服务器，相比 Java&#x2F;Python&#x2F;Ruby 搭建web服务器的过程简单的很。</p>
<h2 id="1-数据库"><a href="#1-数据库" class="headerlink" title="1.数据库"></a>1.数据库</h2><p>数据库名：crud_demo<br>表名：user<br>字段：id，name，sex，age</p>
<h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用mysql依赖</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;mysql&quot;</span>);</span><br><span class="line"><span class="comment">//引用express依赖</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="comment">//引用body-parser 解析post传参</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>);</span><br><span class="line"><span class="comment">//express实例化</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//引用 cors</span></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&quot;cors&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; json &#125; = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>);</span><br><span class="line"><span class="comment">//关闭Form表单传值</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"><span class="comment">//使用Json传值</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br><span class="line"><span class="comment">//使用cors 解决跨域问题</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&quot;password&quot;</span>,<span class="comment">//修改成自己的密码</span></span><br><span class="line">  <span class="attr">database</span>: <span class="string">&quot;crud_demo&quot;</span>,<span class="comment">//修改成自己的数据库名</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 建立数据库连接</span></span><br><span class="line">connection.<span class="title function_">connect</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * select</span></span><br><span class="line"><span class="comment"> * http://127.0.0.1:3000/api</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/api&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> sql = <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">  connection.<span class="title function_">query</span>(sql, <span class="keyword">function</span> (<span class="params">error, results, fields</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">    <span class="comment">// return results;</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(results);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * delete</span></span><br><span class="line"><span class="comment"> * http://127.0.0.1:3000/api/delete/4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/api/delete/:id&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">let</span> delSql = <span class="string">`DELETE FROM user where id= <span class="subst">$&#123;<span class="built_in">parseInt</span>(req.params.id)&#125;</span>`</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(delSql);</span><br><span class="line">  connection.<span class="title function_">query</span>(delSql, <span class="keyword">function</span> (<span class="params">error, results</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">    <span class="comment">// return results;</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(results);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * insert</span></span><br><span class="line"><span class="comment"> * http://localhost:3000/api/insert?id=4&amp;name=xiaohe&amp;sex=%E7%94%B7&amp;age=19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/api/insert&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">let</span> insertSql = <span class="string">`insert into user VALUES(?,?,?,?)`</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(insertSql);</span><br><span class="line">  <span class="keyword">let</span> data = [req.<span class="property">query</span>.<span class="property">id</span>, req.<span class="property">query</span>.<span class="property">name</span>, req.<span class="property">query</span>.<span class="property">sex</span>, req.<span class="property">query</span>.<span class="property">age</span>];</span><br><span class="line">  connection.<span class="title function_">query</span>(insertSql, data, <span class="keyword">function</span> (<span class="params">error, results</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">    <span class="comment">// return results;</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(results);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * update</span></span><br><span class="line"><span class="comment"> * http://localhost:3000/api/update?id=4&amp;name=%E7%99%BE%E5%BA%A6&amp;sex=%E7%94%B7&amp;age=999</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/api/update&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">let</span> updateSql = <span class="string">`update user set name = ?, sex = ?, age = ? where id = ?`</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(updateSql);</span><br><span class="line">  <span class="keyword">let</span> data = [req.<span class="property">query</span>.<span class="property">name</span>, req.<span class="property">query</span>.<span class="property">sex</span>, req.<span class="property">query</span>.<span class="property">age</span>, req.<span class="property">query</span>.<span class="property">id</span>];</span><br><span class="line">  connection.<span class="title function_">query</span>(updateSql, data, <span class="keyword">function</span> (<span class="params">error, results</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">    <span class="comment">// return results;</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(results);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * login</span></span><br><span class="line"><span class="comment"> * http://127.0.0.1:3000/api/login?name=&quot;1234567890&quot;&amp;pwd=&quot;123456&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/api/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> loginSql = <span class="string">`select * from user where name = ? and pwd = ?`</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(loginSql);</span><br><span class="line">  <span class="keyword">let</span> data = [req.<span class="property">query</span>.<span class="property">name</span>, req.<span class="property">query</span>.<span class="property">pwd</span>];</span><br><span class="line">  connection.<span class="title function_">query</span>(loginSql, data, <span class="keyword">function</span> (<span class="params">error, results, fields</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">    <span class="comment">// return results;</span></span><br><span class="line">    <span class="keyword">if</span> (results.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;账号不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(results);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器启动成功...&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-运行"><a href="#3-运行" class="headerlink" title="3.运行"></a>3.运行</h2><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">node 文件名字</span><br></pre></td></tr></table></figure>

<h2 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h2><p>在浏览器中访问代码中对应的链接地址</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>关于我</title>
    <url>/blog/2022/01/01/%E5%85%B3%E4%BA%8E%E6%88%91/</url>
    <content><![CDATA[<h1 id="🌟-我的个人博客-🌟"><a href="#🌟-我的个人博客-🌟" class="headerlink" title="🌟 我的个人博客 🌟"></a>🌟 我的个人博客 🌟</h1><p>欢迎来到我的小天地，这里是我记录技术点滴、分享学习心得的地方。📚</p>
<ul>
<li>🎓 <strong>教育背景</strong>：南昌职业大学 | 软件工程 | 全日制本科</li>
<li>👨‍💻 <strong>年龄</strong>：23岁</li>
<li>👨 <strong>性别</strong>：男</li>
<li>📚 <strong>状态</strong>：学生</li>
<li>📧 <strong>邮箱</strong>：<a href="mailto:2109664977@qq.com">2109664977@qq.com</a></li>
</ul>
<hr>
<h2 id="🚀-个人优势"><a href="#🚀-个人优势" class="headerlink" title="🚀 个人优势"></a>🚀 个人优势</h2><ul>
<li><strong>项目经验</strong>：近3年的开发经验，成功落地多个项目。</li>
<li><strong>技术多样性</strong>：对Java、前端、小程序开发和App开发有丰富的经验。</li>
</ul>
<hr>
<h2 id="🛠️-技能清单"><a href="#🛠️-技能清单" class="headerlink" title="🛠️ 技能清单"></a>🛠️ 技能清单</h2><ul>
<li><strong>编程语言</strong>：Java、C、C++、Python、Go</li>
<li><strong>前端技术</strong>：Jquery、Vue.js、React、uni-app、Echarts</li>
<li><strong>后端技术</strong>：Spring Boot、Mybatis-plus、Swagger</li>
<li><strong>移动开发</strong>：Android</li>
<li><strong>操作系统</strong>：Linux</li>
<li><strong>开发框架</strong>：RuoYi</li>
<li><strong>开发工具</strong>：VSCode、IDEA、Eclipse、WebStorm、HbuildX、Navicat、Xshell、Android Studio、Apifox</li>
<li><strong>数据库技术</strong>：MySQL、Redis、SQL Server</li>
<li><strong>版本控制</strong>：Git</li>
</ul>
<hr>
<h2 id="📌-联系方式"><a href="#📌-联系方式" class="headerlink" title="📌 联系方式"></a>📌 联系方式</h2><ul>
<li><strong>邮箱</strong>：<a href="mailto:2109664977@qq.com">2109664977@qq.com</a></li>
<li><strong>Gitee</strong>：<a href="https://gitee.com/bestwishes0203">我的Gitee</a></li>
<li><strong>GitHub</strong>：<a href="https://github.com/bestwishes0203">我的GitHub</a></li>
<li><strong>CSDN</strong>：<a href="https://blog.csdn.net/interest_ing_/">我的CSDN</a></li>
<li><strong>个人博客</strong>：<a href="https://bestwishes0203.gitee.io/blog/">访问我的博客</a></li>
</ul>
<hr>
<h2 id="🎉-结语"><a href="#🎉-结语" class="headerlink" title="🎉 结语"></a>🎉 结语</h2><p>感谢你的访问，如果你对我的技术文章或项目感兴趣，欢迎通过以上方式与我联系。让我们一起在技术的道路上不断前行！🚀</p>
<hr>
<p>👋 bestwishes0203<br>[访问人数: 1001] 🌐</p>
]]></content>
      <categories>
        <category>关于我</category>
      </categories>
      <tags>
        <tag>关于我</tag>
      </tags>
  </entry>
  <entry>
    <title>前端实现自动获取农历日期：探索JavaScript的跨文化编程</title>
    <url>/blog/2024/04/14/%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E8%8E%B7%E5%8F%96%E5%86%9C%E5%8E%86%E6%97%A5%E6%9C%9F%EF%BC%9A%E6%8E%A2%E7%B4%A2JavaScript%E7%9A%84%E8%B7%A8%E6%96%87%E5%8C%96%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="前端实现自动获取农历日期：探索JavaScript的跨文化编程"><a href="#前端实现自动获取农历日期：探索JavaScript的跨文化编程" class="headerlink" title="前端实现自动获取农历日期：探索JavaScript的跨文化编程"></a>前端实现自动获取农历日期：探索JavaScript的跨文化编程</h1><p>在全球化的今天，编写能够适应不同文化和地区的软件变得尤为重要。JavaScript作为前端开发的核心语言，不仅能够处理日常的交互逻辑，还能实现一些特定文化的日期计算，例如农历日期。本文将介绍如何使用JavaScript在前端自动获取并展示当前的农历日期，同时扩展我们的知识面，探索跨文化编程的重要性。</p>
<h2 id="JavaScript在跨文化编程中的作用"><a href="#JavaScript在跨文化编程中的作用" class="headerlink" title="JavaScript在跨文化编程中的作用"></a>JavaScript在跨文化编程中的作用</h2><p>JavaScript是一种动态、弱类型、基于原型的轻量级编程语言，它在网页上实现了交互性，使得网页从静态文档变成了可以与用户进行复杂交互的动态应用。在跨文化编程中，JavaScript的灵活性和广泛的浏览器支持使其成为实现文化相关功能的理想选择。</p>
<h3 id="1-国际化和本地化"><a href="#1-国际化和本地化" class="headerlink" title="1. 国际化和本地化"></a>1. 国际化和本地化</h3><p>JavaScript可以处理不同语言和地区的日期、货币、数字格式等，通过内置的<code>Intl</code>对象，开发者可以轻松实现国际化（Internationalization）和本地化（Localization）。</p>
<h3 id="2-文化敏感的UI设计"><a href="#2-文化敏感的UI设计" class="headerlink" title="2. 文化敏感的UI设计"></a>2. 文化敏感的UI设计</h3><p>通过JavaScript，开发者可以根据用户的文化背景动态调整UI元素，例如使用适当的日期选择器、显示正确的货币符号等。</p>
<h3 id="3-时区处理"><a href="#3-时区处理" class="headerlink" title="3. 时区处理"></a>3. 时区处理</h3><p>JavaScript能够处理时区转换，这对于创建需要考虑不同时区的应用程序（如在线会议调度工具）至关重要。</p>
<h2 id="实现自动获取农历日期"><a href="#实现自动获取农历日期" class="headerlink" title="实现自动获取农历日期"></a>实现自动获取农历日期</h2><p>以下是一个简单的JavaScript函数，用于获取并返回当前日期对应的农历信息。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getLunar</span>(<span class="params">newDate</span>) &#123;</span><br><span class="line">    <span class="comment">// ... 省略部分代码 ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Draw</span>(); <span class="comment">// 调用Draw函数返回农历信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getDate</span>(<span class="params">date</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> year = date.<span class="title function_">getFullYear</span>();</span><br><span class="line">    <span class="keyword">let</span> month = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> day = date.<span class="title function_">getDate</span>();</span><br><span class="line">    <span class="keyword">return</span> year + <span class="string">&#x27;-&#x27;</span> + month + <span class="string">&#x27;-&#x27;</span> + day;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">getLunar</span>(<span class="title function_">getDate</span>(<span class="keyword">new</span> <span class="title class_">Date</span>())); <span class="comment">// 调用getLunar函数获取当前农历日期</span></span><br></pre></td></tr></table></figure>

<p>这个函数首先定义了一系列变量和辅助函数，然后通过<code>Lunar</code>类计算农历日期。最后，<code>Draw</code>函数将农历月份和日期格式化为字符串并返回。</p>
<h3 id="兼容性和性能考虑"><a href="#兼容性和性能考虑" class="headerlink" title="兼容性和性能考虑"></a>兼容性和性能考虑</h3><p>在实现农历日期计算时，需要考虑不同浏览器的兼容性。上述代码主要针对现代浏览器，对于旧版浏览器可能需要额外的polyfill或转译。同时，考虑到性能，复杂的日期计算最好在页面加载时进行，避免频繁的计算和DOM操作。</p>
<h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取某个日期的农历</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@parmas</span> &#123;<span class="type">newDate</span>&#125; 日期 年-月-日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getLunar</span>(<span class="params">newDate</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> nyear;</span><br><span class="line">    <span class="keyword">var</span> nmonth;</span><br><span class="line">    <span class="keyword">var</span> nday = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> nwday;</span><br><span class="line">    <span class="keyword">var</span> nhrs;</span><br><span class="line">    <span class="keyword">var</span> nmin;</span><br><span class="line">    <span class="keyword">var</span> nsec;</span><br><span class="line">    <span class="keyword">var</span> newDate = newDate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> lmonth, lday, lleap; <span class="comment">//农历参数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">NewTick</span>();</span><br><span class="line">        <span class="comment">//显示时间</span></span><br><span class="line">        <span class="keyword">var</span> s = nyear + <span class="string">&#x27;年&#x27;</span> + nmonth + <span class="string">&#x27;月&#x27;</span> + nday + <span class="string">&#x27;日 &#x27;</span> + <span class="string">&#x27;星期&#x27;</span> + <span class="title function_">cweekday</span>(nwday) + <span class="string">&#x27; &#x27;</span> + <span class="title function_">shapetime</span>(nhrs, nmin, nsec);</span><br><span class="line">        s += <span class="string">&quot; 农历&quot;</span> + lmonth + <span class="string">&quot;月&quot;</span> + lday; <span class="comment">//农历</span></span><br><span class="line">        <span class="keyword">var</span> lunar_month_day = lmonth + <span class="string">&quot;月&quot;</span> + lday;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(lunar_month_day);</span><br><span class="line">        <span class="keyword">return</span> lunar_month_day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">NewTick</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> noww = newDate ? <span class="keyword">new</span> <span class="title class_">Date</span>(newDate) : <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="keyword">if</span> (noww.<span class="title function_">getDate</span>() != nday) &#123;</span><br><span class="line">            nyear = noww.<span class="title function_">getFullYear</span>();</span><br><span class="line">            nmonth = noww.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">            nwday = noww.<span class="title function_">getDay</span>();</span><br><span class="line">            nday = noww.<span class="title function_">getDate</span>();</span><br><span class="line"></span><br><span class="line">            <span class="title function_">getlunar</span>(); <span class="comment">//获取农历</span></span><br><span class="line">        &#125;</span><br><span class="line">        nhrs = noww.<span class="title function_">getHours</span>();</span><br><span class="line">        nmin = noww.<span class="title function_">getMinutes</span>();</span><br><span class="line">        nsec = noww.<span class="title function_">getSeconds</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//辅助函数</span></span><br><span class="line">    <span class="keyword">var</span> hzWeek = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;日&quot;</span>, <span class="string">&quot;一&quot;</span>, <span class="string">&quot;二&quot;</span>, <span class="string">&quot;三&quot;</span>, <span class="string">&quot;四&quot;</span>, <span class="string">&quot;五&quot;</span>, <span class="string">&quot;六&quot;</span>, <span class="string">&quot;日&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">cweekday</span>(<span class="params">wday</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> hzWeek[wday];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">shapetime</span>(<span class="params">vhrs, vmin, vsec</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vsec &lt;= <span class="number">9</span>) vsec = <span class="string">&quot;0&quot;</span> + vsec;</span><br><span class="line">        <span class="keyword">if</span> (vmin &lt;= <span class="number">9</span>) vmin = <span class="string">&quot;0&quot;</span> + vmin;</span><br><span class="line">        <span class="keyword">if</span> (vhrs &lt;= <span class="number">9</span>) vhrs = <span class="string">&quot;0&quot;</span> + vhrs;</span><br><span class="line">        <span class="keyword">return</span> vhrs + <span class="string">&quot;:&quot;</span> + vmin + <span class="string">&quot;:&quot;</span> + vsec</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//农历函数开始</span></span><br><span class="line">    <span class="keyword">var</span> lunarInfo = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">0x04bd8</span>, <span class="number">0x04ae0</span>, <span class="number">0x0a570</span>, <span class="number">0x054d5</span>, <span class="number">0x0d260</span>, <span class="number">0x0d950</span>, <span class="number">0x16554</span>, <span class="number">0x056a0</span>, <span class="number">0x09ad0</span>, <span class="number">0x055d2</span>, <span class="number">0x04ae0</span>, <span class="number">0x0a5b6</span>, <span class="number">0x0a4d0</span>, <span class="number">0x0d250</span>, <span class="number">0x1d255</span>, <span class="number">0x0b540</span>, <span class="number">0x0d6a0</span>, <span class="number">0x0ada2</span>, <span class="number">0x095b0</span>, <span class="number">0x14977</span>, <span class="number">0x04970</span>, <span class="number">0x0a4b0</span>, <span class="number">0x0b4b5</span>, <span class="number">0x06a50</span>, <span class="number">0x06d40</span>, <span class="number">0x1ab54</span>, <span class="number">0x02b60</span>, <span class="number">0x09570</span>, <span class="number">0x052f2</span>, <span class="number">0x04970</span>, <span class="number">0x06566</span>, <span class="number">0x0d4a0</span>, <span class="number">0x0ea50</span>, <span class="number">0x06e95</span>, <span class="number">0x05ad0</span>, <span class="number">0x02b60</span>, <span class="number">0x186e3</span>, <span class="number">0x092e0</span>, <span class="number">0x1c8d7</span>, <span class="number">0x0c950</span>, <span class="number">0x0d4a0</span>, <span class="number">0x1d8a6</span>, <span class="number">0x0b550</span>, <span class="number">0x056a0</span>, <span class="number">0x1a5b4</span>, <span class="number">0x025d0</span>, <span class="number">0x092d0</span>, <span class="number">0x0d2b2</span>, <span class="number">0x0a950</span>, <span class="number">0x0b557</span>, <span class="number">0x06ca0</span>, <span class="number">0x0b550</span>, <span class="number">0x15355</span>, <span class="number">0x04da0</span>, <span class="number">0x0a5b0</span>, <span class="number">0x14573</span>, <span class="number">0x052b0</span>, <span class="number">0x0a9a8</span>, <span class="number">0x0e950</span>, <span class="number">0x06aa0</span>, <span class="number">0x0aea6</span>, <span class="number">0x0ab50</span>, <span class="number">0x04b60</span>, <span class="number">0x0aae4</span>, <span class="number">0x0a570</span>, <span class="number">0x05260</span>, <span class="number">0x0f263</span>, <span class="number">0x0d950</span>, <span class="number">0x05b57</span>, <span class="number">0x056a0</span>, <span class="number">0x096d0</span>, <span class="number">0x04dd5</span>, <span class="number">0x04ad0</span>, <span class="number">0x0a4d0</span>, <span class="number">0x0d4d4</span>, <span class="number">0x0d250</span>, <span class="number">0x0d558</span>, <span class="number">0x0b540</span>, <span class="number">0x0b6a0</span>, <span class="number">0x195a6</span>, <span class="number">0x095b0</span>, <span class="number">0x049b0</span>, <span class="number">0x0a974</span>, <span class="number">0x0a4b0</span>, <span class="number">0x0b27a</span>, <span class="number">0x06a50</span>, <span class="number">0x06d40</span>, <span class="number">0x0af46</span>, <span class="number">0x0ab60</span>, <span class="number">0x09570</span>, <span class="number">0x04af5</span>, <span class="number">0x04970</span>, <span class="number">0x064b0</span>, <span class="number">0x074a3</span>, <span class="number">0x0ea50</span>, <span class="number">0x06b58</span>, <span class="number">0x05ac0</span>, <span class="number">0x0ab60</span>, <span class="number">0x096d5</span>, <span class="number">0x092e0</span>, <span class="comment">//1990</span></span><br><span class="line">        <span class="number">0x0c960</span>, <span class="number">0x0d954</span>, <span class="number">0x0d4a0</span>, <span class="number">0x0da50</span>, <span class="number">0x07552</span>, <span class="number">0x056a0</span>, <span class="number">0x0abb7</span>, <span class="number">0x025d0</span>, <span class="number">0x092d0</span>, <span class="number">0x0cab5</span>, <span class="number">0x0a950</span>, <span class="number">0x0b4a0</span>, <span class="number">0x0baa4</span>, <span class="number">0x0ad50</span>, <span class="number">0x055d9</span>, <span class="number">0x04ba0</span>, <span class="number">0x0a5b0</span>, <span class="number">0x15176</span>, <span class="number">0x052b0</span>, <span class="number">0x0a930</span>, <span class="number">0x07954</span>, <span class="number">0x06aa0</span>, <span class="number">0x0ad50</span>, <span class="number">0x05b52</span>, <span class="number">0x04b60</span>, <span class="number">0x0a6e6</span>, <span class="number">0x0a4e0</span>, <span class="number">0x0d260</span>, <span class="number">0x0ea65</span>, <span class="number">0x0d530</span>, <span class="number">0x05aa0</span>, <span class="number">0x076a3</span>, <span class="number">0x096d0</span>, <span class="number">0x04bd7</span>, <span class="number">0x04ad0</span>, <span class="number">0x0a4d0</span>, <span class="number">0x1d0b6</span>, <span class="number">0x0d250</span>, <span class="number">0x0d520</span>, <span class="number">0x0dd45</span>, <span class="number">0x0b5a0</span>, <span class="number">0x056d0</span>, <span class="number">0x055b2</span>, <span class="number">0x049b0</span>, <span class="number">0x0a577</span>, <span class="number">0x0a4b0</span>, <span class="number">0x0aa50</span>, <span class="number">0x1b255</span>, <span class="number">0x06d20</span>, <span class="number">0x0ada0</span>, <span class="number">0x14b63</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">lYearDays</span>(<span class="params">y</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> i, sum = <span class="number">348</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0x8000</span>; i &gt; <span class="number">0x8</span>; i &gt;&gt;= <span class="number">1</span>) sum += (lunarInfo[y - <span class="number">1900</span>] &amp; i) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> (sum + <span class="title function_">leapDays</span>(y));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">leapDays</span>(<span class="params">y</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">leapMonth</span>(y)) <span class="keyword">return</span> ((lunarInfo[y - <span class="number">1900</span>] &amp; <span class="number">0x10000</span>) ? <span class="number">30</span> : <span class="number">29</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">leapMonth</span>(<span class="params">y</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (lunarInfo[y - <span class="number">1900</span>] &amp; <span class="number">0xf</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">monthDays</span>(<span class="params">y, m</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ((lunarInfo[y - <span class="number">1900</span>] &amp; (<span class="number">0x10000</span> &gt;&gt; m)) ? <span class="number">30</span> : <span class="number">29</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Lunar</span>(<span class="params">y, m, d</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> i, leap = <span class="number">0</span>,</span><br><span class="line">            temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> offset = (<span class="title class_">Date</span>.<span class="title function_">UTC</span>(y, m, d) - <span class="title class_">Date</span>.<span class="title function_">UTC</span>(<span class="number">1900</span>, <span class="number">0</span>, <span class="number">31</span>)) / <span class="number">86400000</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1900</span>; i &lt; <span class="number">2050</span> &amp;&amp; offset &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line">            temp = <span class="title function_">lYearDays</span>(i);</span><br><span class="line">            offset -= temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            offset += temp;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">year</span> = i;</span><br><span class="line">        leap = <span class="title function_">leapMonth</span>(i);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isLeap</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">13</span> &amp;&amp; offset &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (leap &gt; <span class="number">0</span> &amp;&amp; i == (leap + <span class="number">1</span>) &amp;&amp; <span class="variable language_">this</span>.<span class="property">isLeap</span> == <span class="literal">false</span>) &#123;</span><br><span class="line">                --i;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">isLeap</span> = <span class="literal">true</span>;</span><br><span class="line">                temp = <span class="title function_">leapDays</span>(<span class="variable language_">this</span>.<span class="property">year</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                temp = <span class="title function_">monthDays</span>(<span class="variable language_">this</span>.<span class="property">year</span>, i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isLeap</span> == <span class="literal">true</span> &amp;&amp; i == (leap + <span class="number">1</span>)) <span class="variable language_">this</span>.<span class="property">isLeap</span> = <span class="literal">false</span>;</span><br><span class="line">            offset -= temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (offset == <span class="number">0</span> &amp;&amp; leap &gt; <span class="number">0</span> &amp;&amp; i == leap + <span class="number">1</span>) <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isLeap</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">isLeap</span> = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">isLeap</span> = <span class="literal">true</span>;</span><br><span class="line">            --i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            offset += temp;</span><br><span class="line">            --i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">month</span> = i;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">day</span> = offset + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> nStr1 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;一&#x27;</span>, <span class="string">&#x27;二&#x27;</span>, <span class="string">&#x27;三&#x27;</span>, <span class="string">&#x27;四&#x27;</span>, <span class="string">&#x27;五&#x27;</span>, <span class="string">&#x27;六&#x27;</span>, <span class="string">&#x27;七&#x27;</span>, <span class="string">&#x27;八&#x27;</span>, <span class="string">&#x27;九&#x27;</span>, <span class="string">&#x27;十&#x27;</span>, <span class="string">&#x27;冬&#x27;</span>, <span class="string">&#x27;十二&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> nStr2 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&#x27;初&#x27;</span>, <span class="string">&#x27;十&#x27;</span>, <span class="string">&#x27;廿&#x27;</span>, <span class="string">&#x27;卅&#x27;</span>, <span class="string">&#x27;□&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">GetcDay</span>(<span class="params">d</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> s;</span><br><span class="line">        <span class="keyword">switch</span> (d) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                s = <span class="string">&#x27;初十&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">20</span>:</span><br><span class="line">                s = <span class="string">&#x27;二十&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">30</span>:</span><br><span class="line">                s = <span class="string">&#x27;三十&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                s = nStr2[<span class="title class_">Math</span>.<span class="title function_">floor</span>(d / <span class="number">10</span>)];</span><br><span class="line">                s += nStr1[d % <span class="number">10</span>];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">GetcMon</span>(<span class="params">m</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">1</span>) <span class="keyword">return</span> <span class="string">&#x27;正&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> nStr1[m];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getlunar</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> lObj = <span class="keyword">new</span> <span class="title class_">Lunar</span>(nyear, nmonth - <span class="number">1</span>, nday);</span><br><span class="line">        lmonth = <span class="title class_">GetcMon</span>(lObj.<span class="property">month</span>);</span><br><span class="line">        lday = <span class="title class_">GetcDay</span>(lObj.<span class="property">day</span>);</span><br><span class="line">        lleap = lObj.<span class="property">isLeap</span>;</span><br><span class="line">        <span class="keyword">if</span> (lleap == <span class="number">1</span>) &#123;</span><br><span class="line">            lmonth = <span class="string">&quot;闰&quot;</span> + lmonth;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//农历函数结束</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Draw</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getDate</span>(<span class="params">date</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> year = date.<span class="title function_">getFullYear</span>();</span><br><span class="line">    <span class="keyword">let</span> month = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> day = date.<span class="title function_">getDate</span>();</span><br><span class="line">    <span class="keyword">return</span> year + <span class="string">&#x27;-&#x27;</span> + month + <span class="string">&#x27;-&#x27;</span> + day;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">getLunar</span>(<span class="title function_">getDate</span>(<span class="keyword">new</span> <span class="title class_">Date</span>())); <span class="comment">// 三月初六</span></span><br></pre></td></tr></table></figure>



<h2 id="跨文化编程的重要性"><a href="#跨文化编程的重要性" class="headerlink" title="跨文化编程的重要性"></a>跨文化编程的重要性</h2><p>在开发面向全球用户的Web应用时，考虑文化差异是提升用户体验的关键。通过JavaScript，我们可以：</p>
<ul>
<li><strong>提供本地化的内容</strong>：根据用户的地区和语言习惯展示内容。</li>
<li><strong>尊重文化习俗</strong>：在设计UI和交互时避免文化冲突。</li>
<li><strong>增强可访问性</strong>：确保所有用户，无论文化背景如何，都能轻松使用应用。</li>
</ul>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过JavaScript，我们不仅能够创建动态的Web应用，还能够编写出尊重并适应不同文化背景的代码。实现农历日期的自动获取只是跨文化编程的一个例子，它展示了如何将特定文化的需求融入到Web开发中。随着Web技术的不断进步，我们期待未来能够有更多的工具和方法来支持跨文化编程，让Web应用更加多元化和包容。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端与后端协同：实现Excel导入导出功能</title>
    <url>/blog/2024/04/05/%E5%89%8D%E7%AB%AF%E4%B8%8E%E5%90%8E%E7%AB%AF%E5%8D%8F%E5%90%8C%EF%BC%9A%E5%AE%9E%E7%8E%B0Excel%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="前端与后端协同：实现Excel导入导出功能"><a href="#前端与后端协同：实现Excel导入导出功能" class="headerlink" title="前端与后端协同：实现Excel导入导出功能"></a>前端与后端协同：实现Excel导入导出功能</h1><p>在现代Web应用中，Excel文件的导入导出是一个常见的需求。用户希望能够方便地将数据导入到系统中，或者将系统数据导出到Excel文件中。本文将介绍如何在前端和后端之间实现这一功能，示例采用Spring Boot和Vue.js技术栈。</p>
<h2 id="后端依赖"><a href="#后端依赖" class="headerlink" title="后端依赖"></a>后端依赖</h2><p>在Spring Boot项目中，我们需要添加EasyExcel依赖来处理Excel文件。EasyExcel是一个简单、省内存的读写Excel的开源工具。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导出excel  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h2><h3 id="导出Excel"><a href="#导出Excel" class="headerlink" title="导出Excel"></a>导出Excel</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Operation(summary = &quot;导出数据&quot;) swagger注解</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;exportExcel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exportExcelMenu</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 设置响应头信息</span></span><br><span class="line">    response.setContentType(<span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>);</span><br><span class="line">    response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    <span class="comment">// 编码文件名，避免中文乱码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;轮播图&quot;</span>, StandardCharsets.UTF_8).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取数据列表</span></span><br><span class="line">    List&lt;MenuEntity&gt; list = menuService.list();</span><br><span class="line">    <span class="comment">// 设置文件名</span></span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename*=&quot;</span> + fileName + <span class="string">&quot;.xlsx&quot;</span>);</span><br><span class="line">    <span class="comment">// 使用EasyExcel写入数据到输出流</span></span><br><span class="line">    EasyExcel.write(response.getOutputStream(), MenuEntity.class)</span><br><span class="line">            .sheet(<span class="string">&quot;轮播图&quot;</span>) <span class="comment">// 指定工作表名称</span></span><br><span class="line">            .doWrite(list); <span class="comment">// 执行写入操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="导入Excel"><a href="#导入Excel" class="headerlink" title="导入Excel"></a>导入Excel</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Operation(summary = &quot;导入数据&quot;) swagger注解</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/importExcel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">importExcelMenu</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取文件输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line">        <span class="comment">// 使用EasyExcel读取Excel数据</span></span><br><span class="line">        List&lt;MenuEntity&gt; list = EasyExcel.read(inputStream, MenuEntity.class)</span><br><span class="line">                .sheet() <span class="comment">// 读取第一个工作表</span></span><br><span class="line">                .headRowNumber(<span class="number">1</span>) <span class="comment">// 表头行数</span></span><br><span class="line">                .doReadSync(); <span class="comment">// 同步读取数据</span></span><br><span class="line">        <span class="comment">// 处理导入的数据</span></span><br><span class="line">        <span class="keyword">for</span> (MenuEntity entity : list) &#123;</span><br><span class="line">            menuService.saveOrUpdate(entity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回成功结果</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;导入成功&quot;</span>, sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException exception) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(exception);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="前端请求"><a href="#前端请求" class="headerlink" title="前端请求"></a>前端请求</h2><h3 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">importExcelMenu</span>(<span class="params">file: <span class="built_in">object</span></span>): <span class="title class_">Promise</span>&lt;<span class="title class_">ImportExcelMenuRes</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">post</span>(<span class="string">`/menuEntity/importExcel`</span>, file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">exportExcelMenu</span>(<span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="title class_">ExportExcelMenuRes</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">post</span>(<span class="string">`/menuEntity/exportExcel`</span>, &#123;&#125;, &#123;</span><br><span class="line">        <span class="attr">responseType</span>: <span class="string">&#x27;arraybuffer&#x27;</span>, <span class="comment">// 设置响应类型为二进制流</span></span><br><span class="line">        <span class="attr">headers</span>: &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/octet-stream&#x27;</span>&#125; <span class="comment">// 设置请求头</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="前端调用请求"><a href="#前端调用请求" class="headerlink" title="前端调用请求"></a>前端调用请求</h2><h3 id="导入操作"><a href="#导入操作" class="headerlink" title="导入操作"></a>导入操作</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">importChangeExcel</span> = (<span class="params">file</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 限制文件类型</span></span><br><span class="line">  <span class="keyword">if</span> (file.<span class="property">raw</span>.<span class="property">type</span> !== <span class="string">&#x27;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&#x27;</span>) &#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;仅支持 .xlsx 格式的文件&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  importData.<span class="property">value</span>.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, file.<span class="property">raw</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">GlobalImport</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 执行导入操作</span></span><br><span class="line">  api.<span class="property">menu</span>.importExcelMenu(importData.<span class="property">value</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>(&#123;<span class="attr">message</span>: res.<span class="property">message</span>, <span class="attr">type</span>: res.<span class="property">success</span> ? <span class="string">&#x27;success&#x27;</span> : <span class="string">&#x27;error&#x27;</span>&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="导出操作"><a href="#导出操作" class="headerlink" title="导出操作"></a>导出操作</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">GlobalExport</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 执行导出操作</span></span><br><span class="line">  api.<span class="property">menu</span>.<span class="title function_">exportExcelMenu</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 创建下载链接并触发下载</span></span><br><span class="line">    <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> fileName = <span class="string">&quot;菜单表.xlsx&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([res], &#123;<span class="attr">type</span>: <span class="string">&#x27;application/vnd.ms-excel&#x27;</span>&#125;);</span><br><span class="line">    link.<span class="property">href</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">    link.<span class="property">download</span> = fileName;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(link);</span><br><span class="line">    link.<span class="title function_">click</span>();</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(link);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol>
<li><p>导入数据的接口中，相当于使用<code>@RequestBody</code>注解获取数据：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">importExcelMenu</span>(<span class="params">file: <span class="built_in">object</span></span>): <span class="title class_">Promise</span>&lt;<span class="title class_">ImportExcelMenuRes</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">post</span>(<span class="string">`/menuEntity/importExcel`</span>, file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>导出数据的接口中，需要设置如下请求头：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">responseType</span>: <span class="string">&#x27;arraybuffer&#x27;</span>, <span class="comment">// 设置响应类型为二进制流</span></span><br><span class="line"> <span class="attr">headers</span>: &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/octet-stream&#x27;</span>&#125; <span class="comment">// 设置请求头</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过上述示例，我们展示了如何在前端和后端之间实现Excel文件的导入导出功能。后端通过Spring Boot和EasyExcel处理Excel文件，前端通过Vue.js发起请求并处理响应。这样的协同工作使得数据的导入导出变得简单而高效。开发者可以根据实际需求调整和扩展这些代码，以适应不同的业务场景。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title>初学Vue第一篇</title>
    <url>/blog/2024/03/11/%E5%88%9D%E5%AD%A6Vue%E7%AC%AC%E4%B8%80%E7%AF%87/</url>
    <content><![CDATA[<h1 id="初学Vue第一篇"><a href="#初学Vue第一篇" class="headerlink" title="初学Vue第一篇"></a>初学Vue第一篇</h1><h2 id="1-打开vscode"><a href="#1-打开vscode" class="headerlink" title="1.打开vscode"></a>1.打开vscode</h2><p><img src="https://img-blog.csdnimg.cn/d5406d32af3d48a8ba0273f44187a261.png" alt="在这里插入图片描述"></p>
<h2 id="2-新建一个终端"><a href="#2-新建一个终端" class="headerlink" title="2.新建一个终端"></a>2.新建一个终端</h2><p><img src="https://img-blog.csdnimg.cn/e81ae26a07964286aad4134092fa88ad.png" alt="在这里插入图片描述"></p>
<h2 id="3-输入vue-create-项目名称（我这里是vue-case）"><a href="#3-输入vue-create-项目名称（我这里是vue-case）" class="headerlink" title="3.输入vue create 项目名称（我这里是vue-case）"></a>3.输入vue create 项目名称（我这里是vue-case）</h2><p><img src="https://img-blog.csdnimg.cn/af37e8464392459fb7f1bdd5be2bc2eb.png" alt="在这里插入图片描述"></p>
<h2 id="4-配置vue项目（我这里选三个自主配置，第一个vue3默认配置，第二个vue2默认配置）"><a href="#4-配置vue项目（我这里选三个自主配置，第一个vue3默认配置，第二个vue2默认配置）" class="headerlink" title="4.配置vue项目（我这里选三个自主配置，第一个vue3默认配置，第二个vue2默认配置）"></a>4.配置vue项目（我这里选三个自主配置，第一个vue3默认配置，第二个vue2默认配置）</h2><p><img src="https://img-blog.csdnimg.cn/0c0d3dc83d5f424abebc1c2013f85b74.png" alt="在这里插入图片描述"></p>
<h2 id="5-键盘上下键和空格键勾选vueRouter-和-vuex"><a href="#5-键盘上下键和空格键勾选vueRouter-和-vuex" class="headerlink" title="5.键盘上下键和空格键勾选vueRouter 和 vuex"></a>5.键盘上下键和空格键勾选vueRouter 和 vuex</h2><p><img src="https://img-blog.csdnimg.cn/4983288c54e542efb703faa20724c1e2.png" alt="在这里插入图片描述"></p>
<h2 id="6-选择vue版本"><a href="#6-选择vue版本" class="headerlink" title="6.选择vue版本"></a>6.选择vue版本</h2><p><img src="https://img-blog.csdnimg.cn/ffd182337a95435195c9a026f0ced6ef.png" alt="在这里插入图片描述"></p>
<h2 id="7-键入y需要为生产中的索引回退设置适当的服务器"><a href="#7-键入y需要为生产中的索引回退设置适当的服务器" class="headerlink" title="7.键入y需要为生产中的索引回退设置适当的服务器"></a>7.键入y需要为生产中的索引回退设置适当的服务器</h2><p><img src="https://img-blog.csdnimg.cn/a56acc63a68a4f0f820d8ebbe17c941b.png" alt="在这里插入图片描述"></p>
<h2 id="8-一律键入y"><a href="#8-一律键入y" class="headerlink" title="8.一律键入y"></a>8.一律键入y</h2><h2 id="9-创建完毕"><a href="#9-创建完毕" class="headerlink" title="9.创建完毕"></a>9.创建完毕</h2><p><img src="https://img-blog.csdnimg.cn/3f33373611ff48b4ab8220e361025db6.png" alt="在这里插入图片描述"></p>
<h2 id="10-项目结构目录"><a href="#10-项目结构目录" class="headerlink" title="10.项目结构目录"></a>10.项目结构目录</h2><p><img src="https://img-blog.csdnimg.cn/dc63b19c81414310ab061ccd660bfe5d.png" alt="在这里插入图片描述"></p>
<h2 id="11-项目配置package-json"><a href="#11-项目配置package-json" class="headerlink" title="11.项目配置package.json"></a>11.项目配置package.json</h2><p><img src="https://img-blog.csdnimg.cn/4069be3d90b94ea9a63bcb992dd4cb3b.png" alt="在这里插入图片描述"></p>
<h2 id="12-输入cd-项目名称"><a href="#12-输入cd-项目名称" class="headerlink" title="12.输入cd 项目名称"></a>12.输入cd 项目名称</h2><p><img src="https://img-blog.csdnimg.cn/e854d27b83f34f82a4624b8820bccb0c.png" alt="在这里插入图片描述"></p>
<h2 id="13-输入npm-run-serve运行"><a href="#13-输入npm-run-serve运行" class="headerlink" title="13.输入npm run serve运行"></a>13.输入npm run serve运行</h2><p><img src="https://img-blog.csdnimg.cn/103c55d10ac543e9b2e94cca76aad70b.png" alt="在这里插入图片描述"></p>
<h2 id="14-运行成功"><a href="#14-运行成功" class="headerlink" title="14.运行成功"></a>14.运行成功</h2><p><img src="https://img-blog.csdnimg.cn/23d4621ace644380a107823331c180b6.png" alt="在这里插入图片描述"></p>
<p><strong><strong>如果对你有帮助，点赞、收藏、关注是我更新的动力！👋🌟🚀</strong></strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发全景指南：语言与框架的精粹</title>
    <url>/blog/2024/04/07/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%85%A8%E6%99%AF%E6%8C%87%E5%8D%97%EF%BC%9A%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%A1%86%E6%9E%B6%E7%9A%84%E7%B2%BE%E7%B2%B9/</url>
    <content><![CDATA[<h1 id="前端开发全景指南：语言与框架的精粹"><a href="#前端开发全景指南：语言与框架的精粹" class="headerlink" title="前端开发全景指南：语言与框架的精粹"></a>前端开发全景指南：语言与框架的精粹</h1><p>前端开发是现代Web应用的基石，它涉及到一系列编程语言和框架的使用，这些工具共同塑造了用户与互联网世界的交互体验。本文将深入探讨前端开发中的核心语言和流行框架，为你揭示构建网页和应用的精髓。</p>
<h2 id="核心语言：前端开发的基石"><a href="#核心语言：前端开发的基石" class="headerlink" title="核心语言：前端开发的基石"></a>核心语言：前端开发的基石</h2><h3 id="HTML：构建内容的骨架"><a href="#HTML：构建内容的骨架" class="headerlink" title="HTML：构建内容的骨架"></a>HTML：构建内容的骨架</h3><p>HTML是网页内容的标记语言，它定义了网页的结构和内容。作为前端开发的基础，HTML为后续的样式和交互提供了必要的框架。</p>
<h3 id="CSS：美化视觉的艺术家"><a href="#CSS：美化视觉的艺术家" class="headerlink" title="CSS：美化视觉的艺术家"></a>CSS：美化视觉的艺术家</h3><p>CSS负责网页的表现和样式，它通过选择器和属性控制元素的外观。CSS的灵活性和强大的布局能力使得设计师的创意得以完美呈现。</p>
<h3 id="JavaScript：动态交互的魔法师"><a href="#JavaScript：动态交互的魔法师" class="headerlink" title="JavaScript：动态交互的魔法师"></a>JavaScript：动态交互的魔法师</h3><p>JavaScript为网页注入活力，它能够响应用户的行为，动态更新内容，甚至与服务器进行通信。JavaScript的生态圈庞大，支持开发者创建丰富多彩的用户体验。</p>
<h3 id="TypeScript：JavaScript的严谨进化"><a href="#TypeScript：JavaScript的严谨进化" class="headerlink" title="TypeScript：JavaScript的严谨进化"></a>TypeScript：JavaScript的严谨进化</h3><p>TypeScript是JavaScript的超集，它引入了静态类型系统，使得代码更加健壮和易于维护。TypeScript在现代前端开发中越来越受到欢迎，尤其是在大型项目中。</p>
<h3 id="JSON：数据交换的新宠"><a href="#JSON：数据交换的新宠" class="headerlink" title="JSON：数据交换的新宠"></a>JSON：数据交换的新宠</h3><p>JSON（JavaScript Object Notation）是一种轻量级的数据交换格式。它易于人阅读和编写，同时也易于机器解析和生成。JSON在Web服务和API中广泛使用，成为前后端数据交换的标准格式。</p>
<h2 id="流行框架：提升开发效率的利器"><a href="#流行框架：提升开发效率的利器" class="headerlink" title="流行框架：提升开发效率的利器"></a>流行框架：提升开发效率的利器</h2><h3 id="Angular：全面解决方案的构建者"><a href="#Angular：全面解决方案的构建者" class="headerlink" title="Angular：全面解决方案的构建者"></a>Angular：全面解决方案的构建者</h3><p>Angular是一个由Google支持的全面前端框架，它提供了从模板、表单处理到依赖注入的一整套解决方案。Angular的设计哲学是约定优于配置，适合构建大型企业级应用。</p>
<h3 id="Vue-js：渐进式框架的代表"><a href="#Vue-js：渐进式框架的代表" class="headerlink" title="Vue.js：渐进式框架的代表"></a>Vue.js：渐进式框架的代表</h3><p>Vue.js以其轻量级和易用性著称，它允许开发者以渐进的方式集成到项目中。Vue的核心库专注于视图层，同时它的生态系统也支持构建复杂的单页应用。</p>
<h3 id="React-js：组件化开发的先驱"><a href="#React-js：组件化开发的先驱" class="headerlink" title="React.js：组件化开发的先驱"></a>React.js：组件化开发的先驱</h3><p>React.js是Facebook开发的一个库，它通过组件化和虚拟DOM技术，提供了高效的用户界面构建方案。React的生态系统丰富，社区活跃，是当前最受欢迎的前端框架之一。</p>
<h3 id="Svelte：新兴的编译型框架"><a href="#Svelte：新兴的编译型框架" class="headerlink" title="Svelte：新兴的编译型框架"></a>Svelte：新兴的编译型框架</h3><p>Svelte是一个独特的前端框架，它在构建阶段进行大部分工作，将应用编译成高效的JavaScript代码。Svelte的应用性能优异，开发体验流畅。</p>
<h3 id="Ember-js和Backbone-js：功能丰富的框架"><a href="#Ember-js和Backbone-js：功能丰富的框架" class="headerlink" title="Ember.js和Backbone.js：功能丰富的框架"></a>Ember.js和Backbone.js：功能丰富的框架</h3><p>Ember.js和Backbone.js是两个提供全面功能的前端框架。它们提供了丰富的工具和约定，帮助开发者构建结构化和可维护的Web应用。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>前端开发的世界丰富多彩，选择合适的语言和框架对于项目的成功至关重要。无论是基础的HTML、CSS和JavaScript，还是强大的框架如React、Angular和Vue，每一种工具都有其独特的价值和应用场景。了解它们的特点是每个前端开发者的必修课，也是创造令人印象深刻的Web体验的关键。随着技术的不断进步，前端领域将继续发展，带来更多的可能性和挑战。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>在Vue中处理接口返回的二进制图片数据</title>
    <url>/blog/2024/03/09/%E5%9C%A8Vue%E4%B8%AD%E5%A4%84%E7%90%86%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%9B%BE%E7%89%87%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="在Vue中处理接口返回的二进制图片数据"><a href="#在Vue中处理接口返回的二进制图片数据" class="headerlink" title="在Vue中处理接口返回的二进制图片数据"></a>在Vue中处理接口返回的二进制图片数据</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>在现代Web开发中，前端应用经常需要从后端接口获取图片数据。有时，这些图片数据以二进制格式返回，而不是常见的Base64编码。本文将指导你如何在Vue应用中处理这类二进制图片数据，并将其正确地显示在页面上。</p>
<h2 id="1-问题分析"><a href="#1-问题分析" class="headerlink" title="1. 问题分析"></a>1. 问题分析</h2><h3 id="1-1-环境检查"><a href="#1-1-环境检查" class="headerlink" title="1.1 环境检查"></a>1.1 环境检查</h3><p>确保你的Vue项目能够正常发起网络请求，并且后端接口的跨域设置是正确的。如果需要，可以参考相关文档配置axios以适应跨域请求。</p>
<h3 id="1-2-问题描述"><a href="#1-2-问题描述" class="headerlink" title="1.2 问题描述"></a>1.2 问题描述</h3><p>当后端接口返回的响应类型为<code>application/octet-stream</code>或<code>image/png</code>等二进制格式时，我们需要特殊处理这些数据。</p>
<p><img src="C:\Users\21096\Desktop\Snipaste_2024-03-08_21-54-44.png" alt="Snipaste_2024-03-08_21-54-44"></p>
<h2 id="2-接口对接"><a href="#2-接口对接" class="headerlink" title="2. 接口对接"></a>2. 接口对接</h2><h3 id="2-1-添加接口返回头"><a href="#2-1-添加接口返回头" class="headerlink" title="2.1 添加接口返回头"></a>2.1 添加接口返回头</h3><p>在axios请求中，我们需要指定<code>responseType</code>为<code>arraybuffer</code>，以便接收二进制数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用axios获取二进制数据</span></span><br><span class="line">request.<span class="title function_">get</span>(<span class="string">&quot;/commonEntity/generateImageCode&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">responseType</span>: <span class="string">&quot;arraybuffer&quot;</span>,</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>); <span class="comment">// 二进制数据</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="2-2-请求数据示例"><a href="#2-2-请求数据示例" class="headerlink" title="2.2 请求数据示例"></a>2.2 请求数据示例</h3><p>接口返回的二进制数据通常是一个<code>ArrayBuffer</code>对象。</p>
<p><img src="C:\Users\21096\AppData\Roaming\Typora\typora-user-images\image-20240308220257299.png" alt="image-20240308220257299"></p>
<h3 id="2-3-使用bufferUrl和btoa函数"><a href="#2-3-使用bufferUrl和btoa函数" class="headerlink" title="2.3 使用bufferUrl和btoa函数"></a>2.3 使用<code>bufferUrl</code>和<code>btoa</code>函数</h3><p>为了将二进制数据转换为Base64编码，我们可以使用<code>btoa</code>函数。然后，我们可以将Base64编码的字符串作为图片的<code>src</code>属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&quot;@/request&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> imgSrc = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  request.<span class="title function_">get</span>(<span class="string">&quot;/commonEntity/generateImageCode&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">responseType</span>: <span class="string">&quot;arraybuffer&quot;</span>,</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 将ArrayBuffer转换为Base64编码的字符串</span></span><br><span class="line">    <span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(res);</span><br><span class="line">    <span class="keyword">const</span> base64String = <span class="title function_">btoa</span>(</span><br><span class="line">      buffer.<span class="title function_">reduce</span>(<span class="function">(<span class="params">data, byte</span>) =&gt;</span> data + <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(byte), <span class="string">&quot;&quot;</span>)</span><br><span class="line">    );</span><br><span class="line">    imgSrc.<span class="property">value</span> = <span class="string">&quot;data:image/png;base64,&quot;</span> + base64String;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="3-全部代码"><a href="#3-全部代码" class="headerlink" title="3. 全部代码"></a>3. 全部代码</h2><p>以下是一个完整的Vue组件示例，展示了如何获取二进制图片数据并将其显示在页面上。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;img :src=&quot;imgSrc&quot; alt=&quot;二进制图片&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import request from &quot;@/request&quot;;</span><br><span class="line">import &#123; onMounted, ref &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">// 定义响应式引用imgSrc</span><br><span class="line">const imgSrc = ref(&#x27;&#x27;);</span><br><span class="line"></span><br><span class="line">// 在组件挂载后发起请求</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  // 发起请求并处理二进制数据</span><br><span class="line">  request.get(&quot;/commonEntity/generateImageCode&quot;, &#123;</span><br><span class="line">    responseType: &quot;arraybuffer&quot;,</span><br><span class="line">  &#125;).then((res) =&gt; &#123;</span><br><span class="line">    // 将二进制数据转换为Base64编码</span><br><span class="line">    const buffer = new Uint8Array(res);</span><br><span class="line">    const base64String = btoa(</span><br><span class="line">      buffer.reduce((data, byte) =&gt; data + String.fromCharCode(byte), &quot;&quot;)</span><br><span class="line">    );</span><br><span class="line">    // 更新imgSrc的值为Base64编码的图片URL</span><br><span class="line">    imgSrc.value = &quot;data:image/png;base64,&quot; + base64String;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>如何从零开始创建React应用：简易指南</title>
    <url>/blog/2024/04/17/%E5%A6%82%E4%BD%95%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9B%E5%BB%BAReact%E5%BA%94%E7%94%A8%EF%BC%9A%E7%AE%80%E6%98%93%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="如何从零开始创建React应用：简易指南"><a href="#如何从零开始创建React应用：简易指南" class="headerlink" title="如何从零开始创建React应用：简易指南"></a>如何从零开始创建React应用：简易指南</h1><p>React是一个流行的JavaScript库，用于构建用户界面。通过使用Create React App，一个官方提供的脚手架工具，我们可以轻松地创建、开发和部署React应用，而无需深入了解底层构建配置。</p>
<p>创建一个React项目通常涉及到使用Node.js和npm（Node包管理器），因为React是一个基于JavaScript的库，而npm帮助我们管理项目中的依赖。下面是创建一个基本React项目的步骤：</p>
<h3 id="1-确保安装了Node-js和npm"><a href="#1-确保安装了Node-js和npm" class="headerlink" title="1. 确保安装了Node.js和npm"></a>1. 确保安装了Node.js和npm</h3><p>在开始之前，你需要在你的计算机上安装Node.js和npm。你可以通过在命令行（Windows上的CMD或PowerShell，macOS或Linux上的终端）运行以下命令来检查它们是否已经安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p>如果这两个命令都返回了版本号，那么你已经安装了Node.js和npm。</p>
<h3 id="2-全局安装Create-React-App"><a href="#2-全局安装Create-React-App" class="headerlink" title="2. 全局安装Create React App"></a>2. 全局安装Create React App</h3><p>Create React App是一个官方提供的脚手架工具，它可以帮助我们快速创建一个React项目，而无需手动设置构建过程。在命令行中运行以下命令来全局安装Create React App：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g create-react-app</span><br></pre></td></tr></table></figure>

<h3 id="3-创建一个新的React应用"><a href="#3-创建一个新的React应用" class="headerlink" title="3. 创建一个新的React应用"></a>3. 创建一个新的React应用</h3><p>安装完Create React App后，你可以通过运行以下命令来创建一个新的React应用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create-react-app my-app</span><br></pre></td></tr></table></figure>

<p>将<code>my-app</code>替换为你希望的项目名称。这个命令会在当前目录下创建一个名为<code>my-app</code>的新文件夹，并设置好所有必要的文件和依赖。</p>
<h3 id="4-进入项目目录"><a href="#4-进入项目目录" class="headerlink" title="4. 进入项目目录"></a>4. 进入项目目录</h3><p>创建完项目后，使用以下命令进入项目目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-app</span><br></pre></td></tr></table></figure>

<h3 id="5-启动开发服务器"><a href="#5-启动开发服务器" class="headerlink" title="5. 启动开发服务器"></a>5. 启动开发服务器</h3><p>在项目目录中，你可以使用以下命令来启动一个开发服务器，它会在你的应用上执行热加载：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure>

<p>默认情况下，你的应用将在<code>http://localhost:3000</code>上可用。当你对代码进行更改时，开发服务器会自动重新加载页面。</p>
<h3 id="6-编写React代码"><a href="#6-编写React代码" class="headerlink" title="6. 编写React代码"></a>6. 编写React代码</h3><p>现在，你可以开始编写React代码了。打开项目中的<code>src</code>文件夹，你会看到几个预生成的文件，包括<code>index.js</code>、<code>index.html</code>和<code>App.js</code>。<code>App.js</code>是你的React应用的主要组件。</p>
<h3 id="7-构建和部署"><a href="#7-构建和部署" class="headerlink" title="7. 构建和部署"></a>7. 构建和部署</h3><p>当你准备好将你的应用部署到生产环境时，你可以使用以下命令来创建一个优化后的构建版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<p>这个命令会创建一个<code>build</code>文件夹，其中包含了所有静态文件，你可以将这些文件部署到任何静态文件服务器上，或者使用如GitHub Pages、Netlify等服务来托管你的应用。</p>
<h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>以上就是创建一个基本React项目的全部步骤。随着你对React的进一步学习，你可能会需要添加额外的依赖和工具，如路由库（如React Router）、状态管理库（如Redux或MobX）等。但Create React App提供的脚手架工具已经为你搭建了一个良好的起点，让你可以专注于编写React代码。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>打造你的HTML5打地鼠游戏：零基础入门教程</title>
    <url>/blog/2024/03/09/%E6%89%93%E9%80%A0%E4%BD%A0%E7%9A%84HTML5%E6%89%93%E5%9C%B0%E9%BC%A0%E6%B8%B8%E6%88%8F%EF%BC%9A%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="打造你的HTML5打地鼠游戏：零基础入门教程"><a href="#打造你的HTML5打地鼠游戏：零基础入门教程" class="headerlink" title="打造你的HTML5打地鼠游戏：零基础入门教程"></a>打造你的HTML5打地鼠游戏：零基础入门教程</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在这个教程中，我们将一起学习如何使用HTML、CSS和JavaScript来创建一个简单的打地鼠游戏。这不仅是一个有趣的项目，也是学习前端开发技能的绝佳方式。</p>
<blockquote>
<p><strong>体验地址</strong><br>PC端体验地址： <a href="http://8.210.131.139/mouse.html">洛可可白⚡️打地鼠</a><br>（暂时只支持键盘输入操作）</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/direct/2c8296bdef7746b18ed1da9ab795ed1c.png#pic_center" alt="在这里插入图片描述"></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>确保你的开发环境已经安装了现代浏览器，如Chrome、Firefox或Safari。我们将使用这些浏览器的开发者工具来调试和优化我们的游戏。</p>
<p>代码编辑器我推荐 <code>Visual Studio Code</code></p>
<h2 id="创建游戏结构"><a href="#创建游戏结构" class="headerlink" title="创建游戏结构"></a>创建游戏结构</h2><h3 id="1-HTML布局"><a href="#1-HTML布局" class="headerlink" title="1. HTML布局"></a>1. HTML布局</h3><p>首先，我们需要创建一个基本的HTML页面，它将包含游戏的布局和地鼠洞。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>洛可可白⚡️打地鼠<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;game-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wam-hole&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wam-mole&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wam-hole&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wam-mole&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 更多地鼠洞 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="设计游戏样式"><a href="#设计游戏样式" class="headerlink" title="设计游戏样式"></a>设计游戏样式</h2><h3 id="2-CSS样式"><a href="#2-CSS样式" class="headerlink" title="2. CSS样式"></a>2. CSS样式</h3><p>接下来，我们将使用CSS来美化我们的游戏界面。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">      <span class="comment">/* styles.css */</span></span><br><span class="line">      * &#123;</span><br><span class="line">        <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-tag">h1</span> &#123;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.bigBox</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">60%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#cbbb3e</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.wam-container</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">        <span class="attribute">justify-content</span>: center;</span><br><span class="line">        <span class="attribute">align-items</span>: center;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">260px</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.wam-hole</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#f5732d</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.wam-mole</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="comment">/* 地鼠 */</span></span><br><span class="line">        <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;https://pic.52112.com/180516/EPS180516_57/9jagBhddHW_small.jpg&quot;</span>);</span><br><span class="line">        <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">display</span>: none;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.wam-mole--up</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.wam-score</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.wam-message</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">cursor</span>: pointer;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你可以添加更多的CSS来美化地鼠洞和地鼠 */</span></span><br></pre></td></tr></table></figure>

<h2 id="实现游戏逻辑"><a href="#实现游戏逻辑" class="headerlink" title="实现游戏逻辑"></a>实现游戏逻辑</h2><h3 id="3-JavaScript编程"><a href="#3-JavaScript编程" class="headerlink" title="3. JavaScript编程"></a>3. JavaScript编程</h3><p>现在，我们将使用JavaScript来添加游戏逻辑。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.wam-container&quot;</span>);</span><br><span class="line">      <span class="keyword">const</span> scoreBoard = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.wam-score&quot;</span>);</span><br><span class="line">      <span class="keyword">const</span> message = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.wam-message&quot;</span>);</span><br><span class="line">      <span class="keyword">const</span> moles = <span class="title class_">Array</span>.<span class="title function_">from</span>(container.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.wam-hole&quot;</span>));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> lastHole;</span><br><span class="line">      <span class="keyword">let</span> score = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">let</span> isPlaying = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">let</span> timeUp = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 随机时间生成地鼠</span></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">popUpMole</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (timeUp) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">const</span> time = <span class="title class_">Math</span>.<span class="title function_">random</span>() * (<span class="number">1500</span> - <span class="number">500</span>) + <span class="number">500</span>;</span><br><span class="line">        <span class="keyword">const</span> hole = <span class="title function_">randomHole</span>(moles);</span><br><span class="line">        hole.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;wam-mole--up&quot;</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          hole.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;wam-mole--up&quot;</span>);</span><br><span class="line">          <span class="keyword">if</span> (!timeUp) <span class="title function_">popUpMole</span>();</span><br><span class="line">        &#125;, time);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 随机选择一个地鼠洞</span></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">randomHole</span>(<span class="params">holes</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> idx = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * holes.<span class="property">length</span>);</span><br><span class="line">        <span class="keyword">const</span> hole = holes[idx];</span><br><span class="line">        <span class="keyword">if</span> (hole === lastHole) <span class="keyword">return</span> <span class="title function_">randomHole</span>(holes);</span><br><span class="line">        lastHole = hole;</span><br><span class="line">        <span class="keyword">return</span> hole;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 点击地鼠</span></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">whackMole</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!e.<span class="property">isTrusted</span>) <span class="keyword">return</span>; <span class="comment">// 防止作弊</span></span><br><span class="line">        <span class="keyword">if</span> (!isPlaying) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (!e.<span class="property">target</span>.<span class="title function_">matches</span>(<span class="string">&quot;.wam-mole&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">        score++;</span><br><span class="line">        scoreBoard.<span class="property">textContent</span> = <span class="string">`分数: <span class="subst">$&#123;score&#125;</span>`</span>;</span><br><span class="line">        e.<span class="property">target</span>.<span class="property">parentNode</span></span><br><span class="line">          .<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>)</span><br><span class="line">          .<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;wam-mole--up&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 开始游戏</span></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">startGame</span>(<span class="params"></span>) &#123;</span><br><span class="line">        score = <span class="number">0</span>;</span><br><span class="line">        scoreBoard.<span class="property">textContent</span> = <span class="string">&quot;分数: 0&quot;</span>;</span><br><span class="line">        isPlaying = <span class="literal">true</span>;</span><br><span class="line">        timeUp = <span class="literal">false</span>;</span><br><span class="line">        message.<span class="property">textContent</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="title function_">popUpMole</span>();</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          isPlaying = <span class="literal">false</span>;</span><br><span class="line">          timeUp = <span class="literal">true</span>;</span><br><span class="line">          message.<span class="property">textContent</span> = <span class="string">`一分钟您的得分是: <span class="subst">$&#123;score&#125;</span>；点我再来一次！`</span>;</span><br><span class="line">        &#125;, <span class="number">60000</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 初始化地鼠洞</span></span><br><span class="line">      moles.<span class="title function_">forEach</span>(<span class="function">(<span class="params">mole</span>) =&gt;</span> mole.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, whackMole));</span><br><span class="line">      <span class="variable language_">document</span></span><br><span class="line">        .<span class="title function_">querySelector</span>(<span class="string">&quot;.wam-message&quot;</span>)</span><br><span class="line">        .<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, startGame);</span><br></pre></td></tr></table></figure>

<p>这段代码创建了一个简单的游戏循环，每秒钟随机显示一个地鼠，并在用户点击地鼠时给予反馈。你可以根据需要调整地鼠出现的速度和游戏的其他方面。</p>
<h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>洛可可白⚡️打地鼠<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bigBox</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">60%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#cbbb3e</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.wam-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">260px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.wam-hole</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#f5732d</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.wam-mole</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 地鼠 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;https://pic.52112.com/180516/EPS180516_57/9jagBhddHW_small.jpg&quot;</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.wam-mole--up</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.wam-score</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.wam-message</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>打地鼠<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bigBox&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wam-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wam-hole&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wam-mole&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wam-hole&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wam-mole&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wam-hole&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wam-mole&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wam-hole&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wam-mole&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wam-hole&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wam-mole&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wam-score&quot;</span>&gt;</span>分数: 0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wam-message&quot;</span>&gt;</span>准备好了吗？点击我开始<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.wam-container&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> scoreBoard = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.wam-score&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> message = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.wam-message&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> moles = <span class="title class_">Array</span>.<span class="title function_">from</span>(container.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.wam-hole&quot;</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> lastHole;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> score = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> isPlaying = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> timeUp = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 随机时间生成地鼠</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">popUpMole</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (timeUp) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> time = <span class="title class_">Math</span>.<span class="title function_">random</span>() * (<span class="number">1500</span> - <span class="number">500</span>) + <span class="number">500</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> hole = <span class="title function_">randomHole</span>(moles);</span></span><br><span class="line"><span class="language-javascript">        hole.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;wam-mole--up&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          hole.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;wam-mole--up&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (!timeUp) <span class="title function_">popUpMole</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;, time);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 随机选择一个地鼠洞</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">randomHole</span>(<span class="params">holes</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> idx = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * holes.<span class="property">length</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> hole = holes[idx];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (hole === lastHole) <span class="keyword">return</span> <span class="title function_">randomHole</span>(holes);</span></span><br><span class="line"><span class="language-javascript">        lastHole = hole;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> hole;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 点击地鼠</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">whackMole</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!e.<span class="property">isTrusted</span>) <span class="keyword">return</span>; <span class="comment">// 防止作弊</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!isPlaying) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!e.<span class="property">target</span>.<span class="title function_">matches</span>(<span class="string">&quot;.wam-mole&quot;</span>)) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        score++;</span></span><br><span class="line"><span class="language-javascript">        scoreBoard.<span class="property">textContent</span> = <span class="string">`分数: <span class="subst">$&#123;score&#125;</span>`</span>;</span></span><br><span class="line"><span class="language-javascript">        e.<span class="property">target</span>.<span class="property">parentNode</span></span></span><br><span class="line"><span class="language-javascript">          .<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">          .<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;wam-mole--up&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 开始游戏</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">startGame</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        score = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">        scoreBoard.<span class="property">textContent</span> = <span class="string">&quot;分数: 0&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        isPlaying = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">        timeUp = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">        message.<span class="property">textContent</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">popUpMole</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          isPlaying = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">          timeUp = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">          message.<span class="property">textContent</span> = <span class="string">`一分钟您的得分是: <span class="subst">$&#123;score&#125;</span>；点我再来一次！`</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">60000</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 初始化地鼠洞</span></span></span><br><span class="line"><span class="language-javascript">      moles.<span class="title function_">forEach</span>(<span class="function">(<span class="params">mole</span>) =&gt;</span> mole.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, whackMole));</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span></span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">querySelector</span>(<span class="string">&quot;.wam-message&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, startGame);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>恭喜你，现在你已经创建了一个基本的打地鼠游戏！这个游戏可以作为一个起点，你可以添加计分系统、动画效果、音效等来提升游戏体验。记得保存你的代码，并在浏览器中打开HTML文件来查看游戏效果。祝你编程愉快！</p>
<p>感谢你的访问，期待与你在技术的道路上相遇！👋🌟🚀</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>打字通小游戏制作教程：用HTML5和JavaScript提升打字速度</title>
    <url>/blog/2024/03/11/%E6%89%93%E5%AD%97%E9%80%9A%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E6%95%99%E7%A8%8B%EF%BC%9A%E7%94%A8HTML5%E5%92%8CJavaScript%E6%8F%90%E5%8D%87%E6%89%93%E5%AD%97%E9%80%9F%E5%BA%A6/</url>
    <content><![CDATA[<h1 id="打字通小游戏制作教程：用HTML5和JavaScript提升打字速度"><a href="#打字通小游戏制作教程：用HTML5和JavaScript提升打字速度" class="headerlink" title="打字通小游戏制作教程：用HTML5和JavaScript提升打字速度"></a>打字通小游戏制作教程：用HTML5和JavaScript提升打字速度</h1><p>在这篇文章中，我们将一起学习如何使用HTML5和JavaScript来制作一个简单的打字通小游戏。这个小游戏可以帮助用户练习打字速度和准确性。通过这个教程，你将了解如何创建游戏界面、处理用户输入、实现倒计时以及计算得分。即使你是编程新手，也能跟随步骤完成这个项目。</p>
<h2 id="体验地址"><a href="#体验地址" class="headerlink" title="体验地址"></a>体验地址</h2><blockquote>
<p><a href="http://8.210.131.139/typeman.html">洛可可白⚡️打字通</a><br><img src="https://img-blog.csdnimg.cn/direct/c744148bf610457b97f5d619a14e797d.png#pic_center" alt="在这里插入图片描述"></p>
</blockquote>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先，确保你的计算机上安装了文本编辑器，如Notepad++、Sublime Text或Visual Studio Code。这些工具将帮助你编写和编辑代码。</p>
<h2 id="创建HTML结构"><a href="#创建HTML结构" class="headerlink" title="创建HTML结构"></a>创建HTML结构</h2><p>打开你的文本编辑器，创建一个新的HTML文件，并输入以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>洛可可白打字通<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 在这里添加CSS样式 */</span></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bigBox&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span>你准备好了吗？<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">placeholder</span>=<span class="string">&quot;开始输入...&quot;</span> <span class="attr">style</span>=<span class="string">&quot;resize: none&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;operate&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>开始<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;timer&quot;</span>&gt;</span>60<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 在这里添加JavaScript代码</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这是我们游戏的基本结构。<code>&lt;head&gt;</code>部分包含了页面的元数据和样式定义，<code>&lt;body&gt;</code>部分则是游戏的主要内容。</p>
<h2 id="添加CSS样式"><a href="#添加CSS样式" class="headerlink" title="添加CSS样式"></a>添加CSS样式</h2><p>在<code>&lt;style&gt;</code>标签内，我们将添加一些CSS样式来美化我们的打字通游戏。这包括游戏容器、文本区域、按钮和计时器的样式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    -moz-user-select: none;</span><br><span class="line">    -webkit-user-select: none;</span><br><span class="line">    -ms-user-select: none;</span><br><span class="line">    -khtml-user-select: none;</span><br><span class="line">    -o-user-select: none;</span><br><span class="line">    user-select: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bigBox</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ac8c3e</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">40px</span> auto;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">30px</span> <span class="number">9px</span> <span class="number">#939393</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.operate</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#007bff</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#timer</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">48px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="编写JavaScript逻辑"><a href="#编写JavaScript逻辑" class="headerlink" title="编写JavaScript逻辑"></a>编写JavaScript逻辑</h2><p>现在，我们将在<code>&lt;script&gt;</code>标签内添加JavaScript代码，这是游戏的核心部分。我们将创建游戏文本、初始化游戏、处理用户输入、实现倒计时以及计算得分。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> text = <span class="string">&quot;Believe in yourself and all that you are...&quot;</span>; <span class="comment">// 游戏文本</span></span><br><span class="line"><span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.container&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;textarea&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> timer = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;timer&quot;</span>);</span><br><span class="line">input.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> countdown;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">startGame</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 游戏开始后，禁用按钮</span></span><br><span class="line">    button.<span class="property">disabled</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示文本</span></span><br><span class="line">    container.<span class="property">textContent</span> = text;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动倒计时</span></span><br><span class="line">    countdown = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> remainingTime = <span class="built_in">parseInt</span>(timer.<span class="property">textContent</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (remainingTime === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 时间用完，游戏结束</span></span><br><span class="line">            <span class="title function_">endGame</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        timer.<span class="property">textContent</span> = remainingTime;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">endGame</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 停止倒计时</span></span><br><span class="line">    <span class="built_in">clearInterval</span>(countdown);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算得分</span></span><br><span class="line">    <span class="keyword">const</span> score = <span class="title function_">calculateScore</span>();</span><br><span class="line">    <span class="keyword">const</span> scoreMessage = <span class="string">`你的得分是 <span class="subst">$&#123;score&#125;</span> 分！`</span>;</span><br><span class="line">    container.<span class="property">textContent</span> = scoreMessage;</span><br><span class="line"></span><br><span class="line">    button.<span class="property">disabled</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculateScore</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> userText = input.<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line">    <span class="keyword">const</span> correctText = text.<span class="title function_">trim</span>();</span><br><span class="line">    <span class="keyword">const</span> userWords = userText.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> correctWords = correctText.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; userWords.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (userWords[i] === correctWords[i]) &#123;</span><br><span class="line">            score++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加按钮点击事件监听器</span></span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置倒计时时间</span></span><br><span class="line">    timer.<span class="property">textContent</span> = <span class="string">&quot;60&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空输入框和输出文本区域</span></span><br><span class="line">    input.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    container.<span class="property">textContent</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动游戏</span></span><br><span class="line">    <span class="title function_">startGame</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在这个脚本中，我们首先定义了游戏的文本。然后，我们创建了开始游戏的函数<code>startGame</code>，它将显示游戏文本并启动倒计时。我们还定义了结束游戏的函数<code>endGame</code>，它将停止倒计时并计算得分。<code>calculateScore</code>函数用于计算用户的得分。最后，我们为开始按钮添加了一个点击事件监听器，当用户点击按钮时，游戏将开始。</p>
<h2 id="测试游戏"><a href="#测试游戏" class="headerlink" title="测试游戏"></a>测试游戏</h2><p>保存你的HTML文件，并在浏览器中打开它。你应该能看到一个打字通游戏的界面。点击“开始”按钮，游戏将开始，你可以尝试在限定时间内尽可能准确地输入显示的文本。时间结束后，你的得分将被计算出来。</p>
<h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>洛可可白⚡️打字通<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        -moz-user-select: none;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*火狐*/</span></span></span><br><span class="line"><span class="language-css">        -webkit-user-select: none;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*webkit浏览器*/</span></span></span><br><span class="line"><span class="language-css">        -ms-user-select: none;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*IE10*/</span></span></span><br><span class="line"><span class="language-css">        -khtml-user-select: none;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*早期浏览器*/</span></span></span><br><span class="line"><span class="language-css">        -o-user-select: none;</span></span><br><span class="line"><span class="language-css">        user-select: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bigBox</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ac8c3e</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">40px</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">30px</span> <span class="number">9px</span> <span class="number">#939393</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">textarea</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.operate</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">20%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#007bff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#timer</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">48px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bigBox&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span>你准备好了吗？<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">textarea</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">placeholder</span>=<span class="string">&quot;开始输入...&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;resize: none&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;operate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>开始<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;timer&quot;</span>&gt;</span>60<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> text =</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;Believe in yourself and all that you are. Know that there is something inside you that is greater than any obstacle. This quote by Christian D. Larson reminds us that we all have the power within us to overcome any obstacle we may face. When we have confidence in ourselves and our abilities, we can achieve great things. So, let&#x27;s trust ourselves, believe in our dreams, and work hard to make them a reality.&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.container&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;textarea&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;button&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> timer = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;timer&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      input.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> countdown;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">startGame</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 游戏开始后，禁用按钮</span></span></span><br><span class="line"><span class="language-javascript">        button.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 显示文本</span></span></span><br><span class="line"><span class="language-javascript">        container.<span class="property">textContent</span> = text;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 启动倒计时</span></span></span><br><span class="line"><span class="language-javascript">        countdown = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> remainingTime = <span class="built_in">parseInt</span>(timer.<span class="property">textContent</span>) - <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (remainingTime === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 时间用完，游戏结束</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">endGame</span>();</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          timer.<span class="property">textContent</span> = remainingTime;</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">endGame</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 停止倒计时</span></span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">clearInterval</span>(countdown);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 计算得分</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> score = <span class="title function_">calculateScore</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> scoreMessage = <span class="string">`你的得分是 <span class="subst">$&#123;score&#125;</span> 分！`</span>;</span></span><br><span class="line"><span class="language-javascript">        container.<span class="property">textContent</span> = scoreMessage;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        button.<span class="property">disabled</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">calculateScore</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> userText = input.<span class="property">value</span>.<span class="title function_">trim</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> correctText = text.<span class="title function_">trim</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> userWords = userText.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> correctWords = correctText.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> score = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; userWords.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(userWords[i], correctWords[i]);</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (userWords[i] === correctWords[i]) &#123;</span></span><br><span class="line"><span class="language-javascript">            score++;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> score;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 添加按钮点击事件监听器</span></span></span><br><span class="line"><span class="language-javascript">      button.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 设置倒计时时间</span></span></span><br><span class="line"><span class="language-javascript">        timer.<span class="property">textContent</span> = <span class="string">&quot;60&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 清空输入框和输出文本区域</span></span></span><br><span class="line"><span class="language-javascript">        input.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        container.<span class="property">textContent</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 启动游戏</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">startGame</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="🎉-结语"><a href="#🎉-结语" class="headerlink" title="🎉 结语"></a>🎉 结语</h2><p>恭喜你，你已经成功创建了一个打字通小游戏！这个教程涵盖了从创建基本的HTML结构到添加CSS样式，再到编写JavaScript交互逻辑的全过程。通过这个项目，你不仅学会了如何制作一个小游戏，还对前端开发有了基本的了解。随着你技能的提升，你可以尝试添加更多的功能，比如记录用户的最佳得分、添加音效或者实现更复杂的游戏逻辑。祝你编程愉快！<br><strong><strong>如果对你有帮助，点赞、收藏、关注是我更新的动力！👋🌟🚀</strong></strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>打造精美响应式CSS日历：从基础到高级样式</title>
    <url>/blog/2024/03/19/%E6%89%93%E9%80%A0%E7%B2%BE%E7%BE%8E%E5%93%8D%E5%BA%94%E5%BC%8FCSS%E6%97%A5%E5%8E%86%EF%BC%9A%E4%BB%8E%E5%9F%BA%E7%A1%80%E5%88%B0%E9%AB%98%E7%BA%A7%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="打造精美响应式CSS日历：从基础到高级样式"><a href="#打造精美响应式CSS日历：从基础到高级样式" class="headerlink" title="打造精美响应式CSS日历：从基础到高级样式"></a>打造精美响应式CSS日历：从基础到高级样式</h1><p>在这篇文章中，我们将学习如何使用HTML和CSS创建一个简洁而美观的日历样式。我们将从基础的日历结构开始，逐步添加样式，并使用CSS的媒体查询为不同屏幕尺寸进行适配。通过本教程，您将掌握如何制作一个响应式的日历，它不仅能够在桌面上展示，也能很好地适应移动设备。</p>
<blockquote>
<p>效果预览：</p>
</blockquote>
<h2 id="1-创建日历的基本结构"><a href="#1-创建日历的基本结构" class="headerlink" title="1. 创建日历的基本结构"></a>1. 创建日历的基本结构</h2><p>首先，我们需要创建日历的HTML结构。日历由三个主要部分组成：月份和年份的标题、星期的简称、以及日期列表。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;month&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;prev&quot;</span>&gt;</span>❮<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;next&quot;</span>&gt;</span>❯<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center&quot;</span>&gt;</span></span><br><span class="line">            August<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-size:18px&quot;</span>&gt;</span>2016<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;weekdays&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Mo<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tu<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>We<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Th<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Fr<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Sa<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Su<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;days&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日期列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-添加CSS样式"><a href="#2-添加CSS样式" class="headerlink" title="2. 添加CSS样式"></a>2. 添加CSS样式</h2><p>接下来，我们将使用CSS为日历添加样式。我们将设置基本的样式，如字体、背景色、文本对齐等，并使用伪类和伪元素来添加箭头图标。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 基础样式 */</span></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>: none;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Verdana, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 月份和年份样式 */</span></span><br><span class="line"><span class="selector-class">.month</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">70px</span> <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#1abc9c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.month</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 星期样式 */</span></span><br><span class="line"><span class="selector-class">.weekdays</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ddd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.weekdays</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">13.6%</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 日期样式 */</span></span><br><span class="line"><span class="selector-class">.days</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.days</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">13.6%</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#777</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 当前日期样式 */</span></span><br><span class="line"><span class="selector-class">.days</span> <span class="selector-tag">li</span> <span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#1abc9c</span>;</span><br><span class="line">    <span class="attribute">color</span>: white <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-响应式设计"><a href="#3-响应式设计" class="headerlink" title="3. 响应式设计"></a>3. 响应式设计</h2><p>为了使日历在不同设备上都能良好展示，我们将使用CSS的媒体查询来调整小屏幕设备上的布局。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">720px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.weekdays</span> <span class="selector-tag">li</span>,</span><br><span class="line">    <span class="selector-class">.days</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">13.1%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">420px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.weekdays</span> <span class="selector-tag">li</span>,</span><br><span class="line">    <span class="selector-class">.days</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">12.5%</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.days</span> <span class="selector-tag">li</span> <span class="selector-class">.active</span> &#123;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">2px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">290px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.weekdays</span> <span class="selector-tag">li</span>,</span><br><span class="line">    <span class="selector-class">.days</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">12.2%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-完善日历功能"><a href="#4-完善日历功能" class="headerlink" title="4. 完善日历功能"></a>4. 完善日历功能</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> days = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.days li span&#x27;</span>);</span><br><span class="line">            days.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">day</span>) &#123;</span><br><span class="line">                day.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Date clicked&#x27;</span>);</span><br><span class="line">                    <span class="comment">// 移除其他日期的激活状态</span></span><br><span class="line">                    days.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">el</span>) &#123;</span><br><span class="line">                        el.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="comment">// 为被点击的日期添加激活状态</span></span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 1. contextmenu 可以禁用右键菜单</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;contextmenu&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">            e.<span class="title function_">preventDefault</span>();</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 2. 禁止选中文字 selectstart</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;selectstart&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">            e.<span class="title function_">preventDefault</span>();</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>

<p>为了使日历更加实用，我们可以添加一些交互功能，例如点击月份和年份切换视图，以及点击日期弹出事件详情。这将需要使用JavaScript来实现，但在本教程中，我们专注于使用CSS创建样式。</p>
<h2 id="5-全部代码"><a href="#5-全部代码" class="headerlink" title="5. 全部代码"></a>5. 全部代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS 日历样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style-type</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: Verdana, sans-serif;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.month</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">70px</span> <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#1abc9c</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.month</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.month</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-transform</span>: uppercase;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">letter-spacing</span>: <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.month</span> <span class="selector-class">.prev</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.month</span> <span class="selector-class">.next</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.weekdays</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.weekdays</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">13.6%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#666</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.days</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.days</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style-type</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">13.6%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#777</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.days</span> <span class="selector-tag">li</span> <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#1abc9c</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white <span class="meta">!important</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* Add media queries for smaller screens */</span></span></span><br><span class="line"><span class="language-css">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">720px</span>) &#123;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.weekdays</span> <span class="selector-tag">li</span>,</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.days</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">13.1%</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">420px</span>) &#123;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.weekdays</span> <span class="selector-tag">li</span>,</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.days</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">12.5%</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.days</span> <span class="selector-tag">li</span> <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">padding</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">290px</span>) &#123;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.weekdays</span> <span class="selector-tag">li</span>,</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.days</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">12.2%</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>CSS 日历<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;month&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;prev&quot;</span>&gt;</span>❮<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;next&quot;</span>&gt;</span>❯<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center&quot;</span>&gt;</span></span><br><span class="line">                March<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-size:18px&quot;</span>&gt;</span>2024<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;weekdays&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Mo<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tu<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>We<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Th<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Fr<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Sa<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Su<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;days&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>5<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>6<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>7<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>8<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>9<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>11<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>12<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>13<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>14<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>15<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>16<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>17<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>18<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>19<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>20<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>21<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>22<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>23<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>24<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>25<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>26<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>27<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>28<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>29<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>30<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>31<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> days = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.days li span&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            days.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">day</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                day.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Date clicked&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 只有当日期未被激活时才进行操作</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 移除其他日期的激活状态</span></span></span><br><span class="line"><span class="language-javascript">                    days.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">el</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        el.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 为被点击的日期添加激活状态</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. contextmenu 可以禁用右键菜单</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;contextmenu&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 禁止选中文字 selectstart</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;selectstart&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="🎉-结语"><a href="#🎉-结语" class="headerlink" title="🎉 结语"></a>🎉 结语</h2><p>通过本教程，您已经学会了如何使用HTML和CSS、JavaScript创建一个基本的日历样式，并使其响应式地适应不同屏幕尺寸。您可以在此基础上添加更多的功能和样式，以满足您的具体需求。记得在实际项目中测试日历在不同浏览器和设备上的兼容性，确保所有用户都能获得良好的体验。</p>
<p><strong>如果对你有帮助，点赞、收藏、关注是我更新的动力！👋🌟🚀</strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>打造经典游戏：HTML5与CSS3实现俄罗斯方块</title>
    <url>/blog/2024/03/08/%E6%89%93%E9%80%A0%E7%BB%8F%E5%85%B8%E6%B8%B8%E6%88%8F%EF%BC%9AHTML5%E4%B8%8ECSS3%E5%AE%9E%E7%8E%B0%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/</url>
    <content><![CDATA[<h1 id="打造经典游戏：HTML5与CSS3实现俄罗斯方块"><a href="#打造经典游戏：HTML5与CSS3实现俄罗斯方块" class="headerlink" title="打造经典游戏：HTML5与CSS3实现俄罗斯方块"></a>打造经典游戏：HTML5与CSS3实现俄罗斯方块</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>俄罗斯方块是一款经典的电子游戏，它不仅考验玩家的反应速度，还能锻炼逻辑思维能力。本文将指导你如何使用HTML5、CSS3和JavaScript来创建一个简单的俄罗斯方块游戏。我们将从游戏的基本结构开始，逐步构建游戏逻辑，并在最后提供一个完整的代码示例。</p>
<h2 id="1-体验地址"><a href="#1-体验地址" class="headerlink" title="1.体验地址"></a>1.体验地址</h2><blockquote>
<p>PC端体验地址：<a href="http://8.210.131.139/">洛可可白⚡️俄罗斯方块</a></p>
<p>（暂时只支持键盘输入操作）</p>
</blockquote>
<h2 id="2-创建游戏界面"><a href="#2-创建游戏界面" class="headerlink" title="2. 创建游戏界面"></a>2. 创建游戏界面</h2><p>首先，我们需要创建一个HTML页面，用于展示游戏的界面。这包括游戏板、得分显示以及游戏控制区域。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... 其他头部代码 ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* ... 样式代码 ... */</span></span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>俄罗斯方块<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tetris&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;game-board&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;score&quot;</span>&gt;</span>Score: <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;score-value&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... 脚本代码 ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-初始化游戏"><a href="#3-初始化游戏" class="headerlink" title="3. 初始化游戏"></a>3. 初始化游戏</h2><p>在JavaScript中，我们首先初始化游戏状态，包括游戏板、得分、当前形状等。我们还需要创建一个函数来生成随机的形状。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ... 其他代码 ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createShape</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ... 生成随机形状的代码 ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化游戏状态</span></span><br><span class="line"><span class="keyword">const</span> boardGrid = <span class="title function_">initializeBoard</span>();</span><br><span class="line"><span class="keyword">let</span> score = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> currentShape = <span class="title function_">createShape</span>();</span><br><span class="line"><span class="keyword">let</span> currentRow = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> currentCol = <span class="title class_">Math</span>.<span class="title function_">floor</span>(cols / <span class="number">2</span>) - <span class="title class_">Math</span>.<span class="title function_">floor</span>(currentShape[<span class="number">0</span>].<span class="property">length</span> / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 其他代码 ...</span></span><br></pre></td></tr></table></figure>

<h2 id="4-绘制游戏板"><a href="#4-绘制游戏板" class="headerlink" title="4. 绘制游戏板"></a>4. 绘制游戏板</h2><p>我们需要编写函数来绘制游戏板和当前形状。这些函数将在游戏开始时和每次形状移动时调用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ... 其他代码 ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">drawBoard</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ... 绘制游戏板的代码 ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">drawCurrentShape</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ... 绘制当前形状的代码 ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 其他代码 ...</span></span><br></pre></td></tr></table></figure>

<h2 id="5-游戏逻辑"><a href="#5-游戏逻辑" class="headerlink" title="5. 游戏逻辑"></a>5. 游戏逻辑</h2><p>游戏的核心逻辑包括移动形状、检查碰撞、合并形状、清除行和更新得分。我们还需要处理键盘事件，以便玩家可以控制形状的移动和旋转。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ... 其他代码 ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkCollision</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ... 检查碰撞的代码 ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mergeShape</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ... 合并形状的代码 ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clearRows</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ... 清除行的代码 ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateScore</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ... 更新得分的代码 ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 其他代码 ...</span></span><br></pre></td></tr></table></figure>

<h2 id="6-开始游戏"><a href="#6-开始游戏" class="headerlink" title="6. 开始游戏"></a>6. 开始游戏</h2><p>最后，我们设置一个定时器来自动下落形状，并添加键盘事件监听器来处理玩家的输入。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ... 其他代码 ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">startGame</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ... 初始化游戏的代码 ...</span></span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">moveDown</span>();</span><br><span class="line">    <span class="title function_">drawBoard</span>();</span><br><span class="line">    <span class="title function_">drawCurrentShape</span>();</span><br><span class="line">  &#125;, <span class="number">500</span>);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;keydown&quot;</span>, handleKeyPress);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">startGame</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 其他代码 ...</span></span><br></pre></td></tr></table></figure>

<h2 id="7-全部代码"><a href="#7-全部代码" class="headerlink" title="7.全部代码"></a>7.全部代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>洛可可白⚡️俄罗斯方块<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">h2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">19px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#tetris</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">240px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#d5d5d5</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#game-board</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">4px</span> solid <span class="number">#4b6014</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#f4f126</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#score</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.block</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#3a3a3a</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>俄罗斯方块<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tetris&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;game-board&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;score&quot;</span>&gt;</span>Score: <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;score-value&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> board = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;game-board&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> scoreValue = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;score-value&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> blockSize = <span class="number">20</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> rows = <span class="number">20</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> cols = <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> score = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> boardGrid = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(rows), <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">Array</span>(cols).<span class="title function_">fill</span>(<span class="number">0</span>));</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> currentShape;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> currentRow;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> currentCol;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">createShape</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> shapes = [</span></span><br><span class="line"><span class="language-javascript">          [[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]],</span></span><br><span class="line"><span class="language-javascript">          [</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>, <span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>, <span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">          ],</span></span><br><span class="line"><span class="language-javascript">          [</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">          ],</span></span><br><span class="line"><span class="language-javascript">          [</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">          ],</span></span><br><span class="line"><span class="language-javascript">          [</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">          ],</span></span><br><span class="line"><span class="language-javascript">          [</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">          ],</span></span><br><span class="line"><span class="language-javascript">          [</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">          ],</span></span><br><span class="line"><span class="language-javascript">        ];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> randomIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * shapes.<span class="property">length</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> shape = shapes[randomIndex];</span></span><br><span class="line"><span class="language-javascript">        currentShape = shape;</span></span><br><span class="line"><span class="language-javascript">        currentRow = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">        currentCol = <span class="title class_">Math</span>.<span class="title function_">floor</span>(cols / <span class="number">2</span>) - <span class="title class_">Math</span>.<span class="title function_">floor</span>(shape[<span class="number">0</span>].<span class="property">length</span> / <span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">drawBoard</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        board.<span class="property">innerHTML</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">0</span>; row &lt; rows; row++) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; cols; col++) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (boardGrid[row][col]) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">const</span> block = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">              block.<span class="property">className</span> = <span class="string">&quot;block&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">              block.<span class="property">style</span>.<span class="property">top</span> = row * blockSize + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">              block.<span class="property">style</span>.<span class="property">left</span> = col * blockSize + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">              board.<span class="title function_">appendChild</span>(block);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">drawCurrentShape</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">0</span>; row &lt; currentShape.<span class="property">length</span>; row++) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; currentShape[row].<span class="property">length</span>; col++) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (currentShape[row][col]) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">const</span> block = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">              block.<span class="property">className</span> = <span class="string">&quot;block&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">              block.<span class="property">style</span>.<span class="property">top</span> = (currentRow + row) * blockSize + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">              block.<span class="property">style</span>.<span class="property">left</span> = (currentCol + col) * blockSize + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">              board.<span class="title function_">appendChild</span>(block);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">checkCollision</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">0</span>; row &lt; currentShape.<span class="property">length</span>; row++) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; currentShape[row].<span class="property">length</span>; col++) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (currentShape[row][col]) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">const</span> newRow = currentRow + row;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">const</span> newCol = currentCol + col;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">if</span> (</span></span><br><span class="line"><span class="language-javascript">                newRow &gt;= rows ||</span></span><br><span class="line"><span class="language-javascript">                newCol &lt; <span class="number">0</span> ||</span></span><br><span class="line"><span class="language-javascript">                newCol &gt;= cols ||</span></span><br><span class="line"><span class="language-javascript">                boardGrid[newRow][newCol]</span></span><br><span class="line"><span class="language-javascript">              ) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">mergeShape</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">0</span>; row &lt; currentShape.<span class="property">length</span>; row++) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; currentShape[row].<span class="property">length</span>; col++) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (currentShape[row][col]) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">const</span> newRow = currentRow + row;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">const</span> newCol = currentCol + col;</span></span><br><span class="line"><span class="language-javascript">              boardGrid[newRow][newCol] = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">clearRows</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> row = rows - <span class="number">1</span>; row &gt;= <span class="number">0</span>; row--) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (boardGrid[row].<span class="title function_">every</span>(<span class="function">(<span class="params">cell</span>) =&gt;</span> cell)) &#123;</span></span><br><span class="line"><span class="language-javascript">            boardGrid.<span class="title function_">splice</span>(row, <span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">            boardGrid.<span class="title function_">unshift</span>(<span class="keyword">new</span> <span class="title class_">Array</span>(cols).<span class="title function_">fill</span>(<span class="number">0</span>));</span></span><br><span class="line"><span class="language-javascript">            score++;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">updateScore</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        scoreValue.<span class="property">textContent</span> = score;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">moveDown</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        currentRow++;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="title function_">checkCollision</span>()) &#123;</span></span><br><span class="line"><span class="language-javascript">          currentRow--;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">mergeShape</span>();</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">clearRows</span>();</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">updateScore</span>();</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">createShape</span>();</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (<span class="title function_">checkCollision</span>()) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">gameOver</span>();</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">moveLeft</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        currentCol--;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="title function_">checkCollision</span>()) &#123;</span></span><br><span class="line"><span class="language-javascript">          currentCol++;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">moveRight</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        currentCol++;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="title function_">checkCollision</span>()) &#123;</span></span><br><span class="line"><span class="language-javascript">          currentCol--;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">rotateShape</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> rotatedShape = currentShape[<span class="number">0</span>].<span class="title function_">map</span>(<span class="function">(<span class="params">_, colIndex</span>) =&gt;</span></span></span><br><span class="line"><span class="language-javascript">          currentShape.<span class="title function_">map</span>(<span class="function">(<span class="params">row</span>) =&gt;</span> row[colIndex]).<span class="title function_">reverse</span>()</span></span><br><span class="line"><span class="language-javascript">        );</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> prevShape = currentShape;</span></span><br><span class="line"><span class="language-javascript">        currentShape = rotatedShape;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="title function_">checkCollision</span>()) &#123;</span></span><br><span class="line"><span class="language-javascript">          currentShape = prevShape;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">gameOver</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;Game Over&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">resetGame</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">resetGame</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        score = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">        boardGrid = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(rows), <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">Array</span>(cols).<span class="title function_">fill</span>(<span class="number">0</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">updateScore</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">createShape</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">handleKeyPress</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">switch</span> (event.<span class="property">key</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">case</span> <span class="string">&quot;ArrowDown&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">moveDown</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">case</span> <span class="string">&quot;ArrowLeft&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">moveLeft</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">case</span> <span class="string">&quot;ArrowRight&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">moveRight</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">case</span> <span class="string">&quot;ArrowUp&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">rotateShape</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">drawBoard</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">drawCurrentShape</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">startGame</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">createShape</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">moveDown</span>();</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">drawBoard</span>();</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">drawCurrentShape</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">500</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;keydown&quot;</span>, handleKeyPress);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">startGame</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="🎉-结语"><a href="#🎉-结语" class="headerlink" title="🎉 结语"></a>🎉 结语</h2><p>通过本文的教程，你已经学会了如何使用HTML5、CSS3和JavaScript来创建一个基本的俄罗斯方块游戏。这个项目不仅能够帮助你巩固前端开发的技能，还能让你对游戏开发有一个初步的了解。你可以在此基础上添加更多功能，比如增加难度级别、添加音效或者实现多人游戏模式，来提升游戏体验。</p>
<p>感谢你的访问，期待与你在技术的道路上相遇！👋🌟🚀</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>扫雷小游戏制作教程：用HTML5和JavaScript打造经典游戏</title>
    <url>/blog/2024/03/11/%E6%89%AB%E9%9B%B7%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E6%95%99%E7%A8%8B%EF%BC%9A%E7%94%A8HTML5%E5%92%8CJavaScript%E6%89%93%E9%80%A0%E7%BB%8F%E5%85%B8%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<h1 id="扫雷小游戏制作教程：用HTML5和JavaScript打造经典游戏"><a href="#扫雷小游戏制作教程：用HTML5和JavaScript打造经典游戏" class="headerlink" title="扫雷小游戏制作教程：用HTML5和JavaScript打造经典游戏"></a>扫雷小游戏制作教程：用HTML5和JavaScript打造经典游戏</h1><p>在这篇文章中，我们将一起学习如何使用HTML5和JavaScript来制作一个经典的扫雷小游戏。通过这个教程，你将了解如何创建游戏界面、处理用户交互以及实现游戏逻辑。即使你是编程新手，也能跟随步骤完成这个项目。</p>
<h2 id="体验地址"><a href="#体验地址" class="headerlink" title="体验地址"></a>体验地址</h2><blockquote>
<p><a href="http://8.210.131.139/clearance.html">洛可可白⚡️扫雷</a><br><img src="https://img-blog.csdnimg.cn/direct/cbb6f3a0c2b94b1490de1d4844119585.png#pic_center" alt="在这里插入图片描述"></p>
</blockquote>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先，确保你的计算机上安装了文本编辑器，如Notepad++、Sublime Text或Visual Studio Code。这些工具将帮助你编写和编辑代码。</p>
<h2 id="创建HTML结构"><a href="#创建HTML结构" class="headerlink" title="创建HTML结构"></a>创建HTML结构</h2><p>打开你的文本编辑器，创建一个新的HTML文件，并输入以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>洛可可白扫雷<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 在这里添加CSS样式 */</span></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bigBox&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;controls&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;level&quot;</span>&gt;</span>难度级别：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;level&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;easy&quot;</span>&gt;</span>简单<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;medium&quot;</span>&gt;</span>中等<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;hard&quot;</span>&gt;</span>困难<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重新开始<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;board&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 在这里添加JavaScript代码</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这是我们游戏的基本结构。<code>&lt;head&gt;</code>部分包含了页面的元数据和样式定义，<code>&lt;body&gt;</code>部分则是游戏的主要内容。</p>
<h2 id="添加CSS样式"><a href="#添加CSS样式" class="headerlink" title="添加CSS样式"></a>添加CSS样式</h2><p>在<code>&lt;style&gt;</code>标签内，我们将添加一些CSS样式来美化我们的扫雷游戏。这包括游戏布局、控制面板和表格样式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 游戏布局样式 */</span></span><br><span class="line"><span class="selector-class">.bigBox</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">163</span>, <span class="number">159</span>, <span class="number">159</span>);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">40%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5%</span> auto;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#reset</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">td</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="编写JavaScript逻辑"><a href="#编写JavaScript逻辑" class="headerlink" title="编写JavaScript逻辑"></a>编写JavaScript逻辑</h2><p>现在，我们将在<code>&lt;script&gt;</code>标签内添加JavaScript代码，这是游戏的核心部分。我们将创建游戏参数配置、初始化游戏、处理用户点击事件、检查游戏胜利条件等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 游戏参数配置</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    <span class="attr">easy</span>: &#123;</span><br><span class="line">        <span class="attr">rows</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="attr">cols</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="attr">mines</span>: <span class="number">10</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">medium</span>: &#123;</span><br><span class="line">        <span class="attr">rows</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">cols</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">mines</span>: <span class="number">20</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">hard</span>: &#123;</span><br><span class="line">        <span class="attr">rows</span>: <span class="number">12</span>,</span><br><span class="line">        <span class="attr">cols</span>: <span class="number">12</span>,</span><br><span class="line">        <span class="attr">mines</span>: <span class="number">30</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化游戏</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...（省略代码以节省空间，详见原代码）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户点击格子的处理函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clickCell</span>(<span class="params">row, col</span>) &#123;</span><br><span class="line">    <span class="comment">// ...（省略代码以节省空间，详见原代码）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新地雷数目显示</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateMinesCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...（省略代码以节省空间，详见原代码）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示游戏结束</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showGameOver</span>(<span class="params">win</span>) &#123;</span><br><span class="line">    <span class="comment">// ...（省略代码以节省空间，详见原代码）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查游戏是否胜利</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkWin</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...（省略代码以节省空间，详见原代码）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化游戏</span></span><br><span class="line"><span class="title function_">init</span>();</span><br></pre></td></tr></table></figure>

<p>在这个脚本中，我们首先定义了游戏的难度级别配置，然后创建了初始化游戏的函数<code>init</code>。我们还定义了处理用户点击事件的函数<code>clickCell</code>，更新地雷数目的函数<code>updateMinesCount</code>，显示游戏结束的函数<code>showGameOver</code>，以及检查游戏胜利条件的函数<code>checkWin</code>。最后，我们调用<code>init</code>函数来初始化游戏。</p>
<h2 id="测试游戏"><a href="#测试游戏" class="headerlink" title="测试游戏"></a>测试游戏</h2><p>保存你的HTML文件，并在浏览器中打开它。你应该能看到一个扫雷游戏的界面。选择难度级别后，点击格子开始游戏。如果你踩到地雷，游戏会结束；如果你成功避开所有地雷，恭喜你，你赢了！</p>
<h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>洛可可白⚡️扫雷<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 游戏布局样式 */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bigBox</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">163</span>, <span class="number">159</span>, <span class="number">159</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">40%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">5%</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#reset</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">30px</span> auto;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">vertical-align</span>: middle;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 控制面板样式 */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#controls</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bigBox&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;controls&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;level&quot;</span>&gt;</span>难度级别：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;level&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;easy&quot;</span>&gt;</span>简单<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;medium&quot;</span>&gt;</span>中等<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;hard&quot;</span>&gt;</span>困难<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重新开始<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;board&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 游戏参数配置</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> config = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">easy</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">rows</span>: <span class="number">8</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">cols</span>: <span class="number">8</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">mines</span>: <span class="number">10</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">medium</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">rows</span>: <span class="number">10</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">cols</span>: <span class="number">10</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">mines</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">hard</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">rows</span>: <span class="number">12</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">cols</span>: <span class="number">12</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">mines</span>: <span class="number">30</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 初始化游戏</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> board = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;board&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> level = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;level&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> reset = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;reset&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> cells = [];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> gameover = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> minesLeft = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> minesCount = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> rows, cols, mines;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    reset.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, init);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    level.<span class="title function_">addEventListener</span>(<span class="string">&quot;change&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">init</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 初始化游戏参数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> levelConfig = config[level.<span class="property">value</span>];</span></span><br><span class="line"><span class="language-javascript">      rows = levelConfig.<span class="property">rows</span>;</span></span><br><span class="line"><span class="language-javascript">      cols = levelConfig.<span class="property">cols</span>;</span></span><br><span class="line"><span class="language-javascript">      mines = levelConfig.<span class="property">mines</span>;</span></span><br><span class="line"><span class="language-javascript">      minesLeft = mines;</span></span><br><span class="line"><span class="language-javascript">      minesCount = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">      gameover = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 初始化游戏布局</span></span></span><br><span class="line"><span class="language-javascript">      board.<span class="property">innerHTML</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      cells = [];</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> row = [];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> tr = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;tr&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> td = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;td&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> button = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;button&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">          button.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (!gameover) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="title function_">clickCell</span>(i, j);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">          td.<span class="title function_">appendChild</span>(button);</span></span><br><span class="line"><span class="language-javascript">          tr.<span class="title function_">appendChild</span>(td);</span></span><br><span class="line"><span class="language-javascript">          row.<span class="title function_">push</span>(&#123; <span class="attr">button</span>: button, <span class="attr">hasMine</span>: <span class="literal">false</span>, <span class="attr">revealed</span>: <span class="literal">false</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        cells.<span class="title function_">push</span>(row);</span></span><br><span class="line"><span class="language-javascript">        board.<span class="title function_">appendChild</span>(tr);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 初始化地雷</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; mines; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> row, col;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">do</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          row = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * rows);</span></span><br><span class="line"><span class="language-javascript">          col = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * cols);</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">while</span> (cells[row][col].<span class="property">hasMine</span>);</span></span><br><span class="line"><span class="language-javascript">        cells[row][col].<span class="property">hasMine</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 更新地雷数目显示</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">updateMinesCount</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">clickCell</span>(<span class="params">row, col</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> cell = cells[row][col];</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (cell.<span class="property">revealed</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (cell.<span class="property">hasMine</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">revealMines</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">showGameOver</span>(<span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      cell.<span class="property">revealed</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">      cell.<span class="property">button</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;#ddd&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> minesAround = <span class="title function_">countMinesAround</span>(row, col);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (minesAround &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        cell.<span class="property">button</span>.<span class="property">textContent</span> = minesAround;</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">revealNeighbors</span>(row, col);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (<span class="title function_">checkWin</span>()) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">showGameOver</span>(<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">revealNeighbors</span>(<span class="params">row, col</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = row - <span class="number">1</span>; i &lt;= row + <span class="number">1</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> j = col - <span class="number">1</span>; j &lt;= col + <span class="number">1</span>; j++) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (</span></span><br><span class="line"><span class="language-javascript">            i &gt;= <span class="number">0</span> &amp;&amp;</span></span><br><span class="line"><span class="language-javascript">            i &lt; rows &amp;&amp;</span></span><br><span class="line"><span class="language-javascript">            j &gt;= <span class="number">0</span> &amp;&amp;</span></span><br><span class="line"><span class="language-javascript">            j &lt; cols &amp;&amp;</span></span><br><span class="line"><span class="language-javascript">            !(i == row &amp;&amp; j == col)</span></span><br><span class="line"><span class="language-javascript">          ) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">clickCell</span>(i, j);</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">countMinesAround</span>(<span class="params">row, col</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> count = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = row - <span class="number">1</span>; i &lt;= row + <span class="number">1</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> j = col - <span class="number">1</span>; j &lt;= col + <span class="number">1</span>; j++) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (i &gt;= <span class="number">0</span> &amp;&amp; i &lt; rows &amp;&amp; j &gt;= <span class="number">0</span> &amp;&amp; j &lt; cols &amp;&amp; cells[i][j].<span class="property">hasMine</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            count++;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> count;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">revealMines</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (cells[i][j].<span class="property">hasMine</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            cells[i][j].<span class="property">button</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;#f00&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">updateMinesCount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这是哈哈&quot;</span>, minesLeft);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// minesCountElem.textContent = minesLeft;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">showGameOver</span>(<span class="params">win</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      gameover = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> message = win ? <span class="string">&quot;You Win!&quot;</span> : <span class="string">&quot;You Lose!&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(message);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">checkWin</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> cell = cells[i][j];</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (!cell.<span class="property">hasMine</span> &amp;&amp; !cell.<span class="property">revealed</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">init</span>();</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>恭喜你，你已经成功创建了一个扫雷小游戏！这个教程涵盖了从创建基本的HTML结构到添加CSS样式，再到编写JavaScript交互逻辑的全过程。通过这个项目，你不仅学会了如何制作一个小游戏，还对前端开发有了基本的了解。随着你技能的提升，你可以尝试添加更多的功能，比如计时器、得分系统或者更复杂的游戏逻辑。祝你编程愉快！</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>拼图小游戏制作教程：用HTML5和JavaScript打造经典游戏</title>
    <url>/blog/2024/03/11/%E6%8B%BC%E5%9B%BE%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E6%95%99%E7%A8%8B%EF%BC%9A%E7%94%A8HTML5%E5%92%8CJavaScript%E6%89%93%E9%80%A0%E7%BB%8F%E5%85%B8%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<h1 id="拼图小游戏制作教程：用HTML5和JavaScript打造经典游戏"><a href="#拼图小游戏制作教程：用HTML5和JavaScript打造经典游戏" class="headerlink" title="拼图小游戏制作教程：用HTML5和JavaScript打造经典游戏"></a>拼图小游戏制作教程：用HTML5和JavaScript打造经典游戏</h1><p>在这篇文章中，我们将一起学习如何从头开始制作一个简单的拼图小游戏。我们将使用HTML5和JavaScript来创建这个小游戏，不需要任何复杂的框架或库。通过这个教程，你将了解基本的网页布局、CSS样式设置以及JavaScript的交互逻辑。</p>
<h2 id="在线体验"><a href="#在线体验" class="headerlink" title="在线体验"></a>在线体验</h2><blockquote>
<p><a href="http://8.210.131.139/jigsaw.html">洛可可白⚡️拼图</a><br><img src="https://img-blog.csdnimg.cn/direct/18bb9a90304a452682e3c62580ee699a.png#pic_center" alt="在这里插入图片描述"></p>
</blockquote>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先，确保你的计算机上安装了文本编辑器，如Notepad++、Sublime Text或Visual Studio Code。这些工具将帮助你编写和编辑代码。</p>
<h2 id="创建HTML结构"><a href="#创建HTML结构" class="headerlink" title="创建HTML结构"></a>创建HTML结构</h2><p>打开你的文本编辑器，创建一个新的HTML文件，并输入以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>洛可可白拼图<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 在这里添加CSS样式 */</span></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;puzzle-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;puzzle-board&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;shuffle-btn&quot;</span>&gt;</span>打乱拼图<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 在这里添加JavaScript代码</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这是我们游戏的基本结构。<code>&lt;head&gt;</code>部分包含了页面的元数据和样式定义，<code>&lt;body&gt;</code>部分则是游戏的主要内容。</p>
<h2 id="添加CSS样式"><a href="#添加CSS样式" class="headerlink" title="添加CSS样式"></a>添加CSS样式</h2><p>在<code>&lt;style&gt;</code>标签内，我们将添加一些CSS样式来美化我们的拼图游戏。这包括拼图容器的边框、拼图块的大小和样式，以及按钮的样式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#puzzle-container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#puzzle-board</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.puzzle-piece</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">300px</span> <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="编写JavaScript逻辑"><a href="#编写JavaScript逻辑" class="headerlink" title="编写JavaScript逻辑"></a>编写JavaScript逻辑</h2><p>现在，我们将在<code>&lt;script&gt;</code>标签内添加JavaScript代码，这是游戏的核心部分。我们将创建拼图块，处理用户交互，并实现打乱拼图的功能。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取DOM元素</span></span><br><span class="line">    <span class="keyword">const</span> puzzleContainer = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;puzzle-container&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> puzzleBoard = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;puzzle-board&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> shuffleButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;shuffle-btn&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> imageSrc = <span class="string">&quot;http://example.com/image.jpg&quot;</span>; <span class="comment">// 替换为你的图片地址</span></span><br><span class="line">    <span class="keyword">const</span> rows = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">const</span> cols = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">const</span> pieces = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建拼图块的函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">createPuzzlePieces</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// ...（省略代码以节省空间，详见原代码）</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移动拼图块的函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">movePiece</span>(<span class="params">piece</span>) &#123;</span><br><span class="line">        <span class="comment">// ...（省略代码以节省空间，详见原代码）</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查是否完成拼图的函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">checkWin</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// ...（省略代码以节省空间，详见原代码）</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打乱拼图的函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">shufflePuzzle</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// ...（省略代码以节省空间，详见原代码）</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化游戏</span></span><br><span class="line">    <span class="title function_">createPuzzlePieces</span>();</span><br><span class="line">    shuffleButton.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, shufflePuzzle);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在这个脚本中，我们首先监听文档加载完成的事件，然后获取页面上的元素。我们定义了几个函数来创建拼图块、移动拼图块、检查游戏胜利条件以及打乱拼图。最后，我们初始化游戏并为打乱按钮添加事件监听器。</p>
<h2 id="测试游戏"><a href="#测试游戏" class="headerlink" title="测试游戏"></a>测试游戏</h2><p>保存你的HTML文件，并在浏览器中打开它。你应该能看到一个拼图游戏的界面。点击“打乱拼图”按钮，拼图块会被随机打乱。你可以通过拖动拼图块来完成拼图。</p>
<h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>洛可可白⚡️拼图<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#puzzle-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#puzzle-board</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.puzzle-piece</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-size</span>: <span class="number">300px</span> <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease-in-out;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;puzzle-container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;puzzle-board&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;shuffle-btn&quot;</span>&gt;</span>打乱拼图<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> puzzleContainer = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;puzzle-container&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> puzzleBoard = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;puzzle-board&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> shuffleButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;shuffle-btn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> imageSrc =</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;http://cdn-hw-static2.shanhutech.cn/bizhi/staticwp/202312/d989b0fbf30d985ee89f15ef2fd640db--2492230555.jpg&quot;</span>; <span class="comment">// 替换为你的图片地址</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> rows = <span class="number">3</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> cols = <span class="number">3</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> pieces = [];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> emptyPiece;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> isShuffling = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建拼图块</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">createPuzzlePieces</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> pieceWidth = puzzleContainer.<span class="property">offsetWidth</span> / cols;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> pieceHeight = puzzleContainer.<span class="property">offsetHeight</span> / rows;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">0</span>; row &lt; rows; row++) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; cols; col++) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> piece = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            piece.<span class="property">className</span> = <span class="string">&quot;puzzle-piece&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            piece.<span class="property">style</span>.<span class="property">width</span> = <span class="string">`<span class="subst">$&#123;pieceWidth&#125;</span>px`</span>;</span></span><br><span class="line"><span class="language-javascript">            piece.<span class="property">style</span>.<span class="property">height</span> = <span class="string">`<span class="subst">$&#123;pieceHeight&#125;</span>px`</span>;</span></span><br><span class="line"><span class="language-javascript">            piece.<span class="property">style</span>.<span class="property">backgroundImage</span> = <span class="string">`url(<span class="subst">$&#123;imageSrc&#125;</span>)`</span>;</span></span><br><span class="line"><span class="language-javascript">            piece.<span class="property">style</span>.<span class="property">backgroundPosition</span> = <span class="string">`<span class="subst">$&#123;-col * pieceWidth&#125;</span>px <span class="subst">$&#123;</span></span></span></span><br><span class="line"><span class="subst"><span class="string"><span class="language-javascript">              -row * pieceHeight</span></span></span></span><br><span class="line"><span class="subst"><span class="string"><span class="language-javascript">            &#125;</span>px`</span>;</span></span><br><span class="line"><span class="language-javascript">            piece.<span class="property">style</span>.<span class="property">top</span> = <span class="string">`<span class="subst">$&#123;row * pieceHeight&#125;</span>px`</span>;</span></span><br><span class="line"><span class="language-javascript">            piece.<span class="property">style</span>.<span class="property">left</span> = <span class="string">`<span class="subst">$&#123;col * pieceWidth&#125;</span>px`</span>;</span></span><br><span class="line"><span class="language-javascript">            piece.<span class="property">dataset</span>.<span class="property">row</span> = row;</span></span><br><span class="line"><span class="language-javascript">            piece.<span class="property">dataset</span>.<span class="property">col</span> = col;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (row === rows - <span class="number">1</span> &amp;&amp; col === cols - <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              emptyPiece = piece;</span></span><br><span class="line"><span class="language-javascript">              piece.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;empty&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              piece.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (!isShuffling) &#123;</span></span><br><span class="line"><span class="language-javascript">                  <span class="title function_">movePiece</span>(piece);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">              &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            puzzleBoard.<span class="title function_">appendChild</span>(piece);</span></span><br><span class="line"><span class="language-javascript">            pieces.<span class="title function_">push</span>(piece);</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 移动拼图块</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">movePiece</span>(<span class="params">piece</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> emptyPieceRow = <span class="built_in">parseInt</span>(emptyPiece.<span class="property">dataset</span>.<span class="property">row</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> emptyPieceCol = <span class="built_in">parseInt</span>(emptyPiece.<span class="property">dataset</span>.<span class="property">col</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> pieceRow = <span class="built_in">parseInt</span>(piece.<span class="property">dataset</span>.<span class="property">row</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> pieceCol = <span class="built_in">parseInt</span>(piece.<span class="property">dataset</span>.<span class="property">col</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (</span></span><br><span class="line"><span class="language-javascript">          (pieceRow === emptyPieceRow &amp;&amp;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Math</span>.<span class="title function_">abs</span>(pieceCol - emptyPieceCol) === <span class="number">1</span>) ||</span></span><br><span class="line"><span class="language-javascript">          (pieceCol === emptyPieceCol &amp;&amp;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Math</span>.<span class="title function_">abs</span>(pieceRow - emptyPieceRow) === <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">        ) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> tempRow = emptyPieceRow;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> tempCol = emptyPieceCol;</span></span><br><span class="line"><span class="language-javascript">          emptyPiece.<span class="property">style</span>.<span class="property">top</span> = <span class="string">`<span class="subst">$&#123;pieceRow * piece.offsetHeight&#125;</span>px`</span>;</span></span><br><span class="line"><span class="language-javascript">          emptyPiece.<span class="property">style</span>.<span class="property">left</span> = <span class="string">`<span class="subst">$&#123;pieceCol * piece.offsetWidth&#125;</span>px`</span>;</span></span><br><span class="line"><span class="language-javascript">          emptyPiece.<span class="property">dataset</span>.<span class="property">row</span> = pieceRow;</span></span><br><span class="line"><span class="language-javascript">          emptyPiece.<span class="property">dataset</span>.<span class="property">col</span> = pieceCol;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          piece.<span class="property">style</span>.<span class="property">top</span> = <span class="string">`<span class="subst">$&#123;tempRow * piece.offsetHeight&#125;</span>px`</span>;</span></span><br><span class="line"><span class="language-javascript">          piece.<span class="property">style</span>.<span class="property">left</span> = <span class="string">`<span class="subst">$&#123;tempCol * piece.offsetWidth&#125;</span>px`</span>;</span></span><br><span class="line"><span class="language-javascript">          piece.<span class="property">dataset</span>.<span class="property">row</span> = tempRow;</span></span><br><span class="line"><span class="language-javascript">          piece.<span class="property">dataset</span>.<span class="property">col</span> = tempCol;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">checkWin</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> isWin = <span class="literal">false</span>; <span class="comment">// 添加标志位</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 检查是否完成拼图</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">checkWin</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> isPuzzleComplete = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pieces.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> piece = pieces[i];</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> row = <span class="built_in">parseInt</span>(piece.<span class="property">dataset</span>.<span class="property">row</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> col = <span class="built_in">parseInt</span>(piece.<span class="property">dataset</span>.<span class="property">col</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (row !== <span class="title class_">Math</span>.<span class="title function_">floor</span>(i / cols) || col !== i % cols) &#123;</span></span><br><span class="line"><span class="language-javascript">            isPuzzleComplete = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (isPuzzleComplete &amp;&amp; !isWin &amp;&amp; !isShuffling) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 添加条件判断</span></span></span><br><span class="line"><span class="language-javascript">          isWin = <span class="literal">true</span>; <span class="comment">// 设置标志位为true</span></span></span><br><span class="line"><span class="language-javascript">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;恭喜！你完成了拼图！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            shuffleButton.<span class="property">disabled</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            isWin = <span class="literal">false</span>; <span class="comment">// 重置标志位为false</span></span></span><br><span class="line"><span class="language-javascript">          &#125;, <span class="number">200</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 打乱拼图</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">shufflePuzzle</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        isShuffling = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">        shuffleButton.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">        isWin = <span class="literal">false</span>; <span class="comment">// 重置标志位为false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> shuffleCount = <span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> count = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> intervalId = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> randomIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * pieces.<span class="property">length</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> randomPiece = pieces[randomIndex];</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">movePiece</span>(randomPiece);</span></span><br><span class="line"><span class="language-javascript">          count++;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (count &gt;= shuffleCount) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">clearInterval</span>(intervalId);</span></span><br><span class="line"><span class="language-javascript">            isShuffling = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            shuffleButton.<span class="property">disabled</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">10</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">createPuzzlePieces</span>();</span></span><br><span class="line"><span class="language-javascript">      shuffleButton.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, shufflePuzzle);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>恭喜你，你已经成功创建了一个简单的拼图小游戏！这个教程涵盖了从创建基本的HTML结构到添加CSS样式，再到编写JavaScript交互逻辑的全过程。通过这个项目，你不仅学会了如何制作一个小游戏，还对前端开发有了基本的了解。随着你技能的提升，你可以尝试添加更多的功能，比如计时器、得分系统或者更复杂的拼图形状。祝你编程愉快！</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>掌握Spring与Redis的高效交互：从Jedis到Spring Data Redis</title>
    <url>/blog/2024/04/17/%E6%8E%8C%E6%8F%A1Spring%E4%B8%8ERedis%E7%9A%84%E9%AB%98%E6%95%88%E4%BA%A4%E4%BA%92%EF%BC%9A%E4%BB%8EJedis%E5%88%B0Spring-Data-Redis/</url>
    <content><![CDATA[<h1 id="掌握Spring与Redis的高效交互：从Jedis到Spring-Data-Redis"><a href="#掌握Spring与Redis的高效交互：从Jedis到Spring-Data-Redis" class="headerlink" title="掌握Spring与Redis的高效交互：从Jedis到Spring Data Redis"></a>掌握Spring与Redis的高效交互：从Jedis到Spring Data Redis</h1><p>Redis以其卓越的性能和多功能性成为了不可或缺的组件。本文将深入探讨如何在Spring框架中通过Jedis和JedisPool直接操作Redis，以及如何利用Spring Data Redis简化数据交互过程。我们将从环境搭建开始，逐步介绍依赖引入、代码编写、功能实现，最终通过实例展示如何在Spring Boot应用中高效地使用Redis。无论你是初学者还是有经验的开发者，本文都将为你提供有价值的见解和实用的操作指南。</p>
<h2 id="Spring中通过Jedis操作Redis数据库的实践指南"><a href="#Spring中通过Jedis操作Redis数据库的实践指南" class="headerlink" title="Spring中通过Jedis操作Redis数据库的实践指南"></a>Spring中通过Jedis操作Redis数据库的实践指南</h2><p>在现代的Web应用开发中，Redis已经成为了一个非常重要的组件，它以其出色的性能、完美的文档、简洁易懂的API和丰富的数据结构支持，被广泛应用于缓存、消息队列、排行榜、实时系统等多个场景。Spring作为Java界最受欢迎的框架之一，与Redis的结合使用自然也成为了开发者们的必备技能。本文将通过一段简单的代码示例，介绍如何在Spring框架中使用Jedis来操作Redis数据库。</p>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>在开始之前，确保你的开发环境中已经安装了以下组件：</p>
<ul>
<li>Java开发环境（JDK）</li>
<li>Maven或Gradle（用于依赖管理）</li>
<li>Redis服务端（可以从<a href="https://redis.io/download">官网</a>下载并自行搭建，也可以使用在线的Redis服务）</li>
<li>Spring Boot（简化Spring应用的搭建和配置）</li>
</ul>
<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>在Spring Boot项目中，我们通常会使用Maven或Gradle来管理项目的依赖。为了使用Jedis，我们需要在项目的<code>pom.xml</code>（Maven）或<code>build.gradle</code>（Gradle）文件中添加以下依赖：</p>
<p><strong>Maven:</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Gradle:</strong></p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;redis.clients:jedis:3.6.0&#x27;</span></span><br></pre></td></tr></table></figure>

<p>请将<code>最新版本号</code>替换为当前Jedis的最新版本。</p>
<h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><p>以下是一个简单的Spring Boot控制器示例，展示了如何在一个GET请求中使用Jedis来操作Redis。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springredis.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;test01&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 连接到Redis服务</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">// 如果你的Redis设置了密码，需要进行认证</span></span><br><span class="line">        jedis.auth(<span class="string">&quot;yourPasswordHere&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取所有的key</span></span><br><span class="line">        Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        keys.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向Redis中添加几个key-value对</span></span><br><span class="line">        jedis.set(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;v1&quot;</span>);</span><br><span class="line">        jedis.set(<span class="string">&quot;k2&quot;</span>, <span class="string">&quot;v2&quot;</span>);</span><br><span class="line">        jedis.set(<span class="string">&quot;k3&quot;</span>, <span class="string">&quot;v3&quot;</span>);</span><br><span class="line">        jedis.set(<span class="string">&quot;k4&quot;</span>, <span class="string">&quot;v4&quot;</span>);</span><br><span class="line">        jedis.set(<span class="string">&quot;k5&quot;</span>, <span class="string">&quot;v5&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除指定的key</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">c</span> <span class="operator">=</span> jedis.del(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;k2&quot;</span>, <span class="string">&quot;k5&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除key的个数: &quot;</span> + c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断指定的key是否存在</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">exists</span> <span class="operator">=</span> jedis.exists(<span class="string">&quot;k2&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;判断key是否存在: &quot;</span> + exists);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h3><p>在这段代码中，我们首先创建了一个<code>Jedis</code>对象来连接到Redis服务。默认情况下，Jedis会尝试连接到<code>127.0.0.1</code>上的6379端口，这也是Redis的默认配置。如果你的Redis服务运行在不同的主机或端口上，你需要在构造<code>Jedis</code>对象时提供相应的参数。</p>
<p>接着，我们使用<code>auth</code>方法对Redis进行了认证，这一步仅在Redis设置了密码的情况下需要。</p>
<p>然后，我们使用<code>keys</code>方法获取了所有的key，并打印了出来。之后，我们通过<code>set</code>方法向Redis中添加了几个key-value对。</p>
<p>为了展示如何管理key，我们还演示了如何删除指定的key（使用<code>del</code>方法），以及如何检查一个key是否存在（使用<code>exists</code>方法）。</p>
<p>最后，我们关闭了<code>Jedis</code>对象，释放了与之相关的资源。</p>
<h2 id="Spring中通过JedisPool高效操作Redis数据库的实践指南"><a href="#Spring中通过JedisPool高效操作Redis数据库的实践指南" class="headerlink" title="Spring中通过JedisPool高效操作Redis数据库的实践指南"></a>Spring中通过JedisPool高效操作Redis数据库的实践指南</h2><p>在上一篇关于Spring通过Jedis操作Redis的文章中，我们了解了如何使用Jedis来执行基本的Redis操作。然而，在高并发的场景下，频繁地创建和销毁Jedis连接会导致性能问题。为了解决这一问题，Jedis提供了连接池的实现——JedisPool，它能够有效地管理Jedis连接，提高资源利用率和操作效率。本文将通过一个简单的Spring Boot控制器示例，介绍如何在Spring框架中使用JedisPool来高效操作Redis数据库。</p>
<h3 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>首先，确保你的项目中已经引入了Jedis的依赖，如前文所述，在<code>pom.xml</code>或<code>build.gradle</code>中添加以下依赖：</p>
<p><strong>Maven:</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Gradle:</strong></p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;redis.clients:jedis:3.6.0&#x27;</span></span><br></pre></td></tr></table></figure>

<p>请将<code>最新版本号</code>替换为当前Jedis的最新版本。</p>
<h3 id="编写代码-1"><a href="#编写代码-1" class="headerlink" title="编写代码"></a>编写代码</h3><p>以下是一个Spring Boot控制器的示例，展示了如何使用JedisPool来操作Redis。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springredis.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisPoolController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;test04&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建连接池的配置类</span></span><br><span class="line">        <span class="type">JedisPoolConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">        config.setMinIdle(<span class="number">5</span>); <span class="comment">// 设置空闲的个数</span></span><br><span class="line">        config.setMaxIdle(<span class="number">10</span>);</span><br><span class="line">        config.setMaxTotal(<span class="number">2000</span>); <span class="comment">// 设置最多的数量</span></span><br><span class="line">        config.setMaxWaitMillis(<span class="number">6000</span>); <span class="comment">// 设置最大的等待时长</span></span><br><span class="line">        config.setTestOnBorrow(<span class="literal">true</span>); <span class="comment">// 是否检验池子中的jedis对象可用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建jedis连接池对象</span></span><br><span class="line">        <span class="type">JedisPool</span> <span class="variable">jedisPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPool</span>(config, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>, <span class="number">1000</span>, <span class="string">&quot;rootXH&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过池子获取其中的一个连接</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedis = jedisPool.getResource();</span><br><span class="line">            <span class="comment">// 执行Redis操作</span></span><br><span class="line">            Map&lt;String, String&gt; map1 = jedis.hgetAll(<span class="string">&quot;myhash&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;获取指定key对应的内容: &quot;</span> + map1);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭Jedis连接</span></span><br><span class="line">            <span class="keyword">if</span> (jedis != <span class="literal">null</span>) &#123;</span><br><span class="line">                jedis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码解析-1"><a href="#代码解析-1" class="headerlink" title="代码解析"></a>代码解析</h3><p>在这段代码中，我们首先创建了一个<code>JedisPoolConfig</code>对象，用于配置连接池的参数。我们设置了最小空闲连接数、最大空闲连接数、最大连接数、最大等待时长以及是否在借用连接时进行有效性检查。</p>
<p>接着，我们使用<code>JedisPool</code>构造函数创建了一个连接池对象。这里的参数包括配置类、Redis服务器的IP地址、端口号、超时时间和密码。请根据你的Redis服务器实际情况进行相应的修改。</p>
<p>然后，我们通过<code>getResource</code>方法从连接池中获取了一个<code>Jedis</code>实例。在这个实例上，我们可以执行各种Redis操作，例如本例中的<code>hgetAll</code>方法，它用于获取指定key对应的哈希表中的所有字段和值。</p>
<p>最后，我们使用<code>finally</code>块确保<code>Jedis</code>连接被正确关闭，无论操作是否成功。这是一个非常重要的步骤，因为它可以避免连接泄露和其他潜在的资源问题。</p>
<h2 id="Spring-Boot中使用Spring-Data-Redis操作数据库的实践指南"><a href="#Spring-Boot中使用Spring-Data-Redis操作数据库的实践指南" class="headerlink" title="Spring Boot中使用Spring Data Redis操作数据库的实践指南"></a>Spring Boot中使用Spring Data Redis操作数据库的实践指南</h2><p>在现代的Web应用开发中，Redis已经成为了一个非常重要的组件，它以其出色的性能、完美的文档、简洁易懂的API和丰富的数据结构支持，被广泛应用于缓存、消息队列、排行榜、实时系统等多个场景。Spring Data Redis是Spring提供的一个简化Redis操作的框架，它使得我们可以更加便捷地在Spring应用中使用Redis。本文将通过一个Spring Boot控制器示例，介绍如何使用Spring Data Redis来操作Redis数据库。</p>
<h3 id="环境准备-1"><a href="#环境准备-1" class="headerlink" title="环境准备"></a>环境准备</h3><p>在开始之前，确保你的开发环境中已经安装了以下组件：</p>
<ul>
<li>Java开发环境（JDK）</li>
<li>Maven或Gradle（用于依赖管理）</li>
<li>Redis服务端（可以从<a href="https://redis.io/download">官网</a>下载并自行搭建，也可以使用在线的Redis服务）</li>
<li>Spring Boot（简化Spring应用的搭建和配置）</li>
</ul>
<h3 id="引入依赖-2"><a href="#引入依赖-2" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>在Spring Boot项目中，我们通常会使用Maven或Gradle来管理项目的依赖。为了使用Spring Data Redis，我们需要在项目的<code>pom.xml</code>（Maven）或<code>build.gradle</code>（Gradle）文件中添加以下依赖：</p>
<p><strong>Maven:</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Gradle:</strong></p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-data-redis&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="编写代码-2"><a href="#编写代码-2" class="headerlink" title="编写代码"></a>编写代码</h3><p>以下是一个Spring Boot控制器的示例，展示了如何使用Spring Data Redis来操作Redis。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springredis.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ValueOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisDataController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;test05&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取对string类型操作的类对象</span></span><br><span class="line">        ValueOperations&lt;String, String&gt; forValue = stringRedisTemplate.opsForValue();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置键值对</span></span><br><span class="line">        forValue.set(<span class="string">&quot;n1&quot;</span>, <span class="string">&quot;测试数据1&quot;</span>);</span><br><span class="line">        forValue.set(<span class="string">&quot;n2&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">        forValue.set(<span class="string">&quot;n3&quot;</span>, <span class="string">&quot;测试数据3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果存在 则不存入 不存在则存入</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">aBoolean</span> <span class="operator">=</span> forValue.setIfAbsent(<span class="string">&quot;n4&quot;</span>, <span class="string">&quot;测试数据4&quot;</span>, <span class="number">25</span>, TimeUnit.SECONDS);</span><br><span class="line">        System.out.println(<span class="string">&quot;是否存入成功 &quot;</span> + aBoolean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取对应的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">n1</span> <span class="operator">=</span> forValue.get(<span class="string">&quot;n1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;n1 = &quot;</span> + n1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递增操作</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">n2</span> <span class="operator">=</span> forValue.increment(<span class="string">&quot;n2&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;n2递增后的值 &quot;</span> + n2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码解析-2"><a href="#代码解析-2" class="headerlink" title="代码解析"></a>代码解析</h3><p>在这段代码中，我们首先通过<code>@Autowired</code>注解自动注入了一个<code>StringRedisTemplate</code>对象。<code>StringRedisTemplate</code>是Spring Data Redis提供的一个类，它封装了对字符串类型数据的操作。</p>
<p>接着，我们通过<code>opsForValue</code>方法获取了一个<code>ValueOperations</code>对象，它提供了对Redis中的字符串类型数据进行操作的方法。</p>
<p>我们使用<code>set</code>方法设置了三个键值对。然后，我们使用<code>setIfAbsent</code>方法尝试设置一个新的键值对，但仅当指定的key不存在时才进行设置。这个方法非常有用，当我们想要保证某个键值对的唯一性时。</p>
<p>之后，我们通过<code>get</code>方法获取了一个已经设置的键对应的值，并打印了出来。</p>
<p>最后，我们使用<code>increment</code>方法对一个键对应的值进行了递增操作。这个方法可以接受一个可选的增量参数，如果不指定，则默认递增1。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>探索async/await的魔力：简化JavaScript异步编程</title>
    <url>/blog/2024/04/04/%E6%8E%A2%E7%B4%A2async-await%E7%9A%84%E9%AD%94%E5%8A%9B%EF%BC%9A%E7%AE%80%E5%8C%96JavaScript%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="探索async-await的魔力：简化JavaScript异步编程"><a href="#探索async-await的魔力：简化JavaScript异步编程" class="headerlink" title="探索async&#x2F;await的魔力：简化JavaScript异步编程"></a>探索async&#x2F;await的魔力：简化JavaScript异步编程</h1><p>在JavaScript的世界里，异步编程一直是开发者必须面对的挑战。传统的异步模式，如回调函数、Promise链和链式调用，虽然功能强大，但有时也会使代码变得复杂难懂。幸运的是，<code>async</code>和<code>await</code>关键字的出现，为我们提供了一种更加直观和简洁的方式来处理异步操作。</p>
<h2 id="async-await的简介"><a href="#async-await的简介" class="headerlink" title="async&#x2F;await的简介"></a>async&#x2F;await的简介</h2><p><code>async</code>和<code>await</code>是JavaScript ES2017引入的两个新关键字，它们使得异步代码的编写更加接近同步代码的结构，提高了代码的可读性和可维护性。</p>
<ul>
<li><code>async</code>关键字用于声明一个函数是异步的，它可以在函数定义前使用。<code>async</code>函数内部返回的值会被自动包装成一个Promise。</li>
<li><code>await</code>关键字用于等待一个Promise完成（resolve）或拒绝（reject），它可以暂停函数的执行，直到Promise的结果可用。</li>
</ul>
<h2 id="如何使用async-await"><a href="#如何使用async-await" class="headerlink" title="如何使用async&#x2F;await"></a>如何使用async&#x2F;await</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Network response was not ok&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;There was a problem with the fetch operation:&#x27;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>fetchData</code>函数被标记为<code>async</code>，这意味着它可以内部使用<code>await</code>。<code>await</code>关键字用于等待网络请求完成并将响应转换为JSON格式。如果在这个过程中发生错误，它会被<code>catch</code>块捕获。</p>
<h3 id="并发执行多个异步操作"><a href="#并发执行多个异步操作" class="headerlink" title="并发执行多个异步操作"></a>并发执行多个异步操作</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getAllData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> [user, post] = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">            <span class="title function_">fetch</span>(<span class="string">&#x27;/api/user&#x27;</span>),</span><br><span class="line">            <span class="title function_">fetch</span>(<span class="string">&#x27;/api/post&#x27;</span>)</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> [userData, postData] = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">            user.<span class="title function_">json</span>(),</span><br><span class="line">            post.<span class="title function_">json</span>()</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">user</span>: userData, <span class="attr">post</span>: postData &#125;;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error fetching data:&#x27;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>getAllData</code>函数使用<code>Promise.all</code>来并发执行两个网络请求，并等待它们都完成。然后，它再次使用<code>Promise.all</code>来并发地将两个响应转换为JSON格式。这种方式使得并发执行异步操作变得非常简单。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fetchData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 这里可以使用 await 来等待一个 Promise</span></span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Network response was not ok&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">        <span class="comment">// 你可以继续使用 await 来等待其他的异步操作</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="comment">// 如果有错误发生，它会被捕获在这里</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;There was a problem with the fetch operation:&#x27;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>fetchData</code>函数被声明为<code>async</code>，这意味着你可以在函数内部使用<code>await</code>。我们使用<code>await fetch</code>来等待网络请求完成，然后使用<code>await response.json()</code>来等待JSON数据的解析。如果在这个过程中发生任何错误，它们会被<code>catch</code>块捕获并处理。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li><code>async</code>函数内部的代码执行顺序并不会改变，<code>await</code>只是暂停函数的进一步执行，而不是暂停JavaScript事件循环。</li>
<li><code>await</code>可以与任何返回Promise对象的异步操作一起使用，包括自定义的异步函数。</li>
<li>在<code>async</code>函数中使用<code>return</code>语句时，返回的值会被Promise对象包装。如果返回的是一个非Promise对象，它会被立即解决（resolved）。</li>
</ul>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p><code>async</code>和<code>await</code>为我们提供了一种更加简洁和直观的方式来编写异步代码。它们不仅使代码更容易阅读和理解，还减少了回调地狱和复杂链式调用带来的困扰。随着JavaScript异步编程的不断发展，<code>async</code>和<code>await</code>已经成为了现代JavaScript开发中不可或缺的工具。掌握它们，将使你的代码更加健壮和高效。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法全景：从基础到高级的Java实现</title>
    <url>/blog/2024/03/10/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%85%A8%E6%99%AF%EF%BC%9A%E4%BB%8E%E5%9F%BA%E7%A1%80%E5%88%B0%E9%AB%98%E7%BA%A7%E7%9A%84Java%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="排序算法全景：从基础到高级的Java实现"><a href="#排序算法全景：从基础到高级的Java实现" class="headerlink" title="排序算法全景：从基础到高级的Java实现"></a>排序算法全景：从基础到高级的Java实现</h1><p>排序算法是计算机科学中的一个基础概念，它在数据处理和信息检索中扮演着至关重要的角色。本文将通过几个简单的Java程序，带你了解几种常见的排序算法：插入排序、希尔排序、归并排序、快速排序和选择排序，以及一个用于生成和打印测试数据的工具类。</p>
<h2 id="插入排序：理解排序的核心思想"><a href="#插入排序：理解排序的核心思想" class="headerlink" title="插入排序：理解排序的核心思想"></a>插入排序：理解排序的核心思想</h2><h3 id="什么是插入排序？"><a href="#什么是插入排序？" class="headerlink" title="什么是插入排序？"></a>什么是插入排序？</h3><p>插入排序（Insertion Sort）算法是一种直观且易于理解的排序方法。插入排序的工作原理类似于我们整理扑克牌的方式。想象一下，你手中有一堆未排序的扑克牌，你将它们一张张插入到已经排序好的牌堆中。插入排序算法正是基于这样的思想：它将数组分为已排序和未排序两部分，然后逐个将未排序部分的元素插入到已排序部分的适当位置。</p>
<h3 id="插入排序的Java实现"><a href="#插入排序的Java实现" class="headerlink" title="插入排序的Java实现"></a>插入排序的Java实现</h3><p>让我们通过一个Java程序来具体看看插入排序是如何工作的。这个程序定义了一个名为 <code>_01_InsertionSort</code> 的类，其中包含了排序方法和一些辅助函数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">_01_InsertionSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 寻找元素arr[i]合适的插入位置</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j].compareTo(arr[j - <span class="number">1</span>]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    swap(arr, j, j - <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(Object[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">t</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个类中，<code>sort</code> 方法接受一个可比较的对象数组 <code>arr</code> 作为参数。方法的核心是一个双重循环：外层循环遍历数组的每个元素，内层循环则负责将当前元素与已排序部分的元素进行比较，并在必要时进行交换。</p>
<p><code>swap</code> 方法是一个辅助函数，用于交换数组中的两个元素。这是在内层循环中，当我们发现需要将一个元素插入到它之前的位置时调用的。</p>
<h3 id="程序的执行"><a href="#程序的执行" class="headerlink" title="程序的执行"></a>程序的执行</h3><p>程序的 <code>main</code> 方法首先生成了一个包含20000个随机整数的数组，然后调用 <code>sort</code> 方法对数组进行排序，最后打印出排序后的数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">20000</span>;</span><br><span class="line">    Integer[] arr = SortTestHelper.generateRandomArray(N, <span class="number">0</span>, <span class="number">100000</span>);</span><br><span class="line">    _01_InsertionSort.sort(arr);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        System.out.print(arr[i]);</span><br><span class="line">        System.out.print(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="插入排序的核心思想"><a href="#插入排序的核心思想" class="headerlink" title="插入排序的核心思想"></a>插入排序的核心思想</h3><p>插入排序的核心思想是分而治之。它将排序问题分解为更小的部分，然后逐个解决。这种方法在数据量较小或者数据基本有序的情况下非常有效，因为它可以减少不必要的比较和交换操作。</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>通过这个简单的Java程序，我们不仅学习了插入排序算法的实现，还理解了排序算法的一般思想。虽然插入排序在处理大数据集时可能不是最高效的选择，但它的简单性和直观性使其成为理解排序概念的一个良好起点。随着你对算法的深入学习，你将能够掌握更多高级的排序技术，以应对更复杂的数据处理挑战。</p>
<h2 id="希尔排序：一种高效的改进版插入排序"><a href="#希尔排序：一种高效的改进版插入排序" class="headerlink" title="希尔排序：一种高效的改进版插入排序"></a>希尔排序：一种高效的改进版插入排序</h2><p>希尔排序（Shell Sort）是一种对传统插入排序的改进，它通过引入间隔（gap）的概念来提高排序的效率。</p>
<h3 id="希尔排序简介"><a href="#希尔排序简介" class="headerlink" title="希尔排序简介"></a>希尔排序简介</h3><p>希尔排序是由Donald Shell在1959年提出的一种排序算法。它基于插入排序，通过将原始数据集分割成若干个子序列来排序，这些子序列的元素间隔逐渐减小，最后合并为一个有序的序列。</p>
<h3 id="Java实现希尔排序"><a href="#Java实现希尔排序" class="headerlink" title="Java实现希尔排序"></a>Java实现希尔排序</h3><p>让我们通过一个简单的Java程序来实现希尔排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">_02_ShellSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化间隔</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> arr.length / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 当间隔大于0时，执行排序</span></span><br><span class="line">        <span class="keyword">while</span> (gap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 遍历数组，间隔为gap</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> gap; i &lt; arr.length; i++) &#123;</span><br><span class="line">                <span class="comment">// 临时存储当前元素</span></span><br><span class="line">                <span class="type">Comparable</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">                <span class="comment">// 对于每个间隔内的元素，进行插入排序</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt;= gap &amp;&amp; tmp.compareTo(arr[j - gap]) &lt; <span class="number">0</span>; j -= gap) &#123;</span><br><span class="line">                    <span class="comment">// 将较大的元素向后移动</span></span><br><span class="line">                    arr[j] = arr[j - gap];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 将当前元素放到正确的位置</span></span><br><span class="line">                arr[j] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 缩小间隔，进行下一轮排序</span></span><br><span class="line">            gap /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个实现中，我们首先计算一个初始间隔 <code>gap</code>，然后通过一个循环来逐渐减小这个间隔。在每次循环中，我们对间隔为 <code>gap</code> 的元素进行插入排序。随着间隔的减小，排序的粒度逐渐变细，最终整个数组变得有序。</p>
<h3 id="测试希尔排序"><a href="#测试希尔排序" class="headerlink" title="测试希尔排序"></a>测试希尔排序</h3><p>为了测试我们的希尔排序算法，我们在 <code>main</code> 方法中生成了一个包含2000个随机整数的数组，并对其进行排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">2000</span>;</span><br><span class="line">    Integer[] arr = SortTestHelper.generateRandomArray(N, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">    _02_ShellSort.sort(arr);</span><br><span class="line">    <span class="comment">// 打印排序后的数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        System.out.print(arr[i]);</span><br><span class="line">        System.out.print(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="希尔排序的核心思想"><a href="#希尔排序的核心思想" class="headerlink" title="希尔排序的核心思想"></a>希尔排序的核心思想</h3><p>希尔排序的核心在于分而治之的策略。它不是一次性对整个数组进行排序，而是先对数组的子序列进行排序，然后逐步缩小子序列的范围，直到整个数组有序。这种方法在处理部分有序的数据时特别有效，因为它可以减少不必要的比较和交换操作。</p>
<h3 id="结语-1"><a href="#结语-1" class="headerlink" title="结语"></a>结语</h3><p>通过这个Java程序，我们不仅学习了希尔排序的实现，还理解了其背后的算法思想。希尔排序是一种简单且高效的排序方法，它在某些情况下比传统的插入排序要快得多。</p>
<h2 id="归并排序：优雅的分而治之艺术"><a href="#归并排序：优雅的分而治之艺术" class="headerlink" title="归并排序：优雅的分而治之艺术"></a>归并排序：优雅的分而治之艺术</h2><p>归并排序（Merge Sort）是一种优雅且高效的排序方法。归并排序通过分而治之的策略，将数据集一分为二，然后递归地对这两部分进行排序，最后将它们合并成一个有序的整体。</p>
<h3 id="归并排序的基本概念"><a href="#归并排序的基本概念" class="headerlink" title="归并排序的基本概念"></a>归并排序的基本概念</h3><p>归并排序的核心在于“分而治之”。这个策略涉及将一个大问题分解成小问题，解决这些小问题，然后将它们的解决方案合并。在排序的上下文中，这意味着将一个未排序的数组分成两半，分别对这两半进行排序，然后将它们合并成一个有序数组。</p>
<h3 id="Java实现归并排序"><a href="#Java实现归并排序" class="headerlink" title="Java实现归并排序"></a>Java实现归并排序</h3><p>让我们通过一个Java程序来实现归并排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">_03_MergeSort</span> &#123;</span><br><span class="line">    <span class="comment">// 将arr[l...mid]和arr[mid+1...r]两部分进行归并</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(Comparable[] arr, <span class="type">int</span> l, <span class="type">int</span> mid, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">        Comparable[] aux = Arrays.copyOfRange(arr, l, r + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 初始化，i指向左半部分的起始索引位置l；j指向右半部分起始索引位置mid+1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l, j = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> l; k &lt;= r; k++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i &gt; mid) &#123;  <span class="comment">// 如果左半部分元素已经全部处理完毕</span></span><br><span class="line">                arr[k] = aux[j - l];</span><br><span class="line">                j++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; r) &#123;   <span class="comment">// 如果右半部分元素已经全部处理完毕</span></span><br><span class="line">                arr[k] = aux[i - l];</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (aux[i - l].compareTo(aux[j - l]) &lt; <span class="number">0</span>) &#123;  <span class="comment">// 左半部分所指元素 &lt; 右半部分所指元素</span></span><br><span class="line">                arr[k] = aux[i - l];</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 左半部分所指元素 &gt;= 右半部分所指元素</span></span><br><span class="line">                arr[k] = aux[j - l];</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 递归使用归并排序,对arr[l...r]的范围进行排序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] arr, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= r) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (l + r) / <span class="number">2</span>;</span><br><span class="line">        sort(arr, l, mid);</span><br><span class="line">        sort(arr, mid + <span class="number">1</span>, r);</span><br><span class="line">        <span class="comment">// 对于arr[mid] &lt;= arr[mid+1]的情况,不进行merge</span></span><br><span class="line">        <span class="comment">// 对于近乎有序的数组非常有效,但是对于一般情况,有一定的性能损失</span></span><br><span class="line">        <span class="keyword">if</span> (arr[mid].compareTo(arr[mid + <span class="number">1</span>]) &gt; <span class="number">0</span>)</span><br><span class="line">            merge(arr, l, mid, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        sort(arr, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个类中，<code>merge</code> 方法负责合并两个已经排序的子数组。<code>sort</code> 方法是递归的核心，它将数组分成两半，然后递归地调用自身来排序这两半。最后，<code>sort</code> 方法提供了一个公共接口来开始排序过程。</p>
<h3 id="测试归并排序"><a href="#测试归并排序" class="headerlink" title="测试归并排序"></a>测试归并排序</h3><p>为了测试归并排序的性能，我们在 <code>main</code> 方法中生成了一个包含1000个随机整数的数组，并对其进行排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">    Integer[] arr = SortTestHelper.generateRandomArray(N, <span class="number">0</span>, <span class="number">100000</span>);</span><br><span class="line">    _03_MergeSort.sort(arr);</span><br><span class="line">    SortTestHelper.printArray(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="归并排序的核心思想"><a href="#归并排序的核心思想" class="headerlink" title="归并排序的核心思想"></a>归并排序的核心思想</h3><p>归并排序的核心在于递归和合并。递归地将数组分成更小的部分，直到每个部分只有一个元素（或没有元素），这时数组自然是有序的。然后，通过合并相邻的有序子数组，逐步构建更大的有序数组，最终得到完全有序的原始数组。</p>
<h3 id="结语-2"><a href="#结语-2" class="headerlink" title="结语"></a>结语</h3><p>归并排序是一种非常优雅的排序算法，它不仅在理论上具有优雅的数学美感，而且在实际应用中也非常高效。它的时间复杂度在最好、最坏和平均情况下都是O(n log n)，这使得它在处理大型数据集时特别有用。尽管归并排序需要额外的存储空间来创建辅助数组，但它的稳定性和效率使其成为许多排序场景下的首选算法。</p>
<h2 id="快速排序：分而治之的高效排序算法"><a href="#快速排序：分而治之的高效排序算法" class="headerlink" title="快速排序：分而治之的高效排序算法"></a>快速排序：分而治之的高效排序算法</h2><p>快速排序（Quick Sort）是一种分而治之策略的高效排序方法。快速排序以其平均时间复杂度为O(n log n)而闻名，它在大多数情况下都能提供出色的性能。</p>
<h3 id="快速排序的基本概念"><a href="#快速排序的基本概念" class="headerlink" title="快速排序的基本概念"></a>快速排序的基本概念</h3><p>快速排序的核心在于“分而治之”。这个策略涉及将一个大问题分解成小问题，解决这些小问题，然后将它们的解决方案合并。在排序的上下文中，这意味着将一个未排序的数组分成两半，然后递归地对这两半进行排序，最后将它们合并成一个有序的整体。</p>
<h3 id="Java实现快速排序"><a href="#Java实现快速排序" class="headerlink" title="Java实现快速排序"></a>Java实现快速排序</h3><p>让我们通过一个Java程序来实现快速排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">_04_QuickSort</span> &#123;</span><br><span class="line">    <span class="comment">// 对arr[l...r]部分进行partition操作</span></span><br><span class="line">    <span class="comment">// 返回p, 使得arr[l...p-1] &lt; arr[p] ; arr[p+1...r] &gt; arr[p]</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(Comparable[] arr, <span class="type">int</span> l, <span class="type">int</span> r)</span>&#123;</span><br><span class="line">        <span class="comment">// 随机在arr[l...r]的范围中, 选择一个数值作为标定点pivot</span></span><br><span class="line">        swap( arr, l , (<span class="type">int</span>)(Math.random()*(r-l+<span class="number">1</span>))+l );</span><br><span class="line">        <span class="type">Comparable</span> <span class="variable">v</span> <span class="operator">=</span> arr[l];</span><br><span class="line">        <span class="comment">// arr[l+1...j] &lt; v ; arr[j+1...i) &gt; v</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> l;</span><br><span class="line">        <span class="keyword">for</span>( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l + <span class="number">1</span> ; i &lt;= r ; i ++ )</span><br><span class="line">            <span class="keyword">if</span>( arr[i].compareTo(v) &lt; <span class="number">0</span> )&#123;</span><br><span class="line">                j ++;</span><br><span class="line">                swap(arr, j, i);</span><br><span class="line">            &#125;</span><br><span class="line">        swap(arr, l, j);</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 递归使用快速排序,对arr[l...r]的范围进行排序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] arr, <span class="type">int</span> l, <span class="type">int</span> r)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= r) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> partition(arr, l, r);</span><br><span class="line">        sort(arr, l, p-<span class="number">1</span> );</span><br><span class="line">        sort(arr, p+<span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] arr)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        sort(arr, <span class="number">0</span>, n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(Object[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">t</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 测试 QuickSort</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// Quick Sort也是一个O(nlogn)复杂度的算法</span></span><br><span class="line">        <span class="comment">// 可以在1秒之内轻松处理100万数量级的数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">1000000</span>;</span><br><span class="line">        Integer[] arr = SortTestHelper.generateRandomArray(N, <span class="number">0</span>, <span class="number">100000</span>);</span><br><span class="line">        sort(arr);</span><br><span class="line">        SortTestHelper.printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个类中，<code>partition</code> 方法负责将数组分成两部分，<code>sort</code> 方法是递归排序的核心，它将数组分成两半，然后递归地对这两半进行排序。<code>swap</code> 方法是一个辅助函数，用于交换数组中的两个元素。</p>
<h3 id="快速排序的核心思想"><a href="#快速排序的核心思想" class="headerlink" title="快速排序的核心思想"></a>快速排序的核心思想</h3><p>快速排序的核心在于选择一个基准值（pivot），然后将数组分成两部分：一部分包含所有小于基准值的元素，另一部分包含所有大于基准值的元素。这个过程称为分区（partitioning）。分区操作完成后，基准值就处于其最终排序位置。然后，我们递归地对基准值左边和右边的子数组进行同样的操作，直到整个数组变得有序。</p>
<h3 id="快速排序的性能"><a href="#快速排序的性能" class="headerlink" title="快速排序的性能"></a>快速排序的性能</h3><p>快速排序的平均时间复杂度为O(n log n)，这使得它在处理大型数据集时非常高效。尽管在最坏情况下，快速排序的时间复杂度会下降到O(n^2)，但通过随机选择基准值，可以大大降低这种最坏情况发生的概率。</p>
<h3 id="结语-3"><a href="#结语-3" class="headerlink" title="结语"></a>结语</h3><p>通过学习快速排序，我们不仅掌握了一种高效的排序技术，还理解了分而治之这一强大的问题解决策略。这种策略在计算机科学中有着广泛的应用，不仅仅是在排序算法中。快速排序的优雅和效率使其成为了许多排序场景下的首选算法。</p>
<h2 id="选择排序：简单而直观的排序算法入门"><a href="#选择排序：简单而直观的排序算法入门" class="headerlink" title="选择排序：简单而直观的排序算法入门"></a>选择排序：简单而直观的排序算法入门</h2><p>选择排序（Selection Sort）算法是一种易于理解和实现的排序方法。选择排序的核心思想是在每一轮迭代中找到最小（或最大）的元素，并将其移动到正确的位置。</p>
<h3 id="选择排序的工作原理"><a href="#选择排序的工作原理" class="headerlink" title="选择排序的工作原理"></a>选择排序的工作原理</h3><p>选择排序算法的工作原理可以概括为以下几个步骤：</p>
<ol>
<li>假设第一个元素已经是排序好的。</li>
<li>在剩余的未排序元素中找到最小（或最大）的元素。</li>
<li>将找到的最小（或最大）元素与当前未排序的第一个元素交换位置。</li>
<li>重复步骤2和3，直到所有元素都被排序。</li>
</ol>
<h3 id="Java实现选择排序"><a href="#Java实现选择排序" class="headerlink" title="Java实现选择排序"></a>Java实现选择排序</h3><p>下面是一个选择排序的Java实现示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">_07_SelectionSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 初始化最小值索引为当前位置</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="comment">// 寻找[i, n)区间里的最小值的索引</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">                    minIndex = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 交换当前位置和找到的最小值位置的元素</span></span><br><span class="line">            swap(arr, i, minIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">20000</span>;</span><br><span class="line">        Integer[] arr = SortTestHelper.generateRandomArray(N, <span class="number">0</span>, <span class="number">100000</span>);</span><br><span class="line">        _07_SelectionSort.sort(arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i]);</span><br><span class="line">            System.out.print(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个实现中，<code>sort</code> 方法负责执行排序过程。它首先遍历数组，然后在每次迭代中找到最小值的索引，并将其与当前位置的元素交换。<code>swap</code> 方法是一个辅助函数，用于交换数组中的两个元素。</p>
<h3 id="选择排序的特点"><a href="#选择排序的特点" class="headerlink" title="选择排序的特点"></a>选择排序的特点</h3><p>选择排序的主要特点是简单。它不需要额外的存储空间（除了临时变量），并且实现起来非常直观。然而，选择排序的效率并不是最高的，它的平均和最坏情况时间复杂度都是O(n^2)，这使得它在处理大型数据集时效率较低。</p>
<h3 id="结语-4"><a href="#结语-4" class="headerlink" title="结语"></a>结语</h3><p>选择排序虽然在效率上可能不如其他更高级的排序算法，但它的简单性和易于理解的特点使其成为初学者学习排序算法的良好起点。</p>
<h2 id="生成测试数据和输出测试数据的类"><a href="#生成测试数据和输出测试数据的类" class="headerlink" title="生成测试数据和输出测试数据的类"></a>生成测试数据和输出测试数据的类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//SortTestHelper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SortTestHelper</span> &#123;</span><br><span class="line">    <span class="comment">// SortTestHelper不允许产生任何实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SortTestHelper</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 生成有n个元素的随机数组,每个元素的随机范围为[rangeL, rangeR]</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer[] generateRandomArray(<span class="type">int</span> n, <span class="type">int</span> rangeL, <span class="type">int</span> rangeR) &#123;</span><br><span class="line">        <span class="keyword">assert</span> rangeL &lt;= rangeR;</span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> <span class="title class_">Integer</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            arr[i] = <span class="keyword">new</span> <span class="title class_">Integer</span>((<span class="type">int</span>)(Math.random() * (rangeR - rangeL + <span class="number">1</span>) + rangeL));</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印arr数组的所有内容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(Object arr[])</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            System.out.print( arr[i] );</span><br><span class="line">            System.out.print( <span class="string">&#x27; &#x27;</span> );</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>感谢你的访问，期待与你在技术的道路上相遇！👋🌟🚀</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>无缝集成：使用Spring Boot和Vue实现头像上传与回显功能</title>
    <url>/blog/2024/04/11/%E6%97%A0%E7%BC%9D%E9%9B%86%E6%88%90%EF%BC%9A%E4%BD%BF%E7%94%A8Spring-Boot%E5%92%8CVue%E5%AE%9E%E7%8E%B0%E5%A4%B4%E5%83%8F%E4%B8%8A%E4%BC%A0%E4%B8%8E%E5%9B%9E%E6%98%BE%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="无缝集成：使用Spring-Boot和Vue实现头像上传与回显功能"><a href="#无缝集成：使用Spring-Boot和Vue实现头像上传与回显功能" class="headerlink" title="无缝集成：使用Spring Boot和Vue实现头像上传与回显功能"></a>无缝集成：使用Spring Boot和Vue实现头像上传与回显功能</h1><p>在现代Web应用中，用户个性化体验尤为重要，其中头像上传与回显是一个常见的功能需求。本文将详细介绍如何使用Spring Boot和Vue.js构建一个前后端协同工作的头像上传系统，并实现图片的即时回显。</p>
<h2 id="技术栈介绍"><a href="#技术栈介绍" class="headerlink" title="技术栈介绍"></a>技术栈介绍</h2><ul>
<li><p><strong>Spring Boot</strong>：一个基于Spring框架的开源项目，用于简化Spring应用的初始搭建以及开发过程。它通过提供默认配置减少开发中的配置工作，使得开发者能够快速启动和部署Spring应用。</p>
</li>
<li><p><strong>Vue.js</strong>：一个渐进式JavaScript框架，用于构建用户界面。Vue的核心库只关注视图层，易于上手，同时也能够配合其他库或现有项目使用。Vue.js以其轻量级、高效性和灵活性而广受欢迎。</p>
</li>
</ul>
<h2 id="后端实现"><a href="#后端实现" class="headerlink" title="后端实现"></a>后端实现</h2><p>后端使用Spring Boot框架，通过<code>@RestController</code>注解定义一个控制器<code>UploadController</code>，提供<code>/upload</code>端点处理文件上传请求。代码中使用了<code>MultipartFile</code>来接收上传的文件，并将其保存到服务器的指定目录。</p>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="代码注释"><a href="#代码注释" class="headerlink" title="代码注释"></a>代码注释</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadController</span> &#123;</span><br><span class="line">    <span class="meta">@Operation(summary = &quot;上传图片到本地&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (file.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;图片为空&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileNamePrefix</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMddHHmmssSSS&quot;</span>).format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="keyword">assert</span> originalFilename != <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileNameSuffix</span> <span class="operator">=</span> <span class="string">&quot;.&quot;</span> + originalFilename.split(<span class="string">&quot;\\.&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> fileNamePrefix + fileNameSuffix;</span><br><span class="line">        <span class="type">ApplicationHome</span> <span class="variable">applicationHome</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApplicationHome</span>(<span class="built_in">this</span>.getClass());</span><br><span class="line">        <span class="comment">//String pre = applicationHome.getDir().getParentFile().getParentFile().getAbsolutePath() + &quot;\\src\\main\\resources\\static\\images\\&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">pre</span> <span class="operator">=</span> applicationHome.getDir().getParentFile().getParentFile().getParentFile().getAbsolutePath() + <span class="string">&quot;\\spring-ui\\src\\assets\\avatar\\&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> pre + fileName;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(path));</span><br><span class="line">            <span class="type">String</span> <span class="variable">replace</span> <span class="operator">=</span> path.replace(applicationHome.getDir().getParentFile().getParentFile().getParentFile().getAbsolutePath() + <span class="string">&quot;\\spring-ui\\src&quot;</span>, <span class="string">&quot;/src&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> replace.replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;图片上传失败&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="前端实现"><a href="#前端实现" class="headerlink" title="前端实现"></a>前端实现</h2><p>前端使用Vue.js框架，通过封装axios请求和全局配置，实现与后端的通信。同时，使用Vite作为构建工具，配置代理解决跨域问题。</p>
<h3 id="代码注释-1"><a href="#代码注释-1" class="headerlink" title="代码注释"></a>代码注释</h3><h4 id="全局配置封装"><a href="#全局配置封装" class="headerlink" title="全局配置封装"></a>全局配置封装</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// config/index.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> baseURL = <span class="string">&#x27;/api&#x27;</span>; <span class="comment">// 基础URL</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> timeout = <span class="number">10000</span>; <span class="comment">// 请求超时时间</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> headers = &#123; <span class="string">&#x27;X-Custom-Header&#x27;</span>: <span class="string">&#x27;foobar&#x27;</span> &#125;; <span class="comment">// 自定义请求头</span></span><br></pre></td></tr></table></figure>

<h4 id="Axios二次封装"><a href="#Axios二次封装" class="headerlink" title="Axios二次封装"></a>Axios二次封装</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// request/index.ts</span></span><br><span class="line"><span class="keyword">const</span> request = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="comment">// 配置axios实例</span></span><br><span class="line">    baseURL,</span><br><span class="line">    timeout,</span><br><span class="line">    headers</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 添加请求和响应拦截器</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 请求拦截器逻辑</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 响应拦截器逻辑</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="Api接口请求"><a href="#Api接口请求" class="headerlink" title="Api接口请求"></a>Api接口请求</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//api/index.ts</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> common <span class="keyword">from</span> <span class="string">&#x27;@/api/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> user <span class="keyword">from</span> <span class="string">&#x27;@/api/user&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> api = &#123;</span><br><span class="line">    common,</span><br><span class="line">    user,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> api;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//api/common.ts</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&quot;@/request&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">UploadRes</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上传图片到本地</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">file</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">upload</span>(<span class="params">file: <span class="built_in">object</span></span>): <span class="title class_">Promise</span>&lt;<span class="title class_">UploadRes</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">post</span>(<span class="string">`/upload`</span>, file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//api/user.ts</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&quot;@/request&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">UpdateUserParams</span> &#123;</span><br><span class="line">    id?: <span class="built_in">number</span>;</span><br><span class="line">    name?: <span class="built_in">string</span>;</span><br><span class="line">    sex?: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">    pic?: <span class="built_in">string</span>;</span><br><span class="line">    acc?: <span class="built_in">string</span>;</span><br><span class="line">    pwd?: <span class="built_in">string</span>;</span><br><span class="line">    phone?: <span class="built_in">string</span>;</span><br><span class="line">    email?: <span class="built_in">string</span>;</span><br><span class="line">    dept?: <span class="built_in">string</span>;</span><br><span class="line">    post?: <span class="built_in">string</span>;</span><br><span class="line">    status?: <span class="built_in">string</span>;</span><br><span class="line">    createBy?: <span class="built_in">string</span>;</span><br><span class="line">    createTime?: <span class="built_in">string</span> | <span class="built_in">unknown</span>;</span><br><span class="line">    updateBy?: <span class="built_in">string</span>;</span><br><span class="line">    updateTime?: <span class="built_in">string</span> | <span class="built_in">unknown</span>;</span><br><span class="line">    remark?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">UpdateUserRes</span> &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">success</span>: <span class="built_in">boolean</span>;</span><br><span class="line">    <span class="attr">code</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">data</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">unknown</span>&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改-账号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">object</span>&#125; params $!&#123;table.comment&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; params.id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; params.name 姓名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; params.sex 性别</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; params.age 年龄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; params.pic 头像</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; params.acc 账号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; params.pwd 密码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; params.phone 电话号码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; params.email 电子邮件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; params.dept 用户部门</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; params.post 用户岗位</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; params.status 状态（0正常 1停用）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; params.createBy 创建者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">object</span>&#125; params.createTime 创建时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; params.updateBy 更新者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">object</span>&#125; params.updateTime 更新时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; params.remark 备注</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">updateUser</span>(<span class="params">params: UpdateUserParams</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">UpdateUserRes</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> request.<span class="title function_">post</span>(<span class="string">`/userEntity/update`</span>, params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h4 id="解决CORS跨域问题"><a href="#解决CORS跨域问题" class="headerlink" title="解决CORS跨域问题"></a>解决CORS跨域问题</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">server</span>: &#123;</span><br><span class="line">        <span class="attr">proxy</span>: &#123;</span><br><span class="line">            <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">target</span>: <span class="string">&quot;http://localhost:9090/&quot;</span>, <span class="comment">// 后端服务地址</span></span><br><span class="line">                <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">// 是否改变源</span></span><br><span class="line">                <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/\/api/</span>, <span class="string">&quot;&quot;</span>), <span class="comment">// 重写路径</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="业务处理代码"><a href="#业务处理代码" class="headerlink" title="业务处理代码"></a>业务处理代码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- 上传组件和提示信息 --&gt;</span><br><span class="line">    &lt;el-upload drag :show-file-list=&quot;false&quot; :limit=&quot;1&quot; action=&quot;#&quot; :auto-upload=&quot;false&quot; accept=&quot;.png&quot;</span><br><span class="line">               :on-change=&quot;handleChanges&quot;&gt;</span><br><span class="line">      &lt;el-icon class=&quot;el-icon--upload&quot;&gt;</span><br><span class="line">        &lt;upload-filled/&gt;</span><br><span class="line">      &lt;/el-icon&gt;</span><br><span class="line">      &lt;div class=&quot;el-upload__text&quot;&gt;</span><br><span class="line">        &lt;em&gt; 点击 &lt;/em&gt; 或&lt;em&gt; 拖动文件 &lt;/em&gt;上传</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;template #tip&gt;</span><br><span class="line">        &lt;div class=&quot;el-upload__tip&quot;&gt;</span><br><span class="line">          仅支持 jpg/png 格式文件大小小于 2MB</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/el-upload&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">import api from &quot;@/api&quot;;</span><br><span class="line"></span><br><span class="line">// 响应式引用，用于存储用户信息</span><br><span class="line">const user = ref(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">// 生命周期钩子，初始化时获取用户信息</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">    user.value = JSON.parse(localStorage.getItem(&quot;user&quot;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 处理文件变化，上传文件并更新用户信息</span><br><span class="line"></span><br><span class="line">//修改头像</span><br><span class="line">const handleChanges = (file) =&gt; &#123;</span><br><span class="line">  if (file.raw.type !== &#x27;image/png&#x27;) &#123;//限制文件类型</span><br><span class="line">    ElMessage.error(&#123;message: &quot;只能上传png格式的文件&quot;, grouping: true, showClose: true&#125;);</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">  if (file.raw.size / 1024 / 1024 &gt; 5) &#123;</span><br><span class="line">    ElMessage.error(&#x27;文件大于 5MB!&#x27;)</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">  const param = new FormData();</span><br><span class="line">  param.append(&#x27;file&#x27;, file.raw);</span><br><span class="line">  api.common.upload(param).then((res: any) =&gt; &#123;</span><br><span class="line">    if (res !== null) ElMessage.success(&quot;上传成功&quot;);</span><br><span class="line">    if (res === null) ElMessage.error(&quot;上传失败&quot;);</span><br><span class="line">    api.user.updateUser(&#123;id: user.value.id, pic: res&#125;).then((res: any) =&gt; &#123;</span><br><span class="line">      api.user.selectUserByAcc(user.value.acc).then((res: any) =&gt; &#123;</span><br><span class="line">        //更新缓存</span><br><span class="line">        localStorage.setItem(&quot;user&quot;, JSON.stringify(res.data));</span><br><span class="line">        //更新左侧描述列表</span><br><span class="line">        user.value = res.data;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">:deep(.el-descriptions__label) &#123;</span><br><span class="line">  min-width: 60px !important;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="功能演示"><a href="#功能演示" class="headerlink" title="功能演示"></a>功能演示</h2><p>在文章的最后，我们将展示上传头像功能的完整流程，包括前端的上传界面、后端的文件保存逻辑，以及成功上传后的头像回显效果。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过本文的介绍，我们学习了如何使用Spring Boot和Vue.js实现一个完整的头像上传与回显功能。这种前后端分离的开发模式不仅提高了开发效率，也使得系统更加模块化和易于维护。随着技术的不断进步，我们期待未来能够有更多类似的协同工作解决方案出现，以满足不同场景下的开发需求。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构之操作顺序表实战</title>
    <url>/blog/2024/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%93%8D%E4%BD%9C%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h1 id="数据结构之操作顺序表实战——C语言"><a href="#数据结构之操作顺序表实战——C语言" class="headerlink" title="数据结构之操作顺序表实战——C语言"></a>数据结构之操作顺序表实战——C语言</h1><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>顺序表是在计算机内存中以数组的形式保存的线性表，线性表的顺序存储是指用一组地址连续的存储单元依次存储线性表中的各个元素、使得线性表中在逻辑结构上相邻的数据元素存储在相邻的物理存储单元中，即通过数据元素物理存储的相邻关系来反映数据元素之间逻辑上的相邻关系，采用顺序存储结构的线性表通常称为顺序表。顺序表是将表中的结点依次存放在计算机内存中一组地址连续的存储单元中。</p>
<h2 id="一-数据结构概述"><a href="#一-数据结构概述" class="headerlink" title="一.数据结构概述"></a>一.数据结构概述</h2><p><img src="https://img-blog.csdnimg.cn/68f6211a9f2e450c9df4f13b961341f2.png#pic_center" alt="在这里插入图片描述"></p>
<h2 id="二-要求"><a href="#二-要求" class="headerlink" title="二.要求"></a>二.要求</h2><p>本实训是对课本中关于顺序表的所有知识的综合实训，其内容包括了顺序表的各种基本操作。通过实训让读者掌握顺序表各种操作的算法编写，并理解各种操作之间的联系。</p>
<p>用户运行程序时，屏幕中显示选项菜单：</p>
<hr>
<pre><code>    --线性顺序表--
   1--------顺序表初始化     
   2--------插入             
   3--------删除             
   4--------求表长           
   5--------按值查找         
   6--------读取元素值       
   7--------显示线性表       
   0--------退出             
</code></pre>
<hr>
<p>根据给出的问题，选择算法；正确画出流程图；正确输入、编译、链间、运行程序；运行结果用截图方式插入本报告；原程序有必要的注释；验证程序要全面。</p>
<p>代码包含顺序表的基本操作，包括顺序表的初始化、元素的插人、元素的删除、计算顺序表长度、在顺序表中查找某个关键字、读取指定位置的元素值和输出顺序表的元素信息等。</p>
<h2 id="三-作答"><a href="#三-作答" class="headerlink" title="三.作答"></a>三.作答</h2><h3 id="1-代码："><a href="#1-代码：" class="headerlink" title="1.代码："></a>1.代码：</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType int <span class="comment">//在此例中数据类型采用数字类型</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 100  <span class="comment">//顺序表的最大长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType *data; <span class="comment">//存储空间基址</span></span><br><span class="line">    <span class="type">int</span> length;     <span class="comment">//线性表当前的长度</span></span><br><span class="line">&#125; SqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化顺序表，创建一个空表</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">InitList</span><span class="params">(SqList *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    L-&gt;data = (ElemType *)<span class="built_in">malloc</span>(MaxSize * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">    <span class="keyword">if</span> (!L-&gt;data)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;存储空间分配失败!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建指定大小的顺序表</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">CreateSqList</span><span class="params">(SqList *L, <span class="type">int</span> n)</span> <span class="comment">// n为需要创建顺序表的长度</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; MaxSize || n &lt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;顺序表的长度非法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入%d个数据:&quot;</span>, n);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;L-&gt;data[i]);</span><br><span class="line">            L-&gt;length++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在指定位置插入数据</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">InsertSqList</span><span class="params">(SqList *L, <span class="type">int</span> n, ElemType e)</span> <span class="comment">// n为插入位置，e为要插入的数据</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; L-&gt;length || n &lt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;插入位置非法!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = L-&gt;length - <span class="number">1</span>; i &gt;= n - <span class="number">1</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            L-&gt;data[i + <span class="number">1</span>] = L-&gt;data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        L-&gt;data[n - <span class="number">1</span>] = e;</span><br><span class="line">        L-&gt;length++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除指定位置的数据</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">DeleteSqList</span><span class="params">(SqList *L, <span class="type">int</span> n)</span> <span class="comment">// n为要删除的数据位置</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; L-&gt;length || n &lt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;删除位置非法!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = n; i &lt; L-&gt;length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            L-&gt;data[i - <span class="number">1</span>] = L-&gt;data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        L-&gt;length--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看顺序表长度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">len_seqList</span><span class="params">(SqList *L)</span> <span class="comment">/*返回顺序表L的长度*/</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> L-&gt;length;</span><br><span class="line">    <span class="comment">// return L-&gt;last;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按值查找</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">location_seqlist</span><span class="params">(SqList *L, ElemType e)</span> <span class="comment">/*在线性表中查找值为e的数据元素*/</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; L-&gt;length &amp;&amp; L-&gt;data[i] != e)</span><br><span class="line">        i++;</span><br><span class="line">    <span class="keyword">if</span> (i == L-&gt;length)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">/*查找不成功*/</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> i; <span class="comment">/*返回的是存储位置*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取元素值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">get_from_seqlist</span><span class="params">(SqList *L, <span class="type">int</span> i)</span> <span class="comment">/*返回线性表中的第i个元素的值*/</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入的序号有误，请重新输入!\n&quot;</span>);</span><br><span class="line">        <span class="comment">// return L-&gt;data[i] = -1;</span></span><br><span class="line">        <span class="comment">// return NULL;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> L-&gt;data[--i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示顺序表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintSqList</span><span class="params">(SqList *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;打印出的顺序表为:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*************************\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; L-&gt;length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   %d&quot;</span>, L-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n*************************\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> choice;</span><br><span class="line">    SqList L;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n\n\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t        --线性顺序表--       \n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n\t\t\t********************************&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n\t\t\t*	1--------顺序表初始化(创建)*&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n\t\t\t*	2--------插入          *&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n\t\t\t*	3--------删除          *&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n\t\t\t*	4--------求表长        *&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n\t\t\t*	5--------按值查找      *&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n\t\t\t*	6--------读取元素值    *&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n\t\t\t*	7--------显示线性表    *&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n\t\t\t*	0--------退出          *&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n\t\t\t********************************\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t请选择菜单号 (0--7): &quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;choice);</span><br><span class="line">        <span class="keyword">if</span> (choice == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//顺序表初始化</span></span><br><span class="line">            InitList(&amp;L);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入需要创建顺序表的长度：&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">            CreateSqList(&amp;L, n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//插入</span></span><br><span class="line">            <span class="comment">// printf(&quot;现默认在1号位置前插入数据0! \n&quot;);</span></span><br><span class="line">            <span class="comment">// int n, ElemType e</span></span><br><span class="line">            <span class="comment">// InsertSqList(&amp;L, 1, 0);</span></span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入需要插入顺序表的位置：&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">            ElemType e;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入需要插入顺序表的元素：&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line"></span><br><span class="line">            InsertSqList(&amp;L, n, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//删除</span></span><br><span class="line">            <span class="comment">// printf(&quot;现默认删除1号位置数据! \n&quot;);</span></span><br><span class="line">            <span class="comment">// int n</span></span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入需要删除顺序表的位置：&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">            DeleteSqList(&amp;L, n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// printf(&quot;求表长\n&quot;);</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;当前顺序表的表长为： %d\n&quot;</span>, len_seqList(&amp;L));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// printf(&quot;按值查找\n&quot;);</span></span><br><span class="line">            <span class="type">int</span> i;</span><br><span class="line">            ElemType e;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入要查找的值：&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line"></span><br><span class="line">            i = location_seqlist(&amp;L, e);</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">0</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;要查找的元素下标为：%d\n&quot;</span>, ++i);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;元素未找到&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">6</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// printf(&quot;读取元素值\n&quot;);</span></span><br><span class="line">            <span class="type">int</span> i;</span><br><span class="line">            ElemType e;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入要读取的结点的序号：&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line">            <span class="comment">//读取节点的序号</span></span><br><span class="line">            e = get_from_seqlist(&amp;L, i);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;要查找的下标为%d的元素值为：%d\n&quot;</span>, i, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">7</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//显示线性表</span></span><br><span class="line">            PrintSqList(&amp;L);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; \t \t \t 程序结束！ \n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n\t\t\t输入错误!请重新输入！ \n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;操作成功！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//测试</span></span><br><span class="line">    <span class="comment">// InitList(&amp;L);                   // 1--------顺序表初始化</span></span><br><span class="line">    <span class="comment">// CreateSqList(&amp;L, 5);            // 1--------创建</span></span><br><span class="line">    <span class="comment">// InsertSqList(&amp;L, 1, 0);         // 2--------插入</span></span><br><span class="line">    <span class="comment">// DeleteSqList(&amp;L, 1);            // 3--------删除</span></span><br><span class="line">    <span class="comment">// len_seqList(&amp;L);                // 4--------求表长</span></span><br><span class="line">    <span class="comment">// location_seqlist(&amp;L, 1);        // 5--------按值查找</span></span><br><span class="line">    <span class="comment">// get_from_seqlist(&amp;L, 1);        // 6--------读取元素值</span></span><br><span class="line">    <span class="comment">// PrintSqList(&amp;L);                // 7--------显示线性表</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-运行效果："><a href="#2-运行效果：" class="headerlink" title="2.运行效果："></a>2.运行效果：</h3><h4 id="2-1-顺序表初始化："><a href="#2-1-顺序表初始化：" class="headerlink" title="2.1 顺序表初始化："></a>2.1 顺序表初始化：</h4><p><img src="https://img-blog.csdnimg.cn/df4f4f104cf64fa890634da6478e6ae9.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/42e58b3d22bc4155be79b8800f792609.png#pic_center" alt="在这里插入图片描述"></p>
<h4 id="2-2-插入"><a href="#2-2-插入" class="headerlink" title="2.2 插入"></a>2.2 插入</h4><p><img src="https://img-blog.csdnimg.cn/5d8ed7c7f88b4101928303ff3f1ae00a.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/5c8336f83b7440a195ada45c7f38307f.png#pic_center" alt="在这里插入图片描述"></p>
<h4 id="2-3-删除"><a href="#2-3-删除" class="headerlink" title="2.3 删除"></a>2.3 删除</h4><p><img src="https://img-blog.csdnimg.cn/946615622a364bd0bc6178cdce8d8a58.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/903739e9f6414969bb0ab2474e5b09b2.png#pic_center" alt="在这里插入图片描述"></p>
<h4 id="2-4-求表长"><a href="#2-4-求表长" class="headerlink" title="2.4 求表长"></a>2.4 求表长</h4><p><img src="https://img-blog.csdnimg.cn/26cddefdf78f4db48cc379604860f762.png#pic_center" alt="在这里插入图片描述"></p>
<h4 id="2-5-按值查找"><a href="#2-5-按值查找" class="headerlink" title="2.5 按值查找"></a>2.5 按值查找</h4><p><img src="https://img-blog.csdnimg.cn/4499fb379ad7480897ed65d26583583d.png#pic_center" alt="在这里插入图片描述"></p>
<h4 id="2-6-读取元素值"><a href="#2-6-读取元素值" class="headerlink" title="2.6 读取元素值"></a>2.6 读取元素值</h4><p><img src="https://img-blog.csdnimg.cn/707060762a7b4be6b4351eb31906657d.png#pic_center" alt="在这里插入图片描述"></p>
<h4 id="2-7-显示数据表"><a href="#2-7-显示数据表" class="headerlink" title="2.7 显示数据表"></a>2.7 显示数据表</h4><p><img src="https://img-blog.csdnimg.cn/16b78da15e8746ae8a52afeba0d781cd.png#pic_center" alt="在这里插入图片描述"></p>
<h4 id="2-8-退出"><a href="#2-8-退出" class="headerlink" title="2.8 退出"></a>2.8 退出</h4><p><img src="https://img-blog.csdnimg.cn/444a7c5d10354912b89121c8402054a7.png#pic_center" alt="在这里插入图片描述"></p>
]]></content>
  </entry>
  <entry>
    <title>景德镇</title>
    <url>/blog/2024/01/01/%E6%99%AF%E5%BE%B7%E9%95%87/</url>
    <content><![CDATA[<p><img src="/blog/image/%E6%99%AF%E5%BE%B7%E9%95%87/1.jpg" alt="景德镇"></p>
<p><img src="/blog/image/%E6%99%AF%E5%BE%B7%E9%95%87/2.jpg" alt="景德镇"></p>
<p><img src="/blog/image/%E6%99%AF%E5%BE%B7%E9%95%87/3.jpg" alt="景德镇"></p>
<p><img src="/blog/image/%E6%99%AF%E5%BE%B7%E9%95%87/4.jpg" alt="景德镇"></p>
<p><img src="/blog/image/%E6%99%AF%E5%BE%B7%E9%95%87/5.jpg" alt="景德镇"></p>
<p><img src="/blog/image/%E6%99%AF%E5%BE%B7%E9%95%87/6.jpg" alt="景德镇"></p>
<p><img src="/blog/image/%E6%99%AF%E5%BE%B7%E9%95%87/7.jpg" alt="景德镇"></p>
<p><img src="/blog/image/%E6%99%AF%E5%BE%B7%E9%95%87/8.jpg" alt="景德镇"></p>
<p><img src="/blog/image/%E6%99%AF%E5%BE%B7%E9%95%87/9.jpg" alt="景德镇"></p>
]]></content>
      <categories>
        <category>旅行</category>
      </categories>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>杭州</title>
    <url>/blog/2024/01/13/%E6%9D%AD%E5%B7%9E/</url>
    <content><![CDATA[<p><img src="/blog/image/%E6%9D%AD%E5%B7%9E/1.jpg" alt="杭州"></p>
<p><img src="/blog/image/%E6%9D%AD%E5%B7%9E/2.jpg" alt="杭州"></p>
<p><img src="/blog/image/%E6%9D%AD%E5%B7%9E/3.jpg" alt="杭州"></p>
<p><img src="/blog/image/%E6%9D%AD%E5%B7%9E/4.jpg" alt="杭州"></p>
<p><img src="/blog/image/%E6%9D%AD%E5%B7%9E/5.jpg" alt="杭州"></p>
<p><img src="/blog/image/%E6%9D%AD%E5%B7%9E/6.jpg" alt="杭州"></p>
<p><img src="/blog/image/%E6%9D%AD%E5%B7%9E/7.jpg" alt="杭州"></p>
<p><img src="/blog/image/%E6%9D%AD%E5%B7%9E/8.jpg" alt="杭州"></p>
<p><img src="/blog/image/%E6%9D%AD%E5%B7%9E/9.jpg" alt="杭州"></p>
]]></content>
      <categories>
        <category>旅行</category>
      </categories>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式与JSON序列化：去除JavaScript对象中的下划线键名</title>
    <url>/blog/2024/04/04/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8EJSON%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%9A%E5%8E%BB%E9%99%A4JavaScript%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E4%B8%8B%E5%88%92%E7%BA%BF%E9%94%AE%E5%90%8D/</url>
    <content><![CDATA[<h1 id="正则表达式与JSON序列化：去除JavaScript对象中的下划线键名"><a href="#正则表达式与JSON序列化：去除JavaScript对象中的下划线键名" class="headerlink" title="正则表达式与JSON序列化：去除JavaScript对象中的下划线键名"></a>正则表达式与JSON序列化：去除JavaScript对象中的下划线键名</h1><p>在处理前端数据时，我们经常会遇到一些以下划线开头的属性，这在某些情况下可能会与JSON标准或其他数据格式的要求冲突。为了确保数据的一致性和兼容性，我们需要将这些属性的下划线去除。本文将介绍如何使用<code>JSON.stringify()</code>进行序列化，并通过<code>replace()</code>方法结合正则表达式来实现这一转换。</p>
<h2 id="JSON-stringify-简介"><a href="#JSON-stringify-简介" class="headerlink" title="JSON.stringify()简介"></a>JSON.stringify()简介</h2><p><code>JSON.stringify()</code>是一个内置的JavaScript函数，用于将JavaScript对象转换成JSON字符串。它可以处理各种数据类型，包括对象、数组、字符串、数字等。然而，<code>JSON.stringify()</code>默认不会序列化以下划线开头的属性，因为这些属性在JSON中不是有效的键名。</p>
<h2 id="使用replace-和正则表达式"><a href="#使用replace-和正则表达式" class="headerlink" title="使用replace()和正则表达式"></a>使用replace()和正则表达式</h2><p>为了解决这个问题，我们可以使用<code>replace()</code>方法，它允许我们对字符串进行搜索和替换。结合正则表达式，我们可以精确地匹配并替换字符串中的特定模式。</p>
<h3 id="正则表达式基础"><a href="#正则表达式基础" class="headerlink" title="正则表达式基础"></a>正则表达式基础</h3><p>正则表达式是一种强大的文本处理工具，它定义了一个搜索模式，用于在字符串中查找和操作符合某种模式的文本。例如，<code>/_(\w+)/g</code>是一个正则表达式，它匹配以下划线开头的任何单词字符序列。</p>
<ul>
<li><code>/</code>：定界符，用来标记正则表达式的开始和结束。</li>
<li><code>_</code>：字面意义上的下划线字符。</li>
<li><code>(\w+)</code>：匹配一个或多个字母、数字或下划线，圆括号表示捕获组。</li>
<li><code>g</code>：全局搜索标志，表示查找所有匹配项，而不是停在第一个匹配项。</li>
</ul>
<h3 id="实现下划线去除"><a href="#实现下划线去除" class="headerlink" title="实现下划线去除"></a>实现下划线去除</h3><p>现在我们可以结合<code>JSON.stringify()</code>和<code>replace()</code>方法来序列化对象，并去除属性名中的下划线：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> basicForm = &#123;</span><br><span class="line">  <span class="attr">_id</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">_name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">_phone</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">_email</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">_sex</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">_age</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用JSON.stringify()序列化对象</span></span><br><span class="line"><span class="keyword">const</span> jsonString = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(basicForm);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用正则表达式替换属性名中的下划线</span></span><br><span class="line"><span class="keyword">const</span> cleanedJson = jsonString.<span class="title function_">replace</span>(<span class="regexp">/_(\w+)/g</span>, <span class="function">(<span class="params">match, p1</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> p1; <span class="comment">// 这里直接返回捕获的单词字符序列，即去除下划线</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cleanedJson);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用JSON.stringify()序列化对象</span></span><br><span class="line"><span class="keyword">const</span> jsonString = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(basicForm);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用正则表达式替换属性名中的下划线</span></span><br><span class="line"><span class="keyword">const</span> cleanedJson = jsonString.<span class="title function_">replace</span>(<span class="regexp">/_(\w+)/g</span>, <span class="function">(<span class="params">match, p1</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> p1; <span class="comment">// 这里直接返回捕获的单词字符序列，即去除下划线</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cleanedJson);</span><br><span class="line"><span class="comment">//打印结果</span></span><br><span class="line"><span class="comment">//&#123;&quot;id&quot;:null,&quot;name&quot;:&quot;&quot;,&quot;phone&quot;:&quot;&quot;,&quot;email&quot;:&quot;&quot;,&quot;sex&quot;:&quot;&quot;,&quot;age&quot;:&quot;&quot;&#125;</span></span><br><span class="line"><span class="comment">//可以使用JSON.parse(cleanedJson)包装为一个对象</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>replace()</code>方法使用正则表达式<code>/_(\w+)/g</code>来查找所有以下划线开头的属性名，并通过第二个参数函数将下划线去除。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过结合<code>JSON.stringify()</code>和正则表达式，我们能够有效地处理JavaScript对象的序列化问题，并确保数据格式的一致性。这种方法不仅适用于去除下划线，还可以用于各种复杂的字符串处理任务。掌握正则表达式的使用，将极大地提升你在文本处理方面的能力。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器DOM操作基础：禁用右键菜单与阻止文字选中</title>
    <url>/blog/2024/03/23/%E6%B5%8F%E8%A7%88%E5%99%A8DOM%E6%93%8D%E4%BD%9C%E5%9F%BA%E7%A1%80%EF%BC%9A%E7%A6%81%E7%94%A8%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E4%B8%8E%E9%98%BB%E6%AD%A2%E6%96%87%E5%AD%97%E9%80%89%E4%B8%AD/</url>
    <content><![CDATA[<h1 id="浏览器DOM操作基础：禁用右键菜单与阻止文字选中"><a href="#浏览器DOM操作基础：禁用右键菜单与阻止文字选中" class="headerlink" title="浏览器DOM操作基础：禁用右键菜单与阻止文字选中"></a>浏览器DOM操作基础：禁用右键菜单与阻止文字选中</h1><p>在Web开发中，有时我们需要对用户的默认行为进行限制，以保护网站内容或提供更定制化的用户体验。两个常见的例子是禁止用户通过右键菜单访问上下文选项，以及阻止用户选中页面上的文字。本文将介绍如何使用JavaScript来实现这两个功能，以及它们背后的原理和可能的应用场景。</p>
<h2 id="体验地址"><a href="#体验地址" class="headerlink" title="体验地址"></a>体验地址</h2><blockquote>
<p>洛可可白：</p>
<p><a href="http://8.210.131.139/mouse-event.html">禁用右键菜单与阻止文字选中</a></p>
</blockquote>
<h2 id="禁用右键菜单"><a href="#禁用右键菜单" class="headerlink" title="禁用右键菜单"></a>禁用右键菜单</h2><p>在Web页面中，用户可以通过点击鼠标右键来调出浏览器的上下文菜单（右键菜单），这里可以包含多种选项，如“复制”、“粘贴”、“另存为”等。在某些情况下，出于版权保护、防止内容盗用或避免不当操作的考虑，开发者可能希望禁用这个菜单。</p>
<p>要禁用右键菜单，我们可以通过监听<code>contextmenu</code>事件，并使用<code>preventDefault()</code>方法来阻止其默认行为。以下是一个简单的代码示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;contextmenu&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>当用户尝试在页面上点击右键时，这个事件监听器会被触发，随后<code>preventDefault()</code>方法会阻止浏览器显示默认的右键菜单。</p>
<h2 id="阻止文字选中"><a href="#阻止文字选中" class="headerlink" title="阻止文字选中"></a>阻止文字选中</h2><p>同样地，用户可以通过鼠标拖动来选中页面上的文字，这可能会导致内容被复制或不小心被拖动到其他位置。如果开发者希望防止这种情况发生，可以通过监听<code>selectstart</code>事件来实现。</p>
<p><code>selectstart</code>事件在用户开始选中文本时触发。通过在事件监听器中调用<code>preventDefault()</code>方法，我们可以阻止文本被选中。以下是相应的代码示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;selectstart&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这样，无论用户如何尝试，都无法在页面上选中任何文字。</p>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>洛可可白-禁用右键菜单与阻止文字选中<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    禁用右键菜单与阻止文字选中</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. contextmenu 禁用右键菜单</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;contextmenu&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 禁止选中文字 selectstart</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;selectstart&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li><strong>版权保护</strong>：对于包含原创内容或版权材料的网站，禁用右键菜单和阻止文字选中可以作为一种基本的保护措施，防止用户轻易复制内容。</li>
<li><strong>用户体验</strong>：在某些应用或游戏中，可能不希望用户与页面交互的方式受到限制，因此禁用这些功能可以提供更流畅的用户体验。</li>
<li><strong>防止误操作</strong>：在触摸板或触摸屏设备上，用户有时会无意中选中文字或触发右键菜单，禁用这些功能可以减少误操作的可能性。</li>
</ul>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>虽然禁用右键菜单和阻止文字选中可以在一定程度上限制用户的行为，但这并不是一个完全可靠的安全措施。有经验的用户仍然可以通过浏览器插件、开发者工具或其他技术手段来绕过这些限制。因此，这些方法应该被视为基本的辅助手段，而不是安全策略的全部。</p>
<p>通过上述介绍，使用简单的JavaScript代码，我们可以对用户的DOM操作进行一定程度的控制。这为Web开发者提供了更多的自由度，以创建符合特定需求的网页环境。</p>
<p><strong>如果对你有帮助，点赞👍、收藏💖、关注🔔是我更新的动力！👋🌟🚀</strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>武汉</title>
    <url>/blog/2023/10/01/%E6%AD%A6%E6%B1%89/</url>
    <content><![CDATA[<p><img src="/blog/image/%E6%AD%A6%E6%B1%89/1.jpg" alt="武汉"></p>
<p><img src="/blog/image/%E6%AD%A6%E6%B1%89/2.jpg" alt="武汉"></p>
<p><img src="/blog/image/%E6%AD%A6%E6%B1%89/3.jpg" alt="武汉"></p>
<p><img src="/blog/image/%E6%AD%A6%E6%B1%89/4.jpg" alt="武汉"></p>
<p><img src="/blog/image/%E6%AD%A6%E6%B1%89/5.jpg" alt="武汉"></p>
<p><img src="/blog/image/%E6%AD%A6%E6%B1%89/6.jpg" alt="武汉"></p>
]]></content>
      <categories>
        <category>旅行</category>
      </categories>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫基本原理介绍、实现及问题解决、爬虫实战、爬取经典moba游戏英雄列表</title>
    <url>/blog/2024/03/12/%E7%88%AC%E8%99%AB%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D%E3%80%81%E5%AE%9E%E7%8E%B0%E5%8F%8A%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E3%80%81%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E3%80%81%E7%88%AC%E5%8F%96%E7%BB%8F%E5%85%B8moba%E6%B8%B8%E6%88%8F%E8%8B%B1%E9%9B%84%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="爬虫基本原理介绍、实现及问题解决、爬虫实战、爬取经典moba游戏英雄列表"><a href="#爬虫基本原理介绍、实现及问题解决、爬虫实战、爬取经典moba游戏英雄列表" class="headerlink" title="爬虫基本原理介绍、实现及问题解决、爬虫实战、爬取经典moba游戏英雄列表"></a>爬虫基本原理介绍、实现及问题解决、爬虫实战、爬取经典moba游戏英雄列表</h1><p><code>爬虫（Web Crawler）</code>是一种自动化的网络机器人，其基本功能是从互联网上抓取信息。爬虫的工作原理、实现方法以及可能遇到的问题及其解决方案如下：</p>
<h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><ol>
<li><strong>请求（Request）</strong>：爬虫向目标网站发送HTTP请求，获取网页内容。</li>
<li><strong>响应（Response）</strong>：服务器处理请求后，返回网页的HTML、JSON或其他格式的响应数据。</li>
<li><strong>解析（Parsing）</strong>：爬虫解析响应内容，提取有用信息或链接。</li>
<li><strong>存储（Storage）</strong>：将提取的数据存储到数据库或文件中。</li>
<li><strong>遍历（Traversal）</strong>：根据解析出的链接，递归或迭代地发起新的请求，继续抓取其他网页。</li>
</ol>
<h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><ol>
<li><strong>选择合适的工具</strong>：Python是实现爬虫的流行语言，常用的库有Requests、BeautifulSoup、lxml和Scrapy。</li>
<li><strong>编写爬虫代码</strong>：<ul>
<li>使用<code>requests</code>库发起请求获取网页内容。</li>
<li>使用<code>BeautifulSoup</code>或<code>lxml</code>解析HTML，提取数据。</li>
<li>使用正则表达式或XPath选择器定位所需信息。</li>
<li>遍历页面中的链接，构建待抓取的URL队列。</li>
</ul>
</li>
<li><strong>遵守robots.txt协议</strong>：robots.txt文件定义了搜索引擎爬虫可以抓取的网站范围，合法的爬虫应遵守该协议。</li>
<li><strong>设置User-Agent</strong>：模拟浏览器的User-Agent，避免被识别为爬虫而被封禁。</li>
<li><strong>异常处理</strong>：编写代码处理可能出现的异常，如网络请求失败、解析错误等。</li>
</ol>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><ol>
<li><strong>反爬虫机制</strong>：<ul>
<li><strong>IP封禁</strong>：使用代理服务器池，轮换IP地址。</li>
<li><strong>请求频率限制</strong>：设置合理的请求间隔，避免过快请求。</li>
<li><strong>验证码</strong>：使用OCR技术或第三方服务识别验证码。</li>
<li><strong>动态内容</strong>：分析Ajax请求，模拟浏览器行为或使用Selenium获取动态加载的数据。</li>
</ul>
</li>
<li><strong>数据清洗</strong>：对抓取的数据进行清洗和格式化，以便后续处理和分析。</li>
<li><strong>性能优化</strong>：<ul>
<li>使用多线程或异步IO提高爬取效率。</li>
<li>合理设计数据存储结构，提高读写效率。</li>
</ul>
</li>
<li><strong>法律风险</strong>：尊重版权和隐私，遵守相关法律法规，避免侵权行为。</li>
</ol>
<p>爬虫的开发和使用需要遵循法律法规和道德标准，不得侵犯他人权益。在实际应用中，应尽量减少对目标网站的影响，合理合法地使用爬虫技术。</p>
<h2 id="Python爬虫简单实现"><a href="#Python爬虫简单实现" class="headerlink" title="Python爬虫简单实现"></a>Python爬虫简单实现</h2><p>以下是一个简单的Python爬虫脚本，它使用<code>requests</code>库从百度网站获取HTML内容，并将其保存到本地文件中。我已经为代码添加了注释，以便更好地理解每一步的过程。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">html = response.content.decode()</span><br><span class="line"><span class="built_in">print</span>(html)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data/json/baidu.html&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(html)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;保存完毕！&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>在运行上述脚本时，需要注意以下几点：</p>
<ol>
<li>确保<code>requests</code>库已经安装在你的Python环境中。如果没有安装，可以通过运行<code>pip install requests</code>来安装。</li>
<li>脚本中的<code>data/json/baidu.html</code>是保存文件的路径和文件名，你需要根据你的文件系统结构来修改这个路径，确保程序有权限写入到该路径。</li>
<li>如果你运行脚本时遇到网络问题，如无法访问百度网站，可能需要检查你的网络连接，或者检查是否有代理、VPN等网络设置影响了请求。</li>
<li>由于网络请求可能受到目标网站的反爬虫策略影响，建议在实际使用中添加适当的请求头、User-Agent等信息，并遵守目标网站的robots.txt文件规定。</li>
</ol>
<h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><p><code>BeautifulSoup</code> 是一个用于解析HTML和XML文档的Python库，它创建了一个解析树，使得我们可以方便地提取和操作页面数据。在数据清洗过程中，<code>BeautifulSoup</code> 可以帮助我们从网页中提取有用的信息，并将其转换为统一的格式。以下是使用 <code>BeautifulSoup</code> 进行数据清洗的基本步骤：</p>
<h3 id="安装BeautifulSoup"><a href="#安装BeautifulSoup" class="headerlink" title="安装BeautifulSoup"></a>安装BeautifulSoup</h3><p>如果你还没有安装 <code>BeautifulSoup</code>，可以通过以下命令进行安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure>

<h3 id="解析文档"><a href="#解析文档" class="headerlink" title="解析文档"></a>解析文档</h3><p>首先，你需要一个HTML或XML文档作为输入。这可以是通过HTTP请求获取的网页内容，也可以是本地文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设我们已经有了HTML内容，可以直接解析</span></span><br><span class="line">html_content = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;&lt;title&gt;页面标题&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&quot;content&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;p class=&quot;date&quot;&gt;2023-03-17&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;ul id=&quot;list&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;li class=&quot;item&quot;&gt;第一项&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class=&quot;item&quot;&gt;第二项&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用BeautifulSoup解析HTML</span></span><br><span class="line">soup = BeautifulSoup(html_content, <span class="string">&#x27;html.parser&#x27;</span>)  <span class="comment"># &#x27;html.parser&#x27;是解析器，也可以使用&#x27;lxml&#x27;等</span></span><br></pre></td></tr></table></figure>

<h3 id="提取数据"><a href="#提取数据" class="headerlink" title="提取数据"></a>提取数据</h3><p>使用 <code>BeautifulSoup</code> 提供的方法，如 <code>find()</code>, <code>find_all()</code>, <code>select()</code> 等，来定位和提取所需的元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提取单个元素</span></span><br><span class="line">date_tag = soup.find(<span class="string">&#x27;p&#x27;</span>, class_=<span class="string">&#x27;date&#x27;</span>)</span><br><span class="line">date = date_tag.text.strip()  <span class="comment"># 去除空白字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取多个元素</span></span><br><span class="line">items = soup.find_all(<span class="string">&#x27;li&#x27;</span>, class_=<span class="string">&#x27;item&#x27;</span>)</span><br><span class="line">item_texts = [item.text.strip() <span class="keyword">for</span> item <span class="keyword">in</span> items]  <span class="comment"># 列表推导式提取所有文本内容</span></span><br></pre></td></tr></table></figure>

<h3 id="数据清洗-1"><a href="#数据清洗-1" class="headerlink" title="数据清洗"></a>数据清洗</h3><p>对提取出的数据进行清洗，包括去除空白字符、标准化格式、转换数据类型等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 去除空白字符</span></span><br><span class="line">cleaned_date = date.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准化格式，例如日期格式</span></span><br><span class="line">standard_date = cleaned_date.replace(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换数据类型，例如将字符串转换为整数或浮点数</span></span><br><span class="line"><span class="comment"># 假设我们有一个价格字符串</span></span><br><span class="line">price_str = <span class="string">&#x27;¥29.99&#x27;</span></span><br><span class="line">price = <span class="built_in">float</span>(price_str.replace(<span class="string">&#x27;¥&#x27;</span>, <span class="string">&#x27;&#x27;</span>))  <span class="comment"># 去除货币符号并转换为浮点数</span></span><br></pre></td></tr></table></figure>

<h3 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h3><p>将清洗后的数据存储到适当的数据结构中，如列表、字典、数据帧等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将清洗后的数据存储到字典中</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;date&#x27;</span>: standard_date,</span><br><span class="line">    <span class="string">&#x27;items&#x27;</span>: item_texts</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者存储到列表中</span></span><br><span class="line">data_list = [</span><br><span class="line">    &#123;<span class="string">&#x27;date&#x27;</span>: standard_date, <span class="string">&#x27;items&#x27;</span>: item_texts&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果需要，可以将数据保存到文件或数据库中</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(data_list, f, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p>以上步骤展示了如何使用 <code>BeautifulSoup</code> 进行基本的数据清洗。在实际应用中，你可能需要根据具体的网页结构和数据需求，编写更复杂的解析和清洗逻辑。此外，<code>BeautifulSoup</code> 也提供了许多其他功能，如处理编码问题、解析嵌套标签等，可以根据需要进行学习和使用。</p>
<h2 id="爬取经典moba游戏英雄列表"><a href="#爬取经典moba游戏英雄列表" class="headerlink" title="爬取经典moba游戏英雄列表"></a>爬取经典moba游戏英雄列表</h2><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://pvp.qq.com/web201605/herolist.shtml&#x27;</span></span><br><span class="line">html = requests.get(url).content</span><br><span class="line"><span class="comment"># print(html)</span></span><br><span class="line"></span><br><span class="line">doc = PyQuery(html)</span><br><span class="line"></span><br><span class="line">items = doc(<span class="string">&#x27;.herolist &gt; li&#x27;</span>).items()</span><br><span class="line"><span class="comment"># print(items)</span></span><br><span class="line"><span class="comment"># 生成迭代对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环遍历</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">    <span class="comment"># print(item)</span></span><br><span class="line">    url = item.find(<span class="string">&#x27;img&#x27;</span>).attr(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(url)</span></span><br><span class="line">    urls = <span class="string">&#x27;http:&#x27;</span> + url</span><br><span class="line">    name = item.find(<span class="string">&#x27;a&#x27;</span>).text()</span><br><span class="line">    <span class="comment"># print(name)</span></span><br><span class="line">    url_content = requests.get(urls).content</span><br><span class="line">    <span class="comment"># 下载 w write b bytes 二进制写入</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data/herolist/&#x27;</span> + name + <span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="comment"># 保存</span></span><br><span class="line">        file.write(url_content)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;正在下载：%s---------%s&#x27;</span> % (name, urls))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;下载完毕&#x27;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>程序员必备开发工具</title>
    <url>/blog/2024/03/16/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E5%A4%87%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h1 id="程序员必备开发工具"><a href="#程序员必备开发工具" class="headerlink" title="程序员必备开发工具"></a>程序员必备开发工具</h1><p>程序员在日常开发工作中，经常需要使用到各种集成开发环境（IDE）和其他辅助工具。以下是一些广泛使用的IDE和开发工具：</p>
<h2 id="集成开发环境（IDE）"><a href="#集成开发环境（IDE）" class="headerlink" title="集成开发环境（IDE）"></a>集成开发环境（IDE）</h2><ol>
<li><strong>IntelliJ IDEA</strong>：<ul>
<li>由JetBrains开发，支持Java、Kotlin、Scala等多种语言，提供智能代码辅助、强大的重构工具和丰富的插件生态系统。</li>
</ul>
</li>
<li><strong>Eclipse</strong>：<ul>
<li>开源IDE，支持Java、C&#x2F;C++、PHP等多种语言，具有强大的插件系统，可以根据需要进行定制。</li>
</ul>
</li>
<li><strong>Visual Studio</strong>：<ul>
<li>微软开发，支持C#、Visual Basic、JavaScript等语言，提供集成的数据库工具、Web开发工具和强大的调试功能。</li>
</ul>
</li>
<li><strong>PyCharm</strong>：<ul>
<li>同样由JetBrains开发，专门为Python设计，提供代码自动完成、项目管理、版本控制和科学工具等功能。</li>
</ul>
</li>
<li><strong>Visual Studio Code</strong>（VS Code）：<ul>
<li>微软开发，免费、开源，支持多种语言，通过扩展市场提供丰富的插件，轻量级但功能强大。</li>
</ul>
</li>
<li><strong>Sublime Text</strong>：<ul>
<li>轻量级的文本编辑器，支持多种编程语言，通过插件系统可以扩展功能，适合快速编写代码和文本。</li>
</ul>
</li>
<li><strong>NetBeans</strong>：<ul>
<li>支持Java、PHP、C&#x2F;C++等语言，提供集成的版本控制和数据库工具，界面友好，易于上手。</li>
</ul>
</li>
<li><strong>RStudio</strong>：<ul>
<li>专为R语言设计的IDE，提供代码编辑、调试、可视化和项目管理等功能。</li>
</ul>
</li>
<li><strong>HBuilderX</strong>：<ul>
<li>由 DCloud 公司开发，是一款轻量级的前端开发工具，特别适合前端开发者和小程序开发者。</li>
</ul>
</li>
<li>**Embarcadero Dev-C++**：</li>
</ol>
<ul>
<li>一款 C&#x2F;C++ 集成开发环境，提供代码编辑、调试和项目管理功能。</li>
</ul>
<ol start="11">
<li><strong>GoLand</strong>：<ul>
<li>由 JetBrains 开发，专为 Go 语言设计的跨平台 IDE。内置支持 Go 模块管理和丰富的插件生态系统，如数据库工具、Web 开发和版本控制。</li>
</ul>
</li>
</ol>
<h2 id="版本控制系统"><a href="#版本控制系统" class="headerlink" title="版本控制系统"></a>版本控制系统</h2><ol>
<li><p><strong>Git</strong>：</p>
<ul>
<li>分布式版本控制系统，广泛用于代码的版本管理和团队协作。</li>
</ul>
</li>
<li><p><strong>Subversion</strong>（SVN）：</p>
<ul>
<li>集中式版本控制系统，适用于需要集中管理代码的场景。</li>
</ul>
</li>
</ol>
<h2 id="数据库管理工具"><a href="#数据库管理工具" class="headerlink" title="数据库管理工具"></a>数据库管理工具</h2><ol>
<li><p><strong>phpMyAdmin</strong>：</p>
<ul>
<li>基于Web的MySQL数据库管理工具，提供用户友好的界面来管理数据库。</li>
</ul>
</li>
<li><p><strong>Navicat</strong>：</p>
<ul>
<li>一款强大的数据库开发工具，支持多种数据库，如 MySQL、PostgreSQL、SQLite、Oracle 等。</li>
</ul>
</li>
<li><p><strong>DataGrip</strong>：</p>
<ul>
<li>由 JetBrains 开发的数据库管理工具，支持多种数据库系统，提供智能查询编辑器和数据库版本控制。</li>
</ul>
</li>
</ol>
<h2 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h2><ol>
<li><strong>Docker</strong>：<ul>
<li>应用容器引擎，用于打包应用及其依赖到一个可移植的容器中。</li>
</ul>
</li>
</ol>
<h2 id="接口测试化工具"><a href="#接口测试化工具" class="headerlink" title="接口测试化工具"></a>接口测试化工具</h2><ol>
<li><strong>Apifox</strong>：</li>
</ol>
<ul>
<li>一款 API 设计、开发、测试、文档和模拟的全能工具，支持接口自动化测试和数据 Mock。</li>
</ul>
<ol start="2">
<li><strong>Postman</strong>：</li>
</ol>
<ul>
<li>API开发的辅助工具，用于测试和文档化RESTful API。</li>
</ul>
<h2 id="虚拟机工具"><a href="#虚拟机工具" class="headerlink" title="虚拟机工具"></a>虚拟机工具</h2><ol>
<li><p><strong>Oracle VM VirtualBox</strong>：</p>
<ul>
<li>由 Oracle 提供的开源虚拟化软件，可以在一台机器上创建和管理多个虚拟机。</li>
</ul>
</li>
<li><p><strong>VMware</strong>：</p>
<ul>
<li>提供虚拟化解决方案，包括桌面虚拟化、服务器虚拟化和云计算管理。</li>
</ul>
</li>
</ol>
<h2 id="现有工具补充"><a href="#现有工具补充" class="headerlink" title="现有工具补充"></a>现有工具补充</h2><ol>
<li><p><strong>Android Studio</strong>：</p>
<ul>
<li>官方的 Android 开发 IDE，基于 IntelliJ IDEA，提供丰富的 Android 应用开发工具和插件。</li>
</ul>
</li>
<li><p><strong>CLion</strong>：</p>
<ul>
<li>由 JetBrains 开发的 C 和 C++ 跨平台 IDE，提供智能代码分析、重构和调试功能。</li>
</ul>
</li>
</ol>
<p>选择合适的IDE和工具可以显著提高开发效率和代码质量。不同的项目和开发需求可能需要不同的工具组合，因此程序员通常会根据具体的工作环境和个人偏好来选择最适合自己的工具。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>米哈游一面前端开发岗面试题，你会做几道?</title>
    <url>/blog/2024/03/16/%E7%B1%B3%E5%93%88%E6%B8%B8%E4%B8%80%E9%9D%A2%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B2%97%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%BD%A0%E4%BC%9A%E5%81%9A%E5%87%A0%E9%81%93/</url>
    <content><![CDATA[<h1 id="米哈游一面前端开发岗面试题，你会做几道"><a href="#米哈游一面前端开发岗面试题，你会做几道" class="headerlink" title="米哈游一面前端开发岗面试题，你会做几道?"></a>米哈游一面前端开发岗面试题，你会做几道?</h1><p>这是一份米哈游前端开发岗位的面试题总结，涵盖了异步编程（<code>async/await</code>）、深拷贝问题、数组判断和手写<code>instanceof</code>方法、React的diff算法在DOM更新中的应用、HTTP请求携带cookie、跨域问题及其解决方案、Webpack的工作流程、使用Webpack的loader处理特定场景问题、ES5的继承和原型链、CommonJS与ES6模块的区别。这些问题旨在评估面试者的前端知识深度和广度，确保程序员具备解决实际开发问题的能力。</p>
<h2 id="1-自我介绍："><a href="#1-自我介绍：" class="headerlink" title="1. 自我介绍："></a>1. 自我介绍：</h2><p>略</p>
<h2 id="2-async-await的设计和实现："><a href="#2-async-await的设计和实现：" class="headerlink" title="2. async&#x2F;await的设计和实现："></a>2. async&#x2F;await的设计和实现：</h2><p><code>async</code>和<code>await</code>是JavaScript中用于简化异步编程的关键字。<code>async</code>声明一个函数是异步的，而<code>await</code>则用于等待一个Promise解决它的值。<code>async</code>函数隐式返回一个Promise，而<code>await</code>会暂停代码的执行，直到等待的Promise被解决或拒绝。这种设计使得异步代码看起来和同步代码类似，提高了代码的可读性和可维护性。</p>
<h2 id="3-深拷贝需要注意哪些问题？"><a href="#3-深拷贝需要注意哪些问题？" class="headerlink" title="3. 深拷贝需要注意哪些问题？"></a>3. 深拷贝需要注意哪些问题？</h2><p>深拷贝需要注意以下几个问题：</p>
<ul>
<li>性能开销：深拷贝会创建对象和其所有子对象的完整副本，这可能导致性能问题。</li>
<li>循环引用：如果对象图中存在循环引用，深拷贝可能导致无限循环。</li>
<li>特殊对象：对于某些特殊对象（如Date、RegExp、Function等），深拷贝可能不会按预期工作。</li>
<li>方法和属性：深拷贝可能不会复制对象的方法和访问器属性。</li>
</ul>
<h2 id="4-判断数组的方法有哪些？手写一个instanceof方法："><a href="#4-判断数组的方法有哪些？手写一个instanceof方法：" class="headerlink" title="4. 判断数组的方法有哪些？手写一个instanceof方法："></a>4. 判断数组的方法有哪些？手写一个instanceof方法：</h2><p>判断数组的方法包括：</p>
<ul>
<li><code>Array.isArray()</code></li>
<li>使用<code>Object.prototype.toString.call()</code>方法<br>手写<code>instanceof</code>方法：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myInstanceOf</span>(<span class="params">constructor, obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj <span class="keyword">instanceof</span> constructor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-如何借鉴React-diff算法的思想，实现各种情况下树节点的更新："><a href="#5-如何借鉴React-diff算法的思想，实现各种情况下树节点的更新：" class="headerlink" title="5. 如何借鉴React diff算法的思想，实现各种情况下树节点的更新："></a>5. 如何借鉴React diff算法的思想，实现各种情况下树节点的更新：</h2><p>React的diff算法通过比较新旧虚拟DOM树的差异来更新实际的DOM。借鉴这一思想，可以为树节点创建一个更新函数，该函数会比较新旧节点的数据和子节点，然后递归地更新需要变化的部分，从而实现高效的DOM操作。</p>
<h2 id="6-怎么让中间页携带上cookie"><a href="#6-怎么让中间页携带上cookie" class="headerlink" title="6. 怎么让中间页携带上cookie?"></a>6. 怎么让中间页携带上cookie?</h2><p>要让中间页（例如通过JavaScript发起的HTTP请求）携带cookie，通常需要满足以下条件：</p>
<ol>
<li><p><strong>同源策略</strong>：默认情况下，浏览器出于安全考虑，只允许同源的页面携带cookie。如果中间页与请求的资源不是同源的，那么浏览器不会自动携带cookie。</p>
</li>
<li><p><strong>设置<code>withCredentials</code>属性</strong>：当使用XMLHttpRequest或Fetch API发起跨域请求时，可以设置<code>withCredentials</code>属性为<code>true</code>，这样浏览器会在请求中携带cookie。这要求服务器端也设置相应的CORS策略，允许跨域请求携带cookie。</p>
<p>使用XMLHttpRequest的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="property">withCredentials</span> = <span class="literal">true</span>;</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;https://example.com&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>

<p>使用Fetch API的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://example.com&#x27;</span>, &#123; <span class="attr">credentials</span>: <span class="string">&#x27;include&#x27;</span> &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error));</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>服务器端设置CORS</strong>：服务器端需要设置适当的CORS（跨源资源共享）响应头，允许特定的外部域携带cookie。这通常通过设置<code>Access-Control-Allow-Origin</code>和<code>Access-Control-Allow-Credentials</code>响应头来实现。</p>
<p>例如，在Express应用中，可以使用cors中间件来简化这一过程：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>(&#123; <span class="attr">origin</span>: <span class="string">&#x27;https://allowed-domain.com&#x27;</span>, <span class="attr">credentials</span>: <span class="literal">true</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 其他的路由和中间件 ...</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>确保cookie设置正确</strong>：如果cookie设置有误，如<code>HttpOnly</code>标记，那么即使满足上述条件，JavaScript也无法访问这些cookie，因此它们也不会被发送。</p>
</li>
</ol>
<p>出于安全考虑，只有在确实需要时才应该启用跨域请求携带cookie的功能，并且要确保相关的安全措施得到妥善实施，以防止潜在的安全风险，如CSRF攻击。</p>
<h2 id="7-说说跨域问题："><a href="#7-说说跨域问题：" class="headerlink" title="7. 说说跨域问题："></a>7. 说说跨域问题：</h2><p>跨域问题，又称为同源策略（Same-Origin Policy），是浏览器为了保护用户安全而实施的一种安全机制。当一个域（由协议、域名和端口号组成）的网页尝试请求另一个域的资源时，就会遇到跨域问题。这种限制阻止了网页在没有明确允许的情况下访问或操作其他域的数据，从而避免了潜在的安全威胁，如数据泄露和恶意操作。</p>
<h3 id="跨域问题的原因："><a href="#跨域问题的原因：" class="headerlink" title="跨域问题的原因："></a>跨域问题的原因：</h3><ul>
<li><strong>不同源的资源访问</strong>：例如，<code>https://www.example.com</code> 尝试访问 <code>https://api.different.com</code> 的资源。</li>
<li><strong>第三方脚本</strong>：当你的网页加载了来自其他源的JavaScript脚本时，这些脚本默认无法访问原始文档的DOM或Cookie。</li>
<li><strong>AJAX请求</strong>：使用XMLHttpRequest或Fetch API发起的请求，如果目标URL与当前文档的URL不同源，请求会因为跨域而被浏览器拦截。</li>
</ul>
<h3 id="跨域问题的解决方案："><a href="#跨域问题的解决方案：" class="headerlink" title="跨域问题的解决方案："></a>跨域问题的解决方案：</h3><ol>
<li><p><strong>JSONP（JSON with Padding）</strong>：</p>
<ul>
<li>利用<code>&lt;script&gt;</code>标签没有跨域限制的特点，可以通过动态创建<code>&lt;script&gt;</code>标签来请求跨域的JSON数据。</li>
<li>服务器返回的数据需要被包裹在一个函数调用中，客户端提供一个回调函数来接收这些数据。</li>
</ul>
</li>
<li><p><strong>CORS（跨源资源共享）</strong>：</p>
<ul>
<li>服务器设置特定的HTTP响应头，如<code>Access-Control-Allow-Origin</code>，来告诉浏览器允许跨域请求。</li>
<li>可以通过设置<code>Access-Control-Allow-Methods</code>和<code>Access-Control-Allow-Headers</code>来控制允许的HTTP方法和请求头。</li>
</ul>
</li>
<li><p><strong>代理服务器</strong>：</p>
<ul>
<li>在服务器端设置一个代理服务器，将客户端的请求先发送到代理服务器，由代理服务器转发请求到目标服务器，并将响应返回给客户端。</li>
<li>这样，客户端和代理服务器之间不会有跨域问题，因为它们同源。</li>
</ul>
</li>
<li><p><strong>PostMessage</strong>：</p>
<ul>
<li>这是HTML5引入的一种安全的跨域通信方式，允许不同源的窗口之间传递消息。</li>
<li>通过<code>window.postMessage</code>方法发送消息，并在目标窗口中监听<code>message</code>事件来接收消息。</li>
</ul>
</li>
<li><p><strong>WebSockets</strong>：</p>
<ul>
<li>WebSocket协议提供了浏览器和服务器之间的全双工通信渠道，不受限于同源策略。</li>
<li>可以用于建立持久的连接，进行实时数据交换。</li>
</ul>
</li>
<li><p><strong>修改document.domain</strong>：</p>
<ul>
<li>如果两个域名的主域相同（例如<code>example1.com</code>和<code>example2.com</code>），可以通过设置<code>document.domain=&#39;example.com&#39;</code>来实现跨子域的访问。</li>
</ul>
</li>
<li><p><strong>使用Location Hash</strong>：</p>
<ul>
<li>通过在URL的哈希部分（即URL中的<code>#</code>后面的部分）传递信息，可以绕过同源策略的限制。</li>
</ul>
</li>
</ol>
<h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><ul>
<li>在使用跨域解决方案时，需要考虑到安全性，特别是当允许跨域携带Cookie时。</li>
<li>CORS是推荐使用的跨域解决方案，因为它提供了更多的控制和灵活性。</li>
</ul>
<p>跨域问题的处理需要根据具体的应用场景和技术栈来选择合适的方法。在实施任何跨域解决方案时，都应确保遵循最佳安全实践。</p>
<h2 id="8-讲讲webpack的整个工作流程："><a href="#8-讲讲webpack的整个工作流程：" class="headerlink" title="8. 讲讲webpack的整个工作流程："></a>8. 讲讲webpack的整个工作流程：</h2><p>Webpack的工作流程包括：</p>
<ul>
<li>解析：读取配置文件，初始化参数。</li>
<li>编译：从入口文件开始，递归地构建AST（抽象语法树）。</li>
<li>模块解析：分析模块依赖，递归地找到所有模块。</li>
<li>模块加载：使用对应的loader处理模块。</li>
<li>输出：根据依赖关系和模块内容，生成最终的bundle文件。</li>
</ul>
<h2 id="9-有没有用过webpack的loader解决过一些具体的场景问题？"><a href="#9-有没有用过webpack的loader解决过一些具体的场景问题？" class="headerlink" title="9. 有没有用过webpack的loader解决过一些具体的场景问题？"></a>9. 有没有用过webpack的loader解决过一些具体的场景问题？</h2><p>例如使用<code>css-loader</code>和<code>style-loader</code>处理CSS文件，或使用<code>babel-loader</code>将ES6代码转换为ES5。</p>
<h2 id="10-ES5怎么实现继承？讲讲对原型链的理解："><a href="#10-ES5怎么实现继承？讲讲对原型链的理解：" class="headerlink" title="10. ES5怎么实现继承？讲讲对原型链的理解："></a>10. ES5怎么实现继承？讲讲对原型链的理解：</h2><p>ES5中实现继承通常使用构造函数、原型链和混成继承。原型链是JavaScript中实现继承的机制，每个对象都有一个内部属性<code>[[Prototype]]</code>，指向它的构造函数的<code>prototype</code>属性。继承通常是通过设置子类型构造函数的原型为父类型实例来实现的。</p>
<h2 id="11-require和import的区别？"><a href="#11-require和import的区别？" class="headerlink" title="11. require和import的区别？"></a>11. require和import的区别？</h2><p><code>require</code>是CommonJS规范中的模块加载方式，通常用于Node.js环境，而<code>import</code>是ES6模块加载的语法。<code>require</code>是同步加载模块，而<code>import</code>是异步加载，且<code>import</code>提供了更清晰的语法和静态分析能力。</p>
<h2 id="12-有没有什么想问我的？"><a href="#12-有没有什么想问我的？" class="headerlink" title="12. 有没有什么想问我的？"></a>12. 有没有什么想问我的？</h2><p>略</p>
]]></content>
  </entry>
  <entry>
    <title>缤纷浏览器 —— 一键换肤，个性随心换</title>
    <url>/blog/2024/03/23/%E7%BC%A4%E7%BA%B7%E6%B5%8F%E8%A7%88%E5%99%A8-%E2%80%94%E2%80%94-%E4%B8%80%E9%94%AE%E6%8D%A2%E8%82%A4%EF%BC%8C%E4%B8%AA%E6%80%A7%E9%9A%8F%E5%BF%83%E6%8D%A2/</url>
    <content><![CDATA[<h1 id="缤纷浏览器-——-一键换肤，个性随心换"><a href="#缤纷浏览器-——-一键换肤，个性随心换" class="headerlink" title="缤纷浏览器 —— 一键换肤，个性随心换"></a>缤纷浏览器 —— 一键换肤，个性随心换</h1><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p>想要给你的浏览器换上新装吗？来看看这个简单又实用的H5换肤效果吧！点击下方的图片，即可体验不同的浏览器皮肤，让你的浏览体验更加多彩。</p>
<blockquote>
<p>线上访问地址：</p>
<p><a href="http://8.210.131.139/BrowserSkin.html">缤纷浏览器换肤效果</a></p>
</blockquote>
<h2 id="1-搭建网页框架"><a href="#1-搭建网页框架" class="headerlink" title="1. 搭建网页框架"></a>1. 搭建网页框架</h2><p>首先，我们创建一个基本的HTML文档结构，为后续的样式和脚本打下基础。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>缤纷浏览器 —— 一键换肤，个性随心换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 网页内容将在这里添加 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-搭建网页元素结构"><a href="#2-搭建网页元素结构" class="headerlink" title="2. 搭建网页元素结构"></a>2. 搭建网页元素结构</h2><p>在<code>&lt;body&gt;</code>标签中，我们添加了一个包含多个<code>&lt;img&gt;</code>元素的<code>&lt;ul&gt;</code>列表，每个图片代表一种皮肤。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;skin-list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn-hw-static2.shanhutech.cn/bizhi/staticwp/202310/245d0b716c34ec5ad25f203bad78a913--972850685.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Skin 1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn-hw-static2.shanhutech.cn/bizhi/staticwp/202310/17e05efa4e03c4a62a9ef4dc8fbeb409--2755567652.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Skin 2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn-hw-static2.shanhutech.cn/bizhi/staticwp/202310/b4384e8369039552446b4e0663c4c450--3317306650.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Skin 3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn-hw-static2.shanhutech.cn/bizhi/staticwp/202401/7653154ac8956eb8194325af063b032f--4006561019.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Skin 4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-编写CSS样式"><a href="#3-编写CSS样式" class="headerlink" title="3. 编写CSS样式"></a>3. 编写CSS样式</h2><p>接下来，我们为页面添加一些样式，使其看起来更加美观。同时，我们将添加一些表情包元素，增加页面的趣味性。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;http://cdn-hw-static2.shanhutech.cn/bizhi/staticwp/202310/245d0b716c34ec5ad25f203bad78a913--972850685.jpg&quot;</span>) no-repeat center center / cover;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Arial&#x27;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.skin-list</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.skin-list</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">transition</span>: transform <span class="number">0.3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.skin-list</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.skin-list</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 添加表情包样式 */</span></span><br><span class="line">表情包 &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff7f50</span>;</span><br><span class="line">    <span class="attribute">animation</span>: float <span class="number">2s</span> ease-in-out infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> float &#123;</span><br><span class="line">    <span class="number">0%</span>, <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">50%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">20px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-编写点击事件"><a href="#4-编写点击事件" class="headerlink" title="4. 编写点击事件"></a>4. 编写点击事件</h2><p>最后，我们为每个图片添加点击事件，当用户点击图片时，更改背景图片以实现换肤效果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 获取所有图片元素</span></span><br><span class="line">    <span class="keyword">var</span> skins = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.skin-list img&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 循环为每个图片注册点击事件</span></span><br><span class="line">    skins.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">skin</span>) &#123;</span><br><span class="line">        skin.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 设置body的背景图片为被点击图片的src属性</span></span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">backgroundImage</span> = <span class="string">&#x27;url(&#x27;</span> + <span class="variable language_">this</span>.<span class="property">src</span> + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><p>将以上HTML、CSS和JavaScript代码合并，即可得到完整的换肤效果页面。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Browser skin --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>缤纷浏览器 —— 一键换肤，个性随心换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">http://cdn-hw-static2.shanhutech.cn/bizhi/staticwp/202310/245d0b716c34ec5ad25f203bad78a913--972850685.jpg</span>) no-repeat <span class="number">0</span> <span class="number">0</span> / <span class="number">100%</span> <span class="number">100%</span> border-box border-box fixed;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.baidu</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">410px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-top</span>: <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.baidu</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.baidu</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;baidu&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">                <span class="attr">src</span>=<span class="string">&quot;http://cdn-hw-static2.shanhutech.cn/bizhi/staticwp/202310/245d0b716c34ec5ad25f203bad78a913--972850685.jpg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">                <span class="attr">src</span>=<span class="string">&quot;http://cdn-hw-static2.shanhutech.cn/bizhi/staticwp/202310/17e05efa4e03c4a62a9ef4dc8fbeb409--2755567652.jpg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">                <span class="attr">src</span>=<span class="string">&quot;http://cdn-hw-static2.shanhutech.cn/bizhi/staticwp/202310/b4384e8369039552446b4e0663c4c450--3317306650.jpg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">                <span class="attr">src</span>=<span class="string">&quot;http://cdn-hw-static2.shanhutech.cn/bizhi/staticwp/202401/7653154ac8956eb8194325af063b032f--4006561019.jpg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取元素 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> imgs = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.baidu&#x27;</span>).<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;img&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(imgs);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 循环注册事件 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imgs.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            imgs[i].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.src 就是我们点击图片的路径   images/2.jpg</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(this.src);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 把这个路径 this.src 给body 就可以了</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">backgroundImage</span> = <span class="string">&#x27;url(&#x27;</span> + <span class="variable language_">this</span>.<span class="property">src</span> + <span class="string">&#x27;)&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在，你的浏览器换肤页面已经完成了！点击不同的图片，享受个性化的浏览体验吧。记得检查网络连接，确保图片资源可以顺利加载。如果你喜欢这个效果，不妨分享给你的朋友们，一起享受缤纷的网络世界！</p>
<p><strong>如果对你有帮助，点赞👍、收藏💖、关注🔔是我更新的动力！👋🌟🚀</strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义滚动条样式：前端实现跨浏览器兼容</title>
    <url>/blog/2024/04/14/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%A0%B7%E5%BC%8F%EF%BC%9A%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0%E8%B7%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9/</url>
    <content><![CDATA[<h1 id="自定义滚动条样式：前端实现跨浏览器兼容"><a href="#自定义滚动条样式：前端实现跨浏览器兼容" class="headerlink" title="自定义滚动条样式：前端实现跨浏览器兼容"></a>自定义滚动条样式：前端实现跨浏览器兼容</h1><p>滚动条不仅是用户与网页交互的重要元素，也是网页美观性的一个细节体现。在前端开发中，自定义滚动条样式可以提升用户体验，使网页更加个性化。本文将介绍如何在前端设置滚轮滚动条样式，并确保兼容各大主流浏览器。</p>
<h2 id="为什么自定义滚动条样式"><a href="#为什么自定义滚动条样式" class="headerlink" title="为什么自定义滚动条样式"></a>为什么自定义滚动条样式</h2><ul>
<li><strong>提升用户体验</strong>：符合网站整体风格的滚动条可以提供更一致的用户体验。</li>
<li><strong>增强视觉效果</strong>：独特的滚动条样式可以增强网页的视觉效果，吸引用户注意。</li>
<li><strong>保持一致性</strong>：在网站的不同部分保持滚动条样式的一致性，有助于维护网站的专业形象。</li>
</ul>
<h2 id="实现自定义滚动条"><a href="#实现自定义滚动条" class="headerlink" title="实现自定义滚动条"></a>实现自定义滚动条</h2><p>跨浏览器自定义滚动条样式主要依赖于CSS。下面是一些关键的CSS属性和技术，可以帮助你实现自定义滚动条。</p>
<h3 id="1-基本样式设置"><a href="#1-基本样式设置" class="headerlink" title="1. 基本样式设置"></a>1. 基本样式设置</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 针对Webkit核心的浏览器（如Chrome和Safari） */</span></span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">12px</span>; <span class="comment">/* 横向滚动条的宽度 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">12px</span>; <span class="comment">/* 纵向滚动条的高度 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#c0c0c0</span>; <span class="comment">/* 滚动条滑块的背景颜色 */</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">6px</span>; <span class="comment">/* 滑块的圆角 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-track &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f1f1f1</span>; <span class="comment">/* 滚动条轨道的背景颜色 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 针对Firefox浏览器 */</span></span><br><span class="line">scrollbar &#123;</span><br><span class="line">  -moz-appearance: none;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scrollbar-thumb &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#c0c0c0</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scrollbar-track &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f1f1f1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-激活状态和悬停效果"><a href="#2-激活状态和悬停效果" class="headerlink" title="2. 激活状态和悬停效果"></a>2. 激活状态和悬停效果</h3><p>你还可以为滚动条添加激活状态和悬停效果，以提供视觉反馈。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">::-webkit-scrollbar-thumb:hover &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#a0a0a0</span>; <span class="comment">/* 滑块悬停时的背景颜色 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scrollbar-thumb<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#a0a0a0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-针对特定元素的滚动条样式"><a href="#3-针对特定元素的滚动条样式" class="headerlink" title="3. 针对特定元素的滚动条样式"></a>3. 针对特定元素的滚动条样式</h3><p>如果你只想为页面中的特定元素设置滚动条样式，可以使用以下选择器：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 为ID为&#x27;scrollable-area&#x27;的元素设置滚动条样式 */</span></span><br><span class="line"><span class="selector-id">#scrollable-area</span>::-webkit-scrollbar &#123;</span><br><span class="line">  <span class="comment">/* Webkit样式 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#scrollable-area</span>::-webkit-scrollbar-thumb &#123;</span><br><span class="line">  <span class="comment">/* Webkit滑块样式 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scrollbar<span class="selector-attr">[orient=<span class="string">&quot;vertical&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="comment">/* Firefox样式 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="兼容性考虑"><a href="#兼容性考虑" class="headerlink" title="兼容性考虑"></a>兼容性考虑</h2><ul>
<li><strong>Webkit核心浏览器</strong>：包括Chrome、Safari和Opera，支持<code>::-webkit-scrollbar</code>伪元素。</li>
<li><strong>Firefox浏览器</strong>：使用<code>scrollbar</code>伪元素，但不支持<code>border-radius</code>。</li>
<li><strong>Edge浏览器</strong>：新版Edge基于Chromium，与Chrome的兼容性相同。</li>
<li><strong>Internet Explorer</strong>：不支持自定义滚动条样式。</li>
</ul>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>自定义滚动条样式是一个简单但有效的前端技巧，可以提升网页的整体美观度和用户体验。通过上述CSS代码，你可以为主流浏览器创建一致的滚动条样式。需要注意的是，自定义滚动条样式可能受到浏览器更新和用户设置的影响，因此在实际应用中需要进行充分的测试，确保在不同环境下都能保持良好的兼容性和稳定性。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>长沙</title>
    <url>/blog/2023/03/17/%E9%95%BF%E6%B2%99/</url>
    <content><![CDATA[<p><img src="/blog/image/%E9%95%BF%E6%B2%99/1.jpg" alt="长沙"></p>
<p><img src="/blog/image/%E9%95%BF%E6%B2%99/2.jpg" alt="长沙"></p>
<p><img src="/blog/image/%E9%95%BF%E6%B2%99/3.jpg" alt="长沙"></p>
<p><img src="/blog/image/%E9%95%BF%E6%B2%99/4.jpg" alt="长沙"></p>
<p><img src="/blog/image/%E9%95%BF%E6%B2%99/5.jpg" alt="长沙"></p>
<p><img src="/blog/image/%E9%95%BF%E6%B2%99/9.jpg" alt="长沙"></p>
<p><img src="/blog/image/%E9%95%BF%E6%B2%99/10.jpg" alt="长沙"></p>
<p><img src="/blog/image/%E9%95%BF%E6%B2%99/11.jpg" alt="长沙"></p>
<p><img src="/blog/image/%E9%95%BF%E6%B2%99/12.jpg" alt="长沙"></p>
<p><img src="/blog/image/%E9%95%BF%E6%B2%99/13.jpg" alt="长沙"></p>
<p><img src="/blog/image/%E9%95%BF%E6%B2%99/14.jpg" alt="长沙"></p>
<p><img src="/blog/image/%E9%95%BF%E6%B2%99/15.jpg" alt="长沙"></p>
<p><img src="/blog/image/%E9%95%BF%E6%B2%99/16.jpg" alt="长沙"></p>
<p><img src="/blog/image/%E9%95%BF%E6%B2%99/17.jpg" alt="长沙"></p>
]]></content>
      <categories>
        <category>旅行</category>
      </categories>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>🚀 计算机专业学生的成长之路：超越课堂的自我提升策略 📚</title>
    <url>/blog/2024/03/22/%F0%9F%9A%80-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E5%AD%A6%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF%EF%BC%9A%E8%B6%85%E8%B6%8A%E8%AF%BE%E5%A0%82%E7%9A%84%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87%E7%AD%96%E7%95%A5-%F0%9F%93%9A/</url>
    <content><![CDATA[<h1 id="🚀-计算机专业学生的成长之路：超越课堂的自我提升策略-📚"><a href="#🚀-计算机专业学生的成长之路：超越课堂的自我提升策略-📚" class="headerlink" title="🚀 计算机专业学生的成长之路：超越课堂的自我提升策略 📚"></a>🚀 计算机专业学生的成长之路：超越课堂的自我提升策略 📚</h1><p>在计算机专业的学习旅程中，我们往往会发现，仅仅依靠课堂和课本的知识是远远不够的。在这个信息爆炸💥的时代，主动拓展学习边界，积极利用外部资源，对于提升我们的专业技能至关重要。以下是一些实用的建议，帮助计算机专业的学弟学妹们在校园之外，继续深化和扩展自己的计算机知识。</p>
<h2 id="🌟-计算机专业学生的成长之路"><a href="#🌟-计算机专业学生的成长之路" class="headerlink" title="🌟 计算机专业学生的成长之路"></a>🌟 计算机专业学生的成长之路</h2><h3 id="1-探索GitHub-🐙"><a href="#1-探索GitHub-🐙" class="headerlink" title="1. 探索GitHub 🐙"></a><strong>1. 探索GitHub 🐙</strong></h3><p>GitHub不仅是代码托管平台，更是程序员的社区。这里有丰富的开源项目和代码，是学习和交流的宝库。通过参与项目，你可以了解实际开发流程，提升编程技能。</p>
<h3 id="2-精通Google搜索-🔍"><a href="#2-精通Google搜索-🔍" class="headerlink" title="2. 精通Google搜索 🔍"></a><strong>2. 精通Google搜索 🔍</strong></h3><p>面对问题和挑战时，学会高效使用Google搜索，寻找解决方案。这不仅能帮助你解决当前的问题，还能让你习惯于自主学习，培养解决问题的能力。</p>
<h3 id="3-自学关键技术-🛠️"><a href="#3-自学关键技术-🛠️" class="headerlink" title="3. 自学关键技术 🛠️"></a><strong>3. 自学关键技术 🛠️</strong></h3><p>掌握Docker、Linux、vim、shell脚本和版本控制（如git）等基础技能。这些是现代软件开发不可或缺的工具，对于提高开发效率和质量至关重要。</p>
<h3 id="4-学习国际公开课-🎓"><a href="#4-学习国际公开课-🎓" class="headerlink" title="4. 学习国际公开课 🎓"></a><strong>4. 学习国际公开课 🎓</strong></h3><p>利用斯坦福、普林斯顿、MIT等顶尖大学提供的在线课程，这些课程往往由领域内的专家讲授，内容深入浅出，是自我提升的优质资源。</p>
<h3 id="5-实战项目经验-🏢"><a href="#5-实战项目经验-🏢" class="headerlink" title="5. 实战项目经验 🏢"></a><strong>5. 实战项目经验 🏢</strong></h3><p>通过参与计算机类项目，如阿里天池、百度之星ACM、蓝桥杯等竞赛，你可以将理论知识应用于实践，积累宝贵的实战经验。</p>
<h3 id="6-阅读经典书籍-📚"><a href="#6-阅读经典书籍-📚" class="headerlink" title="6. 阅读经典书籍 📚"></a><strong>6. 阅读经典书籍 📚</strong></h3><p>《算法导论》、《深入理解计算机系统》等经典书籍，为我们提供了计算机科学的深厚基础。阅读这些书籍，能够帮助我们构建扎实的理论体系。</p>
<h3 id="7-实习经验-👔"><a href="#7-实习经验-👔" class="headerlink" title="7. 实习经验 👔"></a><strong>7. 实习经验 👔</strong></h3><p>无论是日常实习还是暑期实习，实际的工作经验能让你在真实的工作环境中学习和成长，对于未来的职业发展大有裨益。</p>
<h3 id="8-刷题提升-💪"><a href="#8-刷题提升-💪" class="headerlink" title="8. 刷题提升 💪"></a><strong>8. 刷题提升 💪</strong></h3><p>在LeetCode等在线平台上刷题，不仅能够锻炼你的编程能力，还能帮助你准备互联网大厂的面试。特别是在数据结构与算法、操作系统、计算机网络、计算机组成原理等核心课程上的深入学习，将为你的编程之路打下坚实的基础。</p>
<h2 id="🎯-推荐的刷题网站："><a href="#🎯-推荐的刷题网站：" class="headerlink" title="🎯 推荐的刷题网站："></a>🎯 推荐的刷题网站：</h2><ul>
<li>**<a href="https://codeforces.com/">Codeforces 🥊</a>**：来自俄罗斯的编程竞赛平台，题目多样，适合提升算法能力。</li>
<li>**<a href="https://cas.hdu.edu.cn/cas/login">HDU（杭州电子科技大学OJ）🏆</a>**：国内知名的在线判题系统，举办多场编程比赛。</li>
<li>**<a href="https://www.luogu.com.cn/">洛谷 🌱</a>**：适合新手练习，题库分类详细，题解质量高。</li>
<li>**<a href="http://www.hihocoder.com/problemset">Hihocoder 🏃‍♂️</a>**：由原北大POJ团队开发，常有大厂在线编程比赛。</li>
</ul>
<h2 id="结语-🎓："><a href="#结语-🎓：" class="headerlink" title="结语 🎓："></a>结语 🎓：</h2><p>计算机专业的学习是一个不断探索和实践的过程。通过上述方法，你可以有效地缩小与前沿技术之间的信息差，不断提升自己的核心竞争力。记住，计算机专业的学习不仅仅是为了应付考试，更重要的是为了在未来的职业生涯中，能够不断适应和引领技术的发展。</p>
<p><strong>如果对你有帮助，点赞👍、收藏💖、关注🔔是我更新的动力！👋🌟🚀</strong></p>
]]></content>
      <categories>
        <category>经验分享</category>
      </categories>
      <tags>
        <tag>程序员</tag>
      </tags>
  </entry>
</search>
